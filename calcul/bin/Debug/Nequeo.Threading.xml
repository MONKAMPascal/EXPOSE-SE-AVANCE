<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nequeo.Threading</name>
    </assembly>
    <members>
        <member name="T:Nequeo.Threading.ActionCountdownEvent">
            <summary>Runs an action when the CountdownEvent reaches zero.</summary>
        </member>
        <member name="M:Nequeo.Threading.ActionCountdownEvent.#ctor(System.Int32,System.Action)">
            <summary>Initializes the ActionCountdownEvent.</summary>
            <param name="initialCount">The number of signals required to set the CountdownEvent.</param>
            <param name="action">The delegate to be invoked when the count reaches zero.</param>
        </member>
        <member name="M:Nequeo.Threading.ActionCountdownEvent.AddCount">
            <summary>Increments the current count by one.</summary>
        </member>
        <member name="M:Nequeo.Threading.ActionCountdownEvent.Signal">
            <summary>Registers a signal with the event, decrementing its count.</summary>
        </member>
        <member name="F:Nequeo.Threading.ActionCountdownEvent.disposed">
            <summary>
            Track whether Dispose has been called.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.ActionCountdownEvent.Dispose">
            <summary>
            Implement IDisposable.
            Do not make this method virtual.
            A derived class should not be able to override this method.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.ActionCountdownEvent.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.ActionCountdownEvent.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="T:Nequeo.Threading.AsyncCache_DebugView`2">
            <summary>Debugger type proxy for AsyncCache.</summary>
            <typeparam name="TKey">Specifies the type of the cache's keys.</typeparam>
            <typeparam name="TValue">Specifies the type of the cache's values.</typeparam>
        </member>
        <member name="T:Nequeo.Threading.AsyncCache`2">
            <summary>Caches asynchronously retrieved data.</summary>
            <typeparam name="TKey">Specifies the type of the cache's keys.</typeparam>
            <typeparam name="TValue">Specifies the type of the cache's values.</typeparam>
        </member>
        <member name="F:Nequeo.Threading.AsyncCache`2._valueFactory">
            <summary>The factory to use to create tasks.</summary>
        </member>
        <member name="F:Nequeo.Threading.AsyncCache`2._map">
            <summary>The dictionary to store all of the tasks.</summary>
        </member>
        <member name="M:Nequeo.Threading.AsyncCache`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}})">
            <summary>Initializes the cache.</summary>
            <param name="valueFactory">A factory for producing the cache's values.</param>
        </member>
        <member name="M:Nequeo.Threading.AsyncCache`2.GetValue(`0)">
            <summary>Gets a Task to retrieve the value for the specified key.</summary>
            <param name="key">The key whose value should be retrieved.</param>
            <returns>A Task for the value of the specified key.</returns>
        </member>
        <member name="M:Nequeo.Threading.AsyncCache`2.SetValue(`0,`1)">
            <summary>Sets the value for the specified key.</summary>
            <param name="key">The key whose value should be set.</param>
            <param name="value">The value to which the key should be set.</param>
        </member>
        <member name="M:Nequeo.Threading.AsyncCache`2.SetValue(`0,System.Threading.Tasks.Task{`1})">
            <summary>Sets the value for the specified key.</summary>
            <param name="key">The key whose value should be set.</param>
            <param name="value">The value to which the key should be set.</param>
        </member>
        <member name="P:Nequeo.Threading.AsyncCache`2.Item(`0)">
            <summary>Gets a Task to retrieve the value for the specified key.</summary>
            <param name="key">The key whose value should be retrieved.</param>
            <returns>A Task for the value of the specified key.</returns>
        </member>
        <member name="M:Nequeo.Threading.AsyncCache`2.Clear">
            <summary>Empties the cache.</summary>
        </member>
        <member name="P:Nequeo.Threading.AsyncCache`2.Count">
            <summary>Gets the number of items in the cache.</summary>
        </member>
        <member name="M:Nequeo.Threading.AsyncCache`2.GetEnumerator">
            <summary>Gets an enumerator for the contents of the cache.</summary>
            <returns>An enumerator for the contents of the cache.</returns>
        </member>
        <member name="M:Nequeo.Threading.AsyncCache`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets an enumerator for the contents of the cache.</summary>
            <returns>An enumerator for the contents of the cache.</returns>
        </member>
        <member name="M:Nequeo.Threading.AsyncCache`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Threading#Tasks#Task{TValue}}}#Add(System.Collections.Generic.KeyValuePair{`0,System.Threading.Tasks.Task{`1}})">
            <summary>Adds or overwrites the specified entry in the cache.</summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:Nequeo.Threading.AsyncCache`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Threading#Tasks#Task{TValue}}}#Contains(System.Collections.Generic.KeyValuePair{`0,System.Threading.Tasks.Task{`1}})">
            <summary>Determines whether the cache contains the specified key.</summary>
            <param name="item">The item contained the key to be searched for.</param>
            <returns>True if the cache contains the key; otherwise, false.</returns>
        </member>
        <member name="M:Nequeo.Threading.AsyncCache`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Threading#Tasks#Task{TValue}}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Threading.Tasks.Task{`1}}[],System.Int32)">
            <summary>
            Copies the elements of the System.Collections.Generic.ICollection to an
            System.Array, starting at a particular System.Array index.
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the elements
            copied from System.Collections.Generic.ICollection. The System.Array must
            have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Nequeo.Threading.AsyncCache`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Threading#Tasks#Task{TValue}}}#IsReadOnly">
            <summary>Gets whether the cache is read-only.</summary>
        </member>
        <member name="M:Nequeo.Threading.AsyncCache`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Threading#Tasks#Task{TValue}}}#Remove(System.Collections.Generic.KeyValuePair{`0,System.Threading.Tasks.Task{`1}})">
            <summary>Removes the specified key from the cache.</summary>
            <param name="item">The item containing the key to be removed.</param>
            <returns>True if the item could be removed; otherwise, false.</returns>
        </member>
        <member name="T:Nequeo.Threading.AsyncOperationResult`1">
            <summary>
            Asynchronous operation result
            </summary>
            <typeparam name="T">The result type</typeparam>
        </member>
        <member name="M:Nequeo.Threading.AsyncOperationResult`1.#ctor(`0,System.Object,System.Object)">
            <summary>
            Default constructor
            </summary>
            <param name="result">The result.</param>
            <param name="state">The user state.</param>
            <param name="name">The unique name of the operation.</param>
        </member>
        <member name="P:Nequeo.Threading.AsyncOperationResult`1.Result">
            <summary>
            Gets the result of the operation.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.AsyncOperationResult`1.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.AsyncOperationResult`1.Name">
            <summary>
            Gets the unique name of the operation.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.AsyncOperationResult`1.RunTask(System.Action)">
            <summary>
            Run a task, where the action delegate method implements the 'async' and 'await' keywords.
            </summary>
            <param name="action">The action to perform; where the action delegate method implements the 'async' and 'await' keywords.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="M:Nequeo.Threading.AsyncOperationResult`1.RunTask``1(System.Func{``0})">
            <summary>
            Run a task, where the action delegate method implements the 'async' and 'await' keywords.
            </summary>
            <typeparam name="TResult">The task generic type.</typeparam>
            <param name="action">The action to perform; where the action delegate method implements the 'async' and 'await' keywords.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="M:Nequeo.Threading.AsyncOperationResult`1.RunTaskEx``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Run a task, where the action delegate method implements the 'async' and 'await' keywords.
            </summary>
            <typeparam name="TResult">The task generic type.</typeparam>
            <param name="action">The action to perform; where the action delegate method implements the 'async' and 'await' keywords.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="M:Nequeo.Threading.AsyncOperationResult`1.RunTaskResult(System.Threading.Tasks.Task{`0})">
            <summary>
            Run a task, where the action delegate method implements the 'async' and 'await' keywords.
            </summary>
            <param name="task">The task to execute.</param>
            <returns>The result of the action.</returns>
        </member>
        <member name="M:Nequeo.Threading.AsyncOperationResult`1.RunTaskResult(System.Action)">
            <summary>
            Run a task, where the action delegate method implements the 'async' and 'await' keywords.
            </summary>
            <param name="action">The method to execute on the instance type.</param>
            <returns>The task result.</returns>
        </member>
        <member name="M:Nequeo.Threading.AsyncOperationResult`1.RunTaskResult(System.Func{`0})">
            <summary>
            Run a task, where the action delegate method implements the 'async' and 'await' keywords.
            </summary>
            <param name="action">The method to execute on the instance type.</param>
            <returns>The task result.</returns>
        </member>
        <member name="M:Nequeo.Threading.AsyncOperationResult`1.RunTaskResult``1(``0,System.Action{``0})">
            <summary>
            Run a task, where the action delegate method implements the 'async' and 'await' keywords.
            </summary>
            <typeparam name="I">The instance of the type I.</typeparam>
            <param name="instance">The instnce of the type.</param>
            <param name="action">The method to execute on the instance type.</param>
            <returns>The task result.</returns>
        </member>
        <member name="M:Nequeo.Threading.AsyncOperationResult`1.RunTaskResult``1(``0,System.Func{``0,`0})">
            <summary>
            Run a task, where the action delegate method implements the 'async' and 'await' keywords.
            </summary>
            <typeparam name="I">The instance of the type I.</typeparam>
            <param name="instance">The instnce of the type.</param>
            <param name="action">The method to execute on the instance type.</param>
            <returns>The task result.</returns>
        </member>
        <member name="M:Nequeo.Threading.AsyncOperationResult`1.Start(System.Func{`0})">
            <summary>
            Start a task, where the action delegate method implements the 'async' and 'await' keywords.
            </summary>
            <param name="action">The method to execute on the instance type.</param>
            <returns>The task result.</returns>
        </member>
        <member name="M:Nequeo.Threading.AsyncOperationResult`1.Start(System.Func{System.Object,`0},System.Object)">
            <summary>
            Start a task, where the action delegate method implements the 'async' and 'await' keywords.
            </summary>
            <param name="action">The method to execute on the instance type.</param>
            <param name="state">The state object to pass.</param>
            <returns>The task result.</returns>
        </member>
        <member name="T:Nequeo.Threading.AsyncExecutionHandler`1">
            <summary>
            The asynchronous execution handler class.
            </summary>
            <typeparam name="T">The type that to execute asynchronously</typeparam>
        </member>
        <member name="M:Nequeo.Threading.AsyncExecutionHandler`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.AsyncExecutionHandler`1.#ctor(`0)">
            <summary>
            Default constructor.
            </summary>
            <param name="instance">The instance of the current type.</param>
        </member>
        <member name="E:Nequeo.Threading.AsyncExecutionHandler`1.AsyncError">
            <summary>
            Async error event handler
            </summary>
        </member>
        <member name="E:Nequeo.Threading.AsyncExecutionHandler`1.AsyncComplete">
            <summary>
            Async complete event handler, with result and unique execution name
            </summary>
        </member>
        <member name="P:Nequeo.Threading.AsyncExecutionHandler`1.Instance">
            <summary>
            Gets the current type instance.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.AsyncExecutionHandler`1.ExecuteAsync(`0,System.Action{`0},System.String,System.Action{Nequeo.Threading.AsyncOperationResult{System.Boolean}},System.Object)">
            <summary>
            Execute the asynchronous action for the channel.
            </summary>
            <param name="instance">The instance of the type T.</param>
            <param name="action">The action handler</param>
            <param name="actionName">The unique action name; passed to the object sender of the AsyncExecuteComplete handler.</param>
            <param name="callback">The callback action handler.</param>
            <param name="state">The action state.</param>
        </member>
        <member name="M:Nequeo.Threading.AsyncExecutionHandler`1.ExecuteAsync``1(`0,System.Func{`0,``0},System.String,System.Action{Nequeo.Threading.AsyncOperationResult{``0}},System.Object)">
            <summary>
            Execute the asynchronous action for the channel.
            </summary>
            <typeparam name="TResult">The action result type.</typeparam>
            <param name="instance">The instance of the type T.</param>
            <param name="action">The action handler</param>
            <param name="actionName">The unique action name; passed to the object sender of the AsyncExecuteComplete handler.</param>
            <param name="callback">The callback action handler.</param>
            <param name="state">The action state.</param>
        </member>
        <member name="M:Nequeo.Threading.AsyncExecutionHandler`1.InitiliseAsyncInstance(`0)">
            <summary>
            Initilise Async Instance
            </summary>
            <param name="instance">The type instance.</param>
        </member>
        <member name="M:Nequeo.Threading.AsyncExecutionHandler`1.Execute(System.Action{`0})">
            <summary>
            Execute the asynchronous action for the channel.
            </summary>
            <param name="action">The action handler</param>
        </member>
        <member name="M:Nequeo.Threading.AsyncExecutionHandler`1.Execute(System.Action{`0},System.String)">
            <summary>
            Execute the asynchronous action.
            </summary>
            <param name="action">The action handler.</param>
            <param name="actionName">The unique action name.</param>
        </member>
        <member name="M:Nequeo.Threading.AsyncExecutionHandler`1.Execute(System.Action{`0},System.String,System.Action{Nequeo.Threading.AsyncOperationResult{System.Object}},System.Object)">
            <summary>
            Execute the asynchronous action.
            </summary>
            <param name="action">The action handler.</param>
            <param name="actionName">The unique action name.</param>
            <param name="callback">The callback action handler.</param>
            <param name="state">The action state.</param>
        </member>
        <member name="M:Nequeo.Threading.AsyncExecutionHandler`1.Execute``1(System.Func{`0,``0})">
            <summary>
            Execute the asynchronous action for the channel.
            </summary>
            <typeparam name="TResult">The action result type.</typeparam>
            <param name="action">The action handler</param>
        </member>
        <member name="M:Nequeo.Threading.AsyncExecutionHandler`1.Execute``1(System.Func{`0,``0},System.String)">
            <summary>
            Execute the asynchronous action.
            </summary>
            <typeparam name="TResult">The result type</typeparam>
            <param name="action">The action handler.</param>
            <param name="actionName">The unique action name.</param>
        </member>
        <member name="M:Nequeo.Threading.AsyncExecutionHandler`1.Execute``1(System.Func{`0,``0},System.String,System.Action{Nequeo.Threading.AsyncOperationResult{System.Object}},System.Object)">
            <summary>
            Execute the asynchronous action.
            </summary>
            <typeparam name="TResult">The result type</typeparam>
            <param name="action">The action handler.</param>
            <param name="actionName">The unique action name.</param>
            <param name="callback">The callback action handler.</param>
            <param name="state">The action state.</param>
        </member>
        <member name="M:Nequeo.Threading.AsyncExecutionHandler`1.AsyncHandler_AsyncExecuteComplete(System.Object,System.Object,System.Boolean,System.Exception)">
            <summary>
            Asynchronous Execution Complete
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e1">The unique async name reference.</param>
            <param name="e2">The operation result.</param>
            <param name="e3">The current async exception.</param>
        </member>
        <member name="T:Nequeo.Threading.AsyncExecution`1">
            <summary>
            Asynchronous execution type handler.
            </summary>
            <typeparam name="T">The type that to execute asynchronously</typeparam>
        </member>
        <member name="M:Nequeo.Threading.AsyncExecution`1.#ctor(`0)">
            <summary>
            Defualt constructor.
            </summary>
            <param name="instance">The instance of the current type.</param>
        </member>
        <member name="E:Nequeo.Threading.AsyncExecution`1.AsyncExecuteComplete">
            <summary>
            The async execute complete event.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.AsyncExecution`1.Instance">
            <summary>
            Gets the current type instance.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.AsyncExecution`1.Exception">
            <summary>
            Get most recent exception.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.AsyncExecution`1.GetExecuteAsyncException(System.Object)">
            <summary>
            Get the execution exception.
            </summary>
            <param name="actionName">The unique action name; passed to the object sender of the AsyncExecuteComplete handler.</param>
            <returns>The exception of the execution; else null.</returns>
        </member>
        <member name="M:Nequeo.Threading.AsyncExecution`1.GetExecuteAsyncExceptionResult(System.Object)">
            <summary>
            Get the execution exception result.
            </summary>
            <param name="actionName">The unique action name; passed to the object sender of the AsyncExecuteComplete handler.</param>
            <returns>True is an exceptionhas occurred in the action; else false.</returns>
        </member>
        <member name="M:Nequeo.Threading.AsyncExecution`1.GetExecuteAsyncResult``1(System.Object)">
            <summary>
            Get the result of the async execution.
            </summary>
            <typeparam name="TResult">The result type</typeparam>
            <param name="actionName">The unique action name; passed to the object sender of the AsyncExecuteComplete handler.</param>
            <returns>The result type.</returns>
        </member>
        <member name="M:Nequeo.Threading.AsyncExecution`1.Execute(System.Action{`0})">
            <summary>
            Execute the asynchronous action for the channel.
            </summary>
            <param name="channelAction">The action handler</param>
        </member>
        <member name="M:Nequeo.Threading.AsyncExecution`1.ExecuteInternal(System.Action{`0},System.Object,System.Action{Nequeo.Threading.AsyncOperationResult{System.Boolean}},System.Object)">
            <summary>
            Execute the asynchronous action for the channel.
            </summary>
            <param name="channelAction">The action handler</param>
            <param name="actionName">The unique action name; passed to the object sender of the AsyncExecuteComplete handler.</param>
            <param name="callback">The callback action handler.</param>
            <param name="state">The action state.</param>
        </member>
        <member name="M:Nequeo.Threading.AsyncExecution`1.Execute(System.Action{`0},System.Object,System.Action{Nequeo.Threading.AsyncOperationResult{System.Object}},System.Object)">
            <summary>
            Execute the asynchronous action for the channel.
            </summary>
            <param name="channelAction">The action handler</param>
            <param name="actionName">The unique action name; passed to the object sender of the AsyncExecuteComplete handler.</param>
            <param name="callback">The callback action handler.</param>
            <param name="state">The action state.</param>
        </member>
        <member name="M:Nequeo.Threading.AsyncExecution`1.Execute``1(System.Func{`0,``0})">
            <summary>
            Execute the asynchronous action for the channel.
            </summary>
            <typeparam name="TResult">The action result type.</typeparam>
            <param name="channelAction">The action handler</param>
        </member>
        <member name="M:Nequeo.Threading.AsyncExecution`1.ExecuteInternal``1(System.Func{`0,``0},System.Object,System.Action{Nequeo.Threading.AsyncOperationResult{``0}},System.Object)">
            <summary>
            Execute the asynchronous action for the channel.
            </summary>
            <typeparam name="TResult">The action result type.</typeparam>
            <param name="channelAction">The action handler</param>
            <param name="actionName">The unique action name; passed to the object sender of the AsyncExecuteComplete handler.</param>
            <param name="callback">The callback action handler.</param>
            <param name="state">The action state.</param>
        </member>
        <member name="M:Nequeo.Threading.AsyncExecution`1.Execute``1(System.Func{`0,``0},System.Object,System.Action{Nequeo.Threading.AsyncOperationResult{System.Object}},System.Object)">
            <summary>
            Execute the asynchronous action for the channel.
            </summary>
            <typeparam name="TResult">The action result type.</typeparam>
            <param name="channelAction">The action handler</param>
            <param name="actionName">The unique action name; passed to the object sender of the AsyncExecuteComplete handler.</param>
            <param name="callback">The callback action handler.</param>
            <param name="state">The action state.</param>
        </member>
        <member name="T:Nequeo.Threading.AsyncClientExecute`2">
            <summary>
            Asyncronous client channel execute
            </summary>
            <typeparam name="T">The type to execute</typeparam>
            <typeparam name="TResult">The return type function handler</typeparam>
        </member>
        <member name="M:Nequeo.Threading.AsyncClientExecute`2.#ctor(System.Func{`0,`1},`0,System.AsyncCallback,System.Object)">
            <summary>
            Default async action handler
            </summary>
            <param name="channelAction">The action operation channel</param>
            <param name="instance">The current instance</param>
            <param name="callback">The call back handler</param>
            <param name="state">The state object</param>
        </member>
        <member name="M:Nequeo.Threading.AsyncClientExecute`2.#ctor(System.Action{`0},`0,System.AsyncCallback,System.Object)">
            <summary>
            Default async action handler
            </summary>
            <param name="channelAction">The action operation channel</param>
            <param name="instance">The current instance</param>
            <param name="callback">The call back handler</param>
            <param name="state">The state object</param>
        </member>
        <member name="M:Nequeo.Threading.AsyncClientExecute`2.BeginActionResult">
            <summary>
            Begin the async operation.
            </summary>
            <returns>The async result.</returns>
        </member>
        <member name="M:Nequeo.Threading.AsyncClientExecute`2.EndActionResult(System.IAsyncResult)">
            <summary>
            End the async operation.
            </summary>
            <param name="ar">The async result</param>
            <returns>The result type.</returns>
        </member>
        <member name="M:Nequeo.Threading.AsyncClientExecute`2.BeginActionNoResult">
            <summary>
            Begin async action
            </summary>
            <returns>The async result</returns>
        </member>
        <member name="M:Nequeo.Threading.AsyncClientExecute`2.EndActionNoResult(System.IAsyncResult)">
            <summary>
            End async action
            </summary>
            <param name="ar">The async result</param>
        </member>
        <member name="M:Nequeo.Threading.AsyncClientExecute`2.GetCurrentError">
            <summary>
            Gets the current error if any.
            </summary>
            <returns>The current exception if any.</returns>
        </member>
        <member name="M:Nequeo.Threading.AsyncClientExecute`2.FuncAsyncActionResult">
            <summary>
            Execute the asyn result.
            </summary>
            <returns>The result type to return.</returns>
        </member>
        <member name="M:Nequeo.Threading.AsyncClientExecute`2.FuncAsyncActionNoResult">
            <summary>
            Execute the asyn result.
            </summary>
        </member>
        <member name="T:Nequeo.Threading.FunctionHandler`1">
            <summary>
            Encapsulates a method that has no parameters and returns a value of the type specified by the TResult parameter.
            </summary>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Nequeo.Threading.FunctionHandler`2">
            <summary>
            Encapsulates a method that has one parameter and returns a value of the type specified by the TResult parameter.
            </summary>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <param name="parameter1">The first parameter of the method that this delegate encapsulates.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Nequeo.Threading.FunctionHandler`3">
            <summary>
            Encapsulates a method that has two parameters and returns a value of the type specified by the TResult parameter.
            </summary>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <param name="parameter1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="parameter2">The second parameter of the method that this delegate encapsulates.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Nequeo.Threading.FunctionHandler`4">
            <summary>
            Encapsulates a method that has three parameters and returns a value of the type specified by the TResult parameter.
            </summary>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <param name="parameter1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="parameter2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="parameter3">The third parameter of the method that this delegate encapsulates.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Nequeo.Threading.FunctionHandler`5">
            <summary>
            Encapsulates a method that has four parameters and returns a value of the type specified by the TResult parameter.
            </summary>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="parameter1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="parameter2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="parameter3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="parameter4">The fourth parameter of the method that this delegate encapsulates.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Nequeo.Threading.FunctionHandler`6">
            <summary>
            Encapsulates a method that has five parameters and returns a value of the type specified by the TResult parameter.
            </summary>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="parameter1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="parameter2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="parameter3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="parameter4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter5">The fifth parameter of the method that this delegate encapsulates.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Nequeo.Threading.FunctionHandler`7">
            <summary>
            Encapsulates a method that has six parameters and returns a value of the type specified by the TResult parameter.
            </summary>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="parameter1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="parameter2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="parameter3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="parameter4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter6">The sixth parameter of the method that this delegate encapsulates.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Nequeo.Threading.FunctionHandler`8">
            <summary>
            Encapsulates a method that has seven parameters and returns a value of the type specified by the TResult parameter.
            </summary>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <param name="parameter1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="parameter2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="parameter3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="parameter4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter7">The seventh parameter of the method that this delegate encapsulates.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Nequeo.Threading.FunctionHandler`9">
            <summary>
            Encapsulates a method that has eight parameters and returns a value of the type specified by the TResult parameter.
            </summary>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="parameter1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="parameter2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="parameter3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="parameter4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter7">The seventh parameter of the method that this delegate encapsulates.</param>
            <param name="parameter8">The eighth parameter of the method that this delegate encapsulates.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Nequeo.Threading.FunctionHandler`10">
            <summary>
            Encapsulates a method that has eight parameters and returns a value of the type specified by the TResult parameter.
            </summary>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the nineth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="parameter1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="parameter2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="parameter3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="parameter4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter7">The seventh parameter of the method that this delegate encapsulates.</param>
            <param name="parameter8">The eighth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter9">The nineth parameter of the method that this delegate encapsulates.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Nequeo.Threading.FunctionHandler`11">
            <summary>
            Encapsulates a method that has eight parameters and returns a value of the type specified by the TResult parameter.
            </summary>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the nineth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="parameter1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="parameter2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="parameter3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="parameter4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter7">The seventh parameter of the method that this delegate encapsulates.</param>
            <param name="parameter8">The eighth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter9">The nineth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter10">The tenth parameter of the method that this delegate encapsulates.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Nequeo.Threading.ActionHandler">
            <summary>
            Encapsulates a method that takes no parameters and does not return a value.
            </summary>
        </member>
        <member name="T:Nequeo.Threading.ActionHandler`1">
            <summary>
            Encapsulates a method that has one parameter and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <param name="parameter1">The first parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:Nequeo.Threading.ActionHandler`2">
            <summary>
            Encapsulates a method that has two parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <param name="parameter1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="parameter2">The second parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:Nequeo.Threading.ActionHandler`3">
            <summary>
            Encapsulates a method that has three parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <param name="parameter1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="parameter2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="parameter3">The third parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:Nequeo.Threading.ActionHandler`4">
            <summary>
            Encapsulates a method that has four parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="parameter1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="parameter2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="parameter3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="parameter4">The fourth parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:Nequeo.Threading.ActionHandler`5">
            <summary>
            Encapsulates a method that has five parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="parameter1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="parameter2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="parameter3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="parameter4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter5">The fifth parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:Nequeo.Threading.ActionHandler`6">
            <summary>
            Encapsulates a method that has six parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="parameter1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="parameter2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="parameter3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="parameter4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter6">The sixth parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:Nequeo.Threading.ActionHandler`7">
            <summary>
            Encapsulates a method that has seven parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <param name="parameter1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="parameter2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="parameter3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="parameter4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter7">The seventh parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:Nequeo.Threading.ActionHandler`8">
            <summary>
            Encapsulates a method that has eight parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="parameter1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="parameter2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="parameter3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="parameter4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter7">The seventh parameter of the method that this delegate encapsulates.</param>
            <param name="parameter8">The eighth parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:Nequeo.Threading.ActionHandler`9">
            <summary>
            Encapsulates a method that has eight parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the nineth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="parameter1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="parameter2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="parameter3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="parameter4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter7">The seventh parameter of the method that this delegate encapsulates.</param>
            <param name="parameter8">The eighth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter9">The nineth parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:Nequeo.Threading.ActionHandler`10">
            <summary>
            Encapsulates a method that has eight parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the nineth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="parameter1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="parameter2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="parameter3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="parameter4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter7">The seventh parameter of the method that this delegate encapsulates.</param>
            <param name="parameter8">The eighth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter9">The nineth parameter of the method that this delegate encapsulates.</param>
            <param name="parameter10">The tenth parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:Nequeo.Threading.EventHandler">
            <summary>
            Encapsulates a method that has no event parameters.
            </summary>
            <param name="sender">The object that has sent the message.</param>
        </member>
        <member name="T:Nequeo.Threading.EventHandler`1">
            <summary>
            Encapsulates a method that has one event parameter.
            </summary>
            <typeparam name="T1">The type of the first event argument parameter of the method that this delegate encapsulates.</typeparam>
            <param name="sender">The object that has sent the message.</param>
            <param name="e1">The first event argument parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:Nequeo.Threading.EventHandler`2">
            <summary>
            Encapsulates a method that has two event parameters.
            </summary>
            <typeparam name="T1">The type of the first event argument parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second event argument parameter of the method that this delegate encapsulates.</typeparam>
            <param name="sender">The object that has sent the message.</param>
            <param name="e1">The first event argument parameter of the method that this delegate encapsulates.</param>
            <param name="e2">The second event argument parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:Nequeo.Threading.EventHandler`3">
            <summary>
            Encapsulates a method that has three event parameters.
            </summary>
            <typeparam name="T1">The type of the first event argument parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second event argument parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third event argument parameter of the method that this delegate encapsulates.</typeparam>
            <param name="sender">The object that has sent the message.</param>
            <param name="e1">The first event argument parameter of the method that this delegate encapsulates.</param>
            <param name="e2">The second event argument parameter of the method that this delegate encapsulates.</param>
            <param name="e3">The third event argument parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:Nequeo.Threading.EventHandler`4">
            <summary>
            Encapsulates a method that has four event parameters.
            </summary>
            <typeparam name="T1">The type of the first event argument parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second event argument parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third event argument parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth event argument parameter of the method that this delegate encapsulates.</typeparam>
            <param name="sender">The object that has sent the message.</param>
            <param name="e1">The first event argument parameter of the method that this delegate encapsulates.</param>
            <param name="e2">The second event argument parameter of the method that this delegate encapsulates.</param>
            <param name="e3">The third event argument parameter of the method that this delegate encapsulates.</param>
            <param name="e4">The fourth event argument parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:Nequeo.Threading.EventHandler`5">
            <summary>
            Encapsulates a method that has five event parameters.
            </summary>
            <typeparam name="T1">The type of the first event argument parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second event argument parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third event argument parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth event argument parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth event argument parameter of the method that this delegate encapsulates.</typeparam>
            <param name="sender">The object that has sent the message.</param>
            <param name="e1">The first event argument parameter of the method that this delegate encapsulates.</param>
            <param name="e2">The second event argument parameter of the method that this delegate encapsulates.</param>
            <param name="e3">The third event argument parameter of the method that this delegate encapsulates.</param>
            <param name="e4">The fourth event argument parameter of the method that this delegate encapsulates.</param>
            <param name="e5">The fifth event argument parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:Nequeo.Threading.AsyncResult">
            <summary>
            A generic base class for IAsyncResult implementations.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.AsyncResult.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Constructor for the class.
            </summary>
            <param name="callback">The method reference when the operation completes.</param>
            <param name="state">The object containing the custom state.</param>
        </member>
        <member name="P:Nequeo.Threading.AsyncResult.AsyncState">
            <summary>
            Get the object containing the custom state.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.AsyncResult.Callback">
            <summary>
            Get the async callback.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.AsyncResult.AsyncWaitHandle">
            <summary>
            Get the current thread wait handler.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.AsyncResult.CompletedSynchronously">
            <summary>
            Get the completed synchronously indicator.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.AsyncResult.IsCompleted">
            <summary>
            Get the is operation complete indicator.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.AsyncResult.ThisLock">
            <summary>
            Get the current object create.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.AsyncResult.Complete(System.Boolean)">
            <summary>
            Sets the completed synchronously value, Indicates that
            the operation has completed or not.
            </summary>
            <param name="completedSynchronously">Has the operation completed.</param>
            <remarks>Call this version of complete when your asynchronous 
            operation is complete.  This will update the state
            of the operation and notify the callback.</remarks>
            <exception cref="T:System.InvalidOperationException">Cannot call complete twice.</exception>
        </member>
        <member name="M:Nequeo.Threading.AsyncResult.Complete(System.Boolean,System.Exception)">
            <summary>
            Sets the completed synchronously value, Indicates that
            the operation has completed or not.
            </summary>
            <param name="completedSynchronously">Has the operation completed.</param>
            <param name="exception">The exception the has occured.</param>
            <remarks>Call this version of complete if you raise an 
            exception during processing.  In addition to notifying
            the callback, it will capture the exception and store 
            it to be thrown during AsyncResult.End.</remarks>
        </member>
        <member name="M:Nequeo.Threading.AsyncResult.End``1(System.IAsyncResult)">
            <summary>
            End the asynchronous result operation.
            </summary>
            <typeparam name="TAsyncResult">A strongly typed AsynchronousResult.</typeparam>
            <param name="result">The status of the asynchronous operation.</param>
            <returns>A strongly typed AsynchronousResult.</returns>
            <remarks>End should be called when the End function for the 
            asynchronous operation is complete. It ensures the asynchronous 
            operation is complete, and does some common validation.</remarks>
            <exception cref="T:System.ArgumentNullException">IAsyncResult is null.</exception>
            <exception cref="T:System.ArgumentException">Invalid async result.</exception>
            <exception cref="T:System.InvalidOperationException">Async object already ended.</exception>
        </member>
        <member name="F:Nequeo.Threading.AsyncResult.disposed">
            <summary>
            Track whether Dispose has been called.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.AsyncResult.Dispose">
            <summary>
            Implement IDisposable.
            Do not make this method virtual.
            A derived class should not be able to override this method.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.AsyncResult.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.AsyncResult.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="T:Nequeo.Threading.AsynchronousResult`1">
            <summary>
            A strongly typed asynchronous result.
            </summary>
            <typeparam name="T">The type of data that is to be returned.</typeparam>
        </member>
        <member name="M:Nequeo.Threading.AsynchronousResult`1.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Constructor for the class.
            </summary>
            <param name="callback">The method reference when the operation completes.</param>
            <param name="state">The object containing the custom state.</param>
        </member>
        <member name="P:Nequeo.Threading.AsynchronousResult`1.Data">
            <summary>
            The data returned after execution has
            completed.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.AsynchronousResult`1.Complete(`0,System.Boolean)">
            <summary>
            Sets the completion status of the operation.
            </summary>
            <param name="data">The type containing the data to return.</param>
            <param name="completedSynchronously">Has the operation completed.</param>
        </member>
        <member name="M:Nequeo.Threading.AsynchronousResult`1.End(System.IAsyncResult)">
            <summary>
            Ends the operation and returns the data.
            </summary>
            <param name="result">The current asynchronous result.</param>
            <returns>The data type of the result.</returns>
        </member>
        <member name="T:Nequeo.Threading.WorkItem">
            <summary>
            The thread item object.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.WorkItem.#ctor(System.Threading.WaitCallback,System.Object,System.Threading.ExecutionContext)">
            <summary>
            Default constructor
            </summary>
            <param name="waitCallback">The wait callback delegate.</param>
            <param name="state">The state object.</param>
            <param name="executionContext">The current execution context.</param>
        </member>
        <member name="P:Nequeo.Threading.WorkItem.Callback">
            <summary>
            Gets, the wait callback delegate.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.WorkItem.State">
            <summary>
            Gets, the state object.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.WorkItem.Context">
            <summary>
            Gets, the current execution context.
            </summary>
        </member>
        <member name="T:Nequeo.Threading.WorkItemExtended">
            <summary>
            The thread item object.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.WorkItemExtended.#ctor(System.Threading.WaitCallback,Nequeo.Threading.WorkItemExtendedState,System.Threading.ExecutionContext)">
            <summary>
            Default constructor
            </summary>
            <param name="waitCallback">The wait callback delegate.</param>
            <param name="state">The state object.</param>
            <param name="executionContext">The current execution context.</param>
        </member>
        <member name="P:Nequeo.Threading.WorkItemExtended.Callback">
            <summary>
            Gets, the wait callback delegate.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.WorkItemExtended.State">
            <summary>
            Gets, the state object.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.WorkItemExtended.Context">
            <summary>
            Gets, the current execution context.
            </summary>
        </member>
        <member name="T:Nequeo.Threading.WorkItemExtendedState">
            <summary>
            The work item state extended object.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.WorkItemExtendedState.State">
            <summary>
            Gets sets, the state object.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.WorkItemExtendedState.WorkItem">
            <summary>
            Gets, the current work item.
            </summary>
        </member>
        <member name="T:Nequeo.Threading.WorkItemStatus">
            <summary>
            Thread work item status.
            </summary>
        </member>
        <member name="F:Nequeo.Threading.WorkItemStatus.Completed">
            <summary>
            Completed thread status.
            </summary>
        </member>
        <member name="F:Nequeo.Threading.WorkItemStatus.Queued">
            <summary>
            Queued thread status.
            </summary>
        </member>
        <member name="F:Nequeo.Threading.WorkItemStatus.Executing">
            <summary>
            Executing thread status.
            </summary>
        </member>
        <member name="F:Nequeo.Threading.WorkItemStatus.Aborted">
            <summary>
            Aborted thread status.
            </summary>
        </member>
        <member name="T:Nequeo.Threading.ThreadPoolContext">
            <summary>
            Abortable thread pool.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.ThreadPoolContext.HandleItem(System.Object)">
            <summary>
            Handles the current thread work item.
            </summary>
            <param name="state">The state object.</param>
        </member>
        <member name="M:Nequeo.Threading.ThreadPoolContext.QueueUserWorkItem(System.Threading.WaitCallback)">
            <summary>
            Queues a method for execution. The method executes when a thread pool thread
            becomes available.
            </summary>
            <param name="callback">A System.Threading.WaitCallback that represents the method to be executed.</param>
            <returns>The current work item.</returns>
        </member>
        <member name="M:Nequeo.Threading.ThreadPoolContext.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
            <summary>
            Queues a method for execution. The method executes when a thread pool thread
            becomes available.
            </summary>
            <param name="callback">A System.Threading.WaitCallback that represents the method to be executed.</param>
            <param name="state">An object containing data to be used by the method.</param>
            <returns>The current work item.</returns>
        </member>
        <member name="M:Nequeo.Threading.ThreadPoolContext.IsWorkItemInThreads(Nequeo.Threading.WorkItem)">
            <summary>
            Is the work item a member of the thread collection.
            </summary>
            <param name="item">The work item to test.</param>
            <returns>True if the work items is in the collection else false.</returns>
        </member>
        <member name="M:Nequeo.Threading.ThreadPoolContext.Cancel(Nequeo.Threading.WorkItem,System.Boolean)">
            <summary>
            Cancel the current work item thread
            </summary>
            <param name="item">The work item to cancel.</param>
            <param name="allowAbort">Can the work item be aborted.</param>
            <returns>The work item status.</returns>
        </member>
        <member name="T:Nequeo.Threading.ThreadPoolContextExtended">
            <summary>
            Abortable thread pool.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.ThreadPoolContextExtended.HandleItem(System.Object)">
            <summary>
            Handles the current thread work item.
            </summary>
            <param name="state">The state object.</param>
        </member>
        <member name="M:Nequeo.Threading.ThreadPoolContextExtended.QueueUserWorkItem(System.Threading.WaitCallback,Nequeo.Threading.WorkItemExtendedState)">
            <summary>
            Queues a method for execution. The method executes when a thread pool thread
            becomes available.
            </summary>
            <param name="callback">A System.Threading.WaitCallback that represents the method to be executed.</param>
            <param name="state">An object containing data to be used by the method.</param>
            <returns>The current work item.</returns>
        </member>
        <member name="M:Nequeo.Threading.ThreadPoolContextExtended.IsWorkItemInThreads(Nequeo.Threading.WorkItemExtended)">
            <summary>
            Is the work item a member of the thread collection.
            </summary>
            <param name="item">The work item to test.</param>
            <returns>True if the work items is in the collection else false.</returns>
        </member>
        <member name="M:Nequeo.Threading.ThreadPoolContextExtended.Cancel(Nequeo.Threading.WorkItemExtended,System.Boolean)">
            <summary>
            Cancel the current work item thread
            </summary>
            <param name="item">The work item to cancel.</param>
            <param name="allowAbort">Can the work item be aborted.</param>
            <returns>The work item status.</returns>
        </member>
        <member name="T:Nequeo.Threading.Async.AsyncBarrier">
            <summary>Provides an asynchronous barrier.</summary>
        </member>
        <member name="F:Nequeo.Threading.Async.AsyncBarrier._participantCount">
            <summary>The number of participants in the barrier.</summary>
        </member>
        <member name="F:Nequeo.Threading.Async.AsyncBarrier._currentSignalTask">
            <summary>The task used to signal completion of the current round.</summary>
        </member>
        <member name="F:Nequeo.Threading.Async.AsyncBarrier._remainingParticipants">
            <summary>The number of participants remaining to arrive for this round.</summary>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncBarrier.#ctor(System.Int32)">
            <summary>Initializes the BarrierAsync with the specified number of participants.</summary>
            <param name="participantCount">The number of participants in the barrier.</param>
        </member>
        <member name="P:Nequeo.Threading.Async.AsyncBarrier.ParticipantCount">
            <summary>Gets the participant count.</summary>
        </member>
        <member name="P:Nequeo.Threading.Async.AsyncBarrier.RemainingCount">
            <summary>Gets the number of participants still not yet arrived in this round.</summary>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncBarrier.SignalAndWait">
            <summary>Signals that a participant has arrived.</summary>
            <returns>A Task that will be signaled when the current round completes.</returns>
        </member>
        <member name="T:Nequeo.Threading.Async.AsyncProducerConsumerCollection`1">
            <summary>Provides an asynchronous producer/consumer collection.</summary>
        </member>
        <member name="F:Nequeo.Threading.Async.AsyncProducerConsumerCollection`1._semaphore">
            <summary>Asynchronous semaphore used to keep track of asynchronous work.</summary>
        </member>
        <member name="F:Nequeo.Threading.Async.AsyncProducerConsumerCollection`1._collection">
            <summary>The data stored in the collection.</summary>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncProducerConsumerCollection`1.#ctor">
            <summary>Initializes the asynchronous producer/consumer collection to store data in a first-in-first-out (FIFO) order.</summary>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncProducerConsumerCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})">
            <summary>Initializes the asynchronous producer/consumer collection.</summary>
            <param name="collection">The underlying collection to use to store data.</param>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncProducerConsumerCollection`1.Add(`0)">
            <summary>Adds an element to the collection.</summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncProducerConsumerCollection`1.Take">
            <summary>Takes an element from the collection asynchronously.</summary>
            <returns>A Task that represents the element removed from the collection.</returns>
        </member>
        <member name="P:Nequeo.Threading.Async.AsyncProducerConsumerCollection`1.Count">
            <summary>Gets the number of elements in the collection.</summary>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncProducerConsumerCollection`1.Dispose">
            <summary>Disposes of the collection.</summary>
        </member>
        <member name="T:Nequeo.Threading.Async.AsyncReaderWriter">
            <summary>Provides for asynchronous exclusive and concurrent execution support.</summary>
        </member>
        <member name="F:Nequeo.Threading.Async.AsyncReaderWriter._lock">
            <summary>The lock that protects all shared state in this instance.</summary>
        </member>
        <member name="F:Nequeo.Threading.Async.AsyncReaderWriter._waitingConcurrent">
            <summary>The queue of concurrent readers waiting to execute.</summary>
        </member>
        <member name="F:Nequeo.Threading.Async.AsyncReaderWriter._waitingExclusive">
            <summary>The queue of exclusive writers waiting to execute.</summary>
        </member>
        <member name="F:Nequeo.Threading.Async.AsyncReaderWriter._currentConcurrent">
            <summary>The number of concurrent readers currently executing.</summary>
        </member>
        <member name="F:Nequeo.Threading.Async.AsyncReaderWriter._currentlyExclusive">
            <summary>The number of exclusive writers currently executing.</summary>
        </member>
        <member name="F:Nequeo.Threading.Async.AsyncReaderWriter._factory">
            <summary>The non-generic factory to use for task creation.</summary>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncReaderWriter.#ctor">
            <summary>Initializes the ReaderWriterAsync.</summary>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncReaderWriter.#ctor(System.Threading.Tasks.TaskFactory)">
            <summary>Initializes the ReaderWriterAsync with the specified TaskFactory for us in creating all tasks.</summary>
            <param name="factory">The TaskFactory to use to create all tasks.</param>
        </member>
        <member name="P:Nequeo.Threading.Async.AsyncReaderWriter.WaitingExclusive">
            <summary>Gets the number of exclusive operations currently queued.</summary>
        </member>
        <member name="P:Nequeo.Threading.Async.AsyncReaderWriter.WaitingConcurrent">
            <summary>Gets the number of concurrent operations currently queued.</summary>
        </member>
        <member name="P:Nequeo.Threading.Async.AsyncReaderWriter.CurrentConcurrent">
            <summary>Gets the number of concurrent operations currently executing.</summary>
        </member>
        <member name="P:Nequeo.Threading.Async.AsyncReaderWriter.CurrentlyExclusive">
            <summary>Gets whether an exclusive operation is currently executing.</summary>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncReaderWriter.QueueExclusiveWriter(System.Action)">
            <summary>Queues an exclusive writer action to the ReaderWriterAsync.</summary>
            <param name="action">The action to be executed exclusively.</param>
            <returns>A Task that represents the execution of the provided action.</returns>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncReaderWriter.QueueExclusiveWriter``1(System.Func{``0})">
            <summary>Queues an exclusive writer function to the ReaderWriterAsync.</summary>
            <param name="function">The function to be executed exclusively.</param>
            <returns>A Task that represents the execution of the provided function.</returns>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncReaderWriter.QueueConcurrentReader(System.Action)">
            <summary>Queues a concurrent reader action to the ReaderWriterAsync.</summary>
            <param name="action">The action to be executed concurrently.</param>
            <returns>A Task that represents the execution of the provided action.</returns>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncReaderWriter.QueueConcurrentReader``1(System.Func{``0})">
            <summary>Queues a concurrent reader function to the ReaderWriterAsync.</summary>
            <param name="function">The function to be executed concurrently.</param>
            <returns>A Task that represents the execution of the provided function.</returns>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncReaderWriter.RunExclusive_RequiresLock(System.Threading.Tasks.Task)">
            <summary>Starts the specified exclusive task.</summary>
            <param name="exclusive">The exclusive task to be started.</param>
            <remarks>This must only be executed while holding the instance's lock.</remarks>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncReaderWriter.RunConcurrent_RequiresLock(System.Threading.Tasks.Task)">
            <summary>Starts the specified concurrent task.</summary>
            <param name="concurrent">The exclusive task to be started.</param>
            <remarks>This must only be executed while holding the instance's lock.</remarks>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncReaderWriter.RunConcurrent_RequiresLock">
            <summary>Starts all queued concurrent tasks.</summary>
            <remarks>This must only be executed while holding the instance's lock.</remarks>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncReaderWriter.FinishConcurrentReader">
            <summary>Completes the processing of a concurrent reader.</summary>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncReaderWriter.FinishExclusiveWriter">
            <summary>Completes the processing of an exclusive writer.</summary>
        </member>
        <member name="T:Nequeo.Threading.Async.AsyncSemaphore">
            <summary>Provides an asynchronous semaphore.</summary>
        </member>
        <member name="F:Nequeo.Threading.Async.AsyncSemaphore._currentCount">
            <summary>The current count.</summary>
        </member>
        <member name="F:Nequeo.Threading.Async.AsyncSemaphore._maxCount">
            <summary>The maximum count. If _maxCount isn't positive, the instance has been disposed.</summary>
        </member>
        <member name="F:Nequeo.Threading.Async.AsyncSemaphore._waitingTasks">
            <summary>Tasks waiting to be completed when the semaphore has count available.</summary>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncSemaphore.#ctor">
            <summary>Initializes the SemaphoreAsync with a count of zero and a maximum count of Int32.MaxValue.</summary>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncSemaphore.#ctor(System.Int32)">
            <summary>Initializes the SemaphoreAsync with the specified count and a maximum count of Int32.MaxValue.</summary>
            <param name="initialCount">The initial count to use as the current count.</param>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncSemaphore.#ctor(System.Int32,System.Int32)">
            <summary>Initializes the SemaphoreAsync with the specified counts.</summary>
            <param name="initialCount">The initial count to use as the current count.</param>
            <param name="maxCount">The maximum count allowed.</param>
        </member>
        <member name="P:Nequeo.Threading.Async.AsyncSemaphore.CurrentCount">
            <summary>Gets the current count.</summary>
        </member>
        <member name="P:Nequeo.Threading.Async.AsyncSemaphore.MaximumCount">
            <summary>Gets the maximum count.</summary>
        </member>
        <member name="P:Nequeo.Threading.Async.AsyncSemaphore.WaitingCount">
            <summary>Gets the number of operations currently waiting on the semaphore.</summary>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncSemaphore.Wait">
            <summary>Waits for a unit to be available in the semaphore.</summary>
            <returns>A Task that will be completed when a unit is available and this Wait operation succeeds.</returns>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncSemaphore.Queue(System.Action)">
            <summary>
            Queues an action that will be executed when space is available
            in the semaphore.
            </summary>
            <param name="action">The action to be executed.</param>
            <returns>
            A Task that represents the execution of the action.
            </returns>
            <remarks>
            Release does not need to be called for this action, as it will be handled implicitly
            by the Queue method.
            </remarks>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncSemaphore.Queue``1(System.Func{``0})">
            <summary>
            Queues a function that will be executed when space is available
            in the semaphore.
            </summary>
            <param name="function">The function to be executed.</param>
            <returns>
            A Task that represents the execution of the function.
            </returns>
            <remarks>
            Release does not need to be called for this function, as it will be handled implicitly
            by the Queue method.
            </remarks>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncSemaphore.Release">
            <summary>Releases a unit of work to the semaphore.</summary>
        </member>
        <member name="M:Nequeo.Threading.Async.AsyncSemaphore.Dispose">
            <summary>Releases the resources used by the semaphore.</summary>
        </member>
        <member name="T:Nequeo.Threading.UISynchronizeInvoke">
            <summary>
            Provides a way to synchronously or asynchronously execute a delegate for User Interfaces (UI).
            </summary>
        </member>
        <member name="M:Nequeo.Threading.UISynchronizeInvoke.#ctor(System.ComponentModel.ISynchronizeInvoke)">
            <summary>
            Initialisation
            </summary>
            <param name="sync">The initialisation sync.</param>
        </member>
        <member name="M:Nequeo.Threading.UISynchronizeInvoke.Execute(System.Action)">
            <summary>
            Execute the action.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Nequeo.Threading.UISynchronizeInvoke.Execute(System.Action,System.Object[])">
            <summary>
            Execute the action.
            </summary>
            <param name="action">The action to perform.</param>
            <param name="arguments">An array of type System.Object that represents the arguments to pass to the given method. This can be null if no arguments are needed.</param>
        </member>
        <member name="M:Nequeo.Threading.UISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            Asynchronously executes the delegate on the thread that created this object.
            </summary>
            <param name="method">A System.Delegate to a method that takes parameters of the same number and type that are contained in args.</param>
            <param name="args">An array of type System.Object to pass as arguments to the given method. This can be null if no arguments are needed.</param>
            <returns>An System.IAsyncResult interface that represents the asynchronous operation started by calling this method.</returns>
        </member>
        <member name="M:Nequeo.Threading.UISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
            <summary>
            Waits until the process started by calling System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])
            completes, and then returns the value generated by the process.
            </summary>
            <param name="result">An System.IAsyncResult interface that represents the asynchronous operation
            started by calling System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[]).</param>
            <returns>An System.Object that represents the return value generated by the asynchronous operation.</returns>
        </member>
        <member name="M:Nequeo.Threading.UISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
            <summary>
            Synchronously executes the delegate on the thread that created this object
            and marshals the call to the creating thread.
            </summary>
            <param name="method">A System.Delegate that contains a method to call, in the context of the thread for the control.</param>
            <param name="arguments">An array of type System.Object that represents the arguments to pass to the given method. This can be null if no arguments are needed.</param>
            <returns>An System.Object that represents the return value from the delegate being invoked, or null if the delegate has no return value.</returns>
        </member>
        <member name="T:Nequeo.Threading.Common.EAPCommon">
            <summary>
            Common thread handler.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Common.EAPCommon.HandleCompletion``1(System.Threading.Tasks.TaskCompletionSource{``0},System.ComponentModel.AsyncCompletedEventArgs,System.Func{``0},System.Action)">
            <summary>
            Handler the completion of a task without interferrence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tcs"></param>
            <param name="e"></param>
            <param name="getResult"></param>
            <param name="unregisterHandler"></param>
        </member>
        <member name="T:Nequeo.Threading.Extension.CancellationTokenExtensions">
            <summary>
            Extension methods for CancellationToken.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Extension.CancellationTokenExtensions.CancelAndThrow(System.Threading.CancellationTokenSource)">
            <summary>Cancels a CancellationTokenSource and throws a corresponding OperationCanceledException.</summary>
            <param name="source">The source to be canceled.</param>
        </member>
        <member name="M:Nequeo.Threading.Extension.CancellationTokenExtensions.CreateLinkedSource(System.Threading.CancellationToken)">
            <summary>
            Creates a CancellationTokenSource that will be canceled when the specified token has cancellation requested.
            </summary>
            <param name="token">The token.</param>
            <returns>The created CancellationTokenSource.</returns>
        </member>
        <member name="T:Nequeo.Threading.Extension.DelegateExtensions">
            <summary>
            Parallel extensions for the Delegate class.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Extension.DelegateExtensions.ParallelDynamicInvoke(System.Delegate,System.Object[])">
            <summary>Dynamically invokes (late-bound) in parallel the methods represented by the delegate.</summary>
            <param name="multicastDelegate">The delegate to be invoked.</param>
            <param name="args">An array of objects that are the arguments to pass to the delegates.</param>
            <returns>The return value of one of the delegate invocations.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.DelegateExtensions.WithFailFast(System.Action)">
            <summary>
            Provides a delegate that runs the specified action and fails fast if the action throws an exception.
            </summary>
            <param name="action">The action to invoke.</param>
            <returns>The wrapper delegate.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.DelegateExtensions.WithFailFast``1(System.Func{``0})">
            <summary>
            Provides a delegate that runs the specified function and fails fast if the function throws an exception.
            </summary>
            <param name="function">The function to invoke.</param>
            <returns>The wrapper delegate.</returns>
        </member>
        <member name="T:Nequeo.Threading.Extension.LazyExtensions">
            <summary>
            Extension methods for Lazy.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Extension.LazyExtensions.Force``1(System.Lazy{``0})">
            <summary>Forces value creation of a Lazy instance.</summary>
            <typeparam name="T">Specifies the type of the value being lazily initialized.</typeparam>
            <param name="lazy">The Lazy instance.</param>
            <returns>The initialized Lazy instance.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.LazyExtensions.GetValueAsync``1(System.Lazy{``0})">
            <summary>Retrieves the value of a Lazy asynchronously.</summary>
            <typeparam name="T">Specifies the type of the value being lazily initialized.</typeparam>
            <param name="lazy">The Lazy instance.</param>
            <returns>A Task representing the Lazy's value.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.LazyExtensions.Create``1(``0)">
            <summary>Creates a Lazy that's already been initialized to a specified value.</summary>
            <typeparam name="T">The type of the data to be initialized.</typeparam>
            <param name="value">The value with which to initialize the Lazy instance.</param>
            <returns>The initialized Lazy.</returns>
        </member>
        <member name="T:Nequeo.Threading.Extension.ParallelOptionsExtensions">
            <summary>Extension methods for ParallelOptions.</summary>
        </member>
        <member name="M:Nequeo.Threading.Extension.ParallelOptionsExtensions.ShallowClone(System.Threading.Tasks.ParallelOptions)">
            <summary>Copies a ParallelOptions instance to a shallow clone.</summary>
            <param name="options">The options to be cloned.</param>
            <returns>The shallow clone.</returns>
        </member>
        <member name="T:Nequeo.Threading.Extension.ReaderWriterLockSlimExtensions">
            <summary>
            Contains extension methods of <see cref="T:System.Threading.ReaderWriterLockSlim"/>.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Extension.ReaderWriterLockSlimExtensions.ReadAndWrite(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Starts thread safe read write code block.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.ReaderWriterLockSlimExtensions.Read(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Starts thread safe read code block.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.ReaderWriterLockSlimExtensions.Write(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Starts thread safe write code block.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:Nequeo.Threading.Extension.ReaderWriterLockSlimExtensions.DisposableCodeBlock">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Extension.ReaderWriterLockSlimExtensions.DisposableCodeBlock.#ctor(System.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Nequeo.Threading.Extension.ReaderWriterLockSlimExtensions.DisposableCodeBlock.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nequeo.Threading.Extension.TaskExtensions">
            <summary>
            Provides LINQ support for Tasks by implementing the primary standard query operators.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.Select``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.SelectMany``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.SelectMany``3(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,``1,``2})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCollection"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="collectionSelector"></param>
            <param name="resultSelector"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.Where``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.Boolean})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.Join``4(System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
            <summary>
            
            </summary>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.Join``4(System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            
            </summary>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.GroupJoin``4(System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Threading.Tasks.Task{``1},``3})">
            <summary>
            
            </summary>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.GroupJoin``4(System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Threading.Tasks.Task{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            
            </summary>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.GroupBy``3(System.Threading.Tasks.Task{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <returns></returns>
        </member>
        <member name="T:Nequeo.Threading.Extension.TaskExtensions.OneElementGrouping`2">
            <summary>Represents a grouping of one element.</summary>
            <typeparam name="TKey">The type of the key for the element.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.OrderBy``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.OrderByDescending``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.ThenBy``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.ThenByDescending``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.ContinueWith(System.Threading.Tasks.Task,System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskFactory)">
            <summary>Creates a continuation task using the specified TaskFactory.</summary>
            <param name="task">The antecedent Task.</param>
            <param name="continuationAction">The continuation action.</param>
            <param name="factory">The TaskFactory.</param>
            <returns>A continuation task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.ContinueWith``1(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskFactory)">
            <summary>Creates a continuation task using the specified TaskFactory.</summary>
            <param name="task">The antecedent Task.</param>
            <param name="continuationFunction">The continuation function.</param>
            <param name="factory">The TaskFactory.</param>
            <returns>A continuation task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.ContinueWith``1(System.Threading.Tasks.Task{``0},System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskFactory{``0})">
            <summary>Creates a continuation task using the specified TaskFactory.</summary>
            <param name="task">The antecedent Task.</param>
            <param name="continuationAction">The continuation action.</param>
            <param name="factory">The TaskFactory.</param>
            <returns>A continuation task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.ContinueWith``2(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskFactory{``0})">
            <summary>Creates a continuation task using the specified TaskFactory.</summary>
            <param name="task">The antecedent Task.</param>
            <param name="continuationFunction">The continuation function.</param>
            <param name="factory">The TaskFactory.</param>
            <returns>A continuation task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.ToAsync(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)">
            <summary>
            Creates a Task that represents the completion of another Task, and 
            that schedules an AsyncCallback to run upon completion.
            </summary>
            <param name="task">The antecedent Task.</param>
            <param name="callback">The AsyncCallback to run.</param>
            <param name="state">The object state to use with the AsyncCallback.</param>
            <returns>The new task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.ToAsync``1(System.Threading.Tasks.Task{``0},System.AsyncCallback,System.Object)">
            <summary>
            Creates a Task that represents the completion of another Task, and 
            that schedules an AsyncCallback to run upon completion.
            </summary>
            <param name="task">The antecedent Task.</param>
            <param name="callback">The AsyncCallback to run.</param>
            <param name="state">The object state to use with the AsyncCallback.</param>
            <returns>The new task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.IgnoreExceptions(System.Threading.Tasks.Task)">
            <summary>Suppresses default exception handling of a Task that would otherwise reraise the exception on the finalizer thread.</summary>
            <param name="task">The Task to be monitored.</param>
            <returns>The original Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.IgnoreExceptions``1(System.Threading.Tasks.Task{``0})">
            <summary>Suppresses default exception handling of a Task that would otherwise reraise the exception on the finalizer thread.</summary>
            <param name="task">The Task to be monitored.</param>
            <returns>The original Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.FailFastOnException(System.Threading.Tasks.Task)">
            <summary>Fails immediately when an exception is encountered.</summary>
            <param name="task">The Task to be monitored.</param>
            <returns>The original Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.FailFastOnException``1(System.Threading.Tasks.Task{``0})">
            <summary>Fails immediately when an exception is encountered.</summary>
            <param name="task">The Task to be monitored.</param>
            <returns>The original Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.PropagateExceptions(System.Threading.Tasks.Task)">
            <summary>Propagates any exceptions that occurred on the specified task.</summary>
            <param name="task">The Task whose exceptions are to be propagated.</param>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.PropagateExceptions(System.Threading.Tasks.Task[])">
            <summary>Propagates any exceptions that occurred on the specified tasks.</summary>
            <param name="tasks">The Tassk whose exceptions are to be propagated.</param>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.ToObservable``1(System.Threading.Tasks.Task{``0})">
            <summary>Creates an IObservable that represents the completion of a Task.</summary>
            <typeparam name="TResult">Specifies the type of data returned by the Task.</typeparam>
            <param name="task">The Task to be represented as an IObservable.</param>
            <returns>An IObservable that represents the completion of the Task.</returns>
        </member>
        <member name="T:Nequeo.Threading.Extension.TaskExtensions.TaskObservable`1">
            <summary>An implementation of IObservable that wraps a Task.</summary>
            <typeparam name="TResult">The type of data returned by the task.</typeparam>
        </member>
        <member name="T:Nequeo.Threading.Extension.TaskExtensions.CancelOnDispose">
            <summary>Translate a call to IDisposable.Dispose to a CancellationTokenSource.Cancel.</summary>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.WithTimeout(System.Threading.Tasks.Task,System.TimeSpan)">
            <summary>Creates a new Task that mirrors the supplied task but that will be canceled after the specified timeout.</summary>
            <param name="task">The task.</param>
            <param name="timeout">The timeout.</param>
            <returns>The new Task that may time out.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.WithTimeout``1(System.Threading.Tasks.Task{``0},System.TimeSpan)">
            <summary>Creates a new Task that mirrors the supplied task but that will be canceled after the specified timeout.</summary>
            <typeparam name="TResult">Specifies the type of data contained in the task.</typeparam>
            <param name="task">The task.</param>
            <param name="timeout">The timeout.</param>
            <returns>The new Task that may time out.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.AttachToParent(System.Threading.Tasks.Task)">
            <summary>
            Ensures that a parent task can't transition into a completed state
            until the specified task has also completed, even if it's not
            already a child task.
            </summary>
            <param name="task">The task to attach to the current task as a child.</param>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.WaitWithPumping(System.Threading.Tasks.Task)">
            <summary>Waits for the task to complete execution, pumping in the meantime.</summary>
            <param name="task">The task for which to wait.</param>
            <remarks>This method is intended for usage with Windows Presentation Foundation.</remarks>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskExtensions.WaitForCompletionStatus(System.Threading.Tasks.Task)">
            <summary>Waits for the task to complete execution, returning the task's final status.</summary>
            <param name="task">The task for which to wait.</param>
            <returns>The completion status of the task.</returns>
            <remarks>Unlike Wait, this method will not throw an exception if the task ends in the Faulted or Canceled state.</remarks>
        </member>
        <member name="T:Nequeo.Threading.Extension.TaskCompletionSourceExtensions">
            <summary>Extension methods for TaskCompletionSource.</summary>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskCompletionSourceExtensions.SetFromTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task)">
            <summary>Transfers the result of a Task to the TaskCompletionSource.</summary>
            <typeparam name="TResult">Specifies the type of the result.</typeparam>
            <param name="resultSetter">The TaskCompletionSource.</param>
            <param name="task">The task whose completion results should be transfered.</param>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskCompletionSourceExtensions.SetFromTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task{``0})">
            <summary>Transfers the result of a Task to the TaskCompletionSource.</summary>
            <typeparam name="TResult">Specifies the type of the result.</typeparam>
            <param name="resultSetter">The TaskCompletionSource.</param>
            <param name="task">The task whose completion results should be transfered.</param>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskCompletionSourceExtensions.TrySetFromTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task)">
            <summary>Attempts to transfer the result of a Task to the TaskCompletionSource.</summary>
            <typeparam name="TResult">Specifies the type of the result.</typeparam>
            <param name="resultSetter">The TaskCompletionSource.</param>
            <param name="task">The task whose completion results should be transfered.</param>
            <returns>Whether the transfer could be completed.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskCompletionSourceExtensions.TrySetFromTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task{``0})">
            <summary>Attempts to transfer the result of a Task to the TaskCompletionSource.</summary>
            <typeparam name="TResult">Specifies the type of the result.</typeparam>
            <param name="resultSetter">The TaskCompletionSource.</param>
            <param name="task">The task whose completion results should be transfered.</param>
            <returns>Whether the transfer could be completed.</returns>
        </member>
        <member name="T:Nequeo.Threading.Extension.TaskFactoryExtensions">
            <summary>Extensions for TaskFactory.</summary>
            <summary>Extensions for TaskFactory.</summary>
            <summary>Extensions for TaskFactory.</summary>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.ToGeneric``1(System.Threading.Tasks.TaskFactory)">
            <summary>Creates a generic TaskFactory from a non-generic one.</summary>
            <typeparam name="TResult">Specifies the type of Task results for the Tasks created by the new TaskFactory.</typeparam>
            <param name="factory">The TaskFactory to serve as a template.</param>
            <returns>The created TaskFactory.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.ToNonGeneric``1(System.Threading.Tasks.TaskFactory{``0})">
            <summary>Creates a generic TaskFactory from a non-generic one.</summary>
            <typeparam name="TResult">Specifies the type of Task results for the Tasks created by the new TaskFactory.</typeparam>
            <param name="factory">The TaskFactory to serve as a template.</param>
            <returns>The created TaskFactory.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.GetTargetScheduler(System.Threading.Tasks.TaskFactory)">
            <summary>Gets the TaskScheduler instance that should be used to schedule tasks.</summary>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.GetTargetScheduler``1(System.Threading.Tasks.TaskFactory{``0})">
            <summary>Gets the TaskScheduler instance that should be used to schedule tasks.</summary>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.ContinuationOptionsFromCreationOptions(System.Threading.Tasks.TaskCreationOptions)">
            <summary>Converts TaskCreationOptions into TaskContinuationOptions.</summary>
            <param name="creationOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.WhenAll(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task[])">
            <summary>
            Creates a continuation Task that will compplete upon
            the completion of a set of provided Tasks.
            </summary>
            <param name="factory">The TaskFactory to use to create the continuation task.</param>
            <param name="tasks">The array of tasks from which to continue.</param>
            <returns>A task that, when completed, will return the array of completed tasks.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.WhenAll``1(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{``0}[])">
            <summary>
            Creates a continuation Task that will compplete upon
            the completion of a set of provided Tasks.
            </summary>
            <param name="factory">The TaskFactory to use to create the continuation task.</param>
            <param name="tasks">The array of tasks from which to continue.</param>
            <returns>A task that, when completed, will return the array of completed tasks.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.WhenAny(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task[])">
            <summary>
            Creates a continuation Task that will complete upon
            the completion of any one of a set of provided Tasks.
            </summary>
            <param name="factory">The TaskFactory to use to create the continuation task.</param>
            <param name="tasks">The array of tasks from which to continue.</param>
            <returns>A task that, when completed, will return the completed task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.WhenAny``1(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{``0}[])">
            <summary>
            Creates a continuation Task that will complete upon
            the completion of any one of a set of provided Tasks.
            </summary>
            <param name="factory">The TaskFactory to use to create the continuation task.</param>
            <param name="tasks">The array of tasks from which to continue.</param>
            <returns>A task that, when completed, will return the completed task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.Create(System.Threading.Tasks.TaskFactory,System.Action)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="action">The delegate for the task.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.Create(System.Threading.Tasks.TaskFactory,System.Action,System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="action">The delegate for the task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.Create(System.Threading.Tasks.TaskFactory,System.Action{System.Object},System.Object)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="action">The delegate for the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.Create(System.Threading.Tasks.TaskFactory,System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="action">The delegate for the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.Create``1(System.Threading.Tasks.TaskFactory,System.Func{``0})">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="function">The delegate for the task.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.Create``1(System.Threading.Tasks.TaskFactory,System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="function">The delegate for the task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.Create``1(System.Threading.Tasks.TaskFactory,System.Func{System.Object,``0},System.Object)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="function">The delegate for the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.Create``1(System.Threading.Tasks.TaskFactory,System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="function">The delegate for the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.Create``1(System.Threading.Tasks.TaskFactory{``0},System.Func{``0})">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="function">The delegate for the task.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.Create``1(System.Threading.Tasks.TaskFactory{``0},System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="function">The delegate for the task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.Create``1(System.Threading.Tasks.TaskFactory{``0},System.Func{System.Object,``0},System.Object)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="function">The delegate for the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.Create``1(System.Threading.Tasks.TaskFactory{``0},System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="function">The delegate for the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32)">
            <summary>Creates a Task that will complete after the specified delay.</summary>
            <param name="factory">The TaskFactory.</param>
            <param name="millisecondsDelay">The delay after which the Task should transition to RanToCompletion.</param>
            <returns>A Task that will be completed after the specified duration.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Threading.CancellationToken)">
            <summary>Creates a Task that will complete after the specified delay.</summary>
            <param name="factory">The TaskFactory.</param>
            <param name="millisecondsDelay">The delay after which the Task should transition to RanToCompletion.</param>
            <param name="cancellationToken">The cancellation token that can be used to cancel the timed task.</param>
            <returns>A Task that will be completed after the specified duration and that's cancelable with the specified token.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Action)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="action">The delegate executed by the task.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Action,System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="action">The delegate executed by the task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Action,System.Threading.CancellationToken)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="action">The delegate executed by the task.</param>
            <param name="cancellationToken">The cancellation token to assign to the created Task.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="action">The delegate executed by the task.</param>
            <param name="cancellationToken">The cancellation token to assign to the created Task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <param name="scheduler">The scheduler to which the Task will be scheduled.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Action{System.Object},System.Object)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="action">The delegate executed by the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="action">The delegate executed by the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="action">The delegate executed by the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="cancellationToken">The cancellation token to assign to the created Task.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="action">The delegate executed by the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="cancellationToken">The cancellation token to assign to the created Task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <param name="scheduler">The scheduler to which the Task will be scheduled.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.StartNewDelayed``1(System.Threading.Tasks.TaskFactory{``0},System.Int32,System.Func{``0})">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="function">The delegate executed by the task.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.StartNewDelayed``1(System.Threading.Tasks.TaskFactory{``0},System.Int32,System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="function">The delegate executed by the task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.StartNewDelayed``1(System.Threading.Tasks.TaskFactory{``0},System.Int32,System.Func{``0},System.Threading.CancellationToken)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="function">The delegate executed by the task.</param>
            <param name="cancellationToken">The CancellationToken to assign to the Task.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.StartNewDelayed``1(System.Threading.Tasks.TaskFactory{``0},System.Int32,System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="function">The delegate executed by the task.</param>
            <param name="cancellationToken">The CancellationToken to assign to the Task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <param name="scheduler">The scheduler to which the Task will be scheduled.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.StartNewDelayed``1(System.Threading.Tasks.TaskFactory{``0},System.Int32,System.Func{System.Object,``0},System.Object)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="function">The delegate executed by the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.StartNewDelayed``1(System.Threading.Tasks.TaskFactory{``0},System.Int32,System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="function">The delegate executed by the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="cancellationToken">The CancellationToken to assign to the Task.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.StartNewDelayed``1(System.Threading.Tasks.TaskFactory{``0},System.Int32,System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="function">The delegate executed by the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.StartNewDelayed``1(System.Threading.Tasks.TaskFactory{``0},System.Int32,System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>Creates and schedules a task for execution after the specified time delay.</summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="function">The delegate executed by the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="cancellationToken">The CancellationToken to assign to the Task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <param name="scheduler">The scheduler to which the Task will be scheduled.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.FromException(System.Threading.Tasks.TaskFactory,System.Exception)">
            <summary>Creates a Task that has completed in the Faulted state with the specified exception.</summary>
            <param name="factory">The target TaskFactory.</param>
            <param name="exception">The exception with which the Task should fault.</param>
            <returns>The completed Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.FromException``1(System.Threading.Tasks.TaskFactory,System.Exception)">
            <summary>Creates a Task that has completed in the Faulted state with the specified exception.</summary>
            <typeparam name="TResult">Specifies the type of payload for the new Task.</typeparam>
            <param name="factory">The target TaskFactory.</param>
            <param name="exception">The exception with which the Task should fault.</param>
            <returns>The completed Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.FromResult``1(System.Threading.Tasks.TaskFactory,``0)">
            <summary>Creates a Task that has completed in the RanToCompletion state with the specified result.</summary>
            <typeparam name="TResult">Specifies the type of payload for the new Task.</typeparam>
            <param name="factory">The target TaskFactory.</param>
            <param name="result">The result with which the Task should complete.</param>
            <returns>The completed Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.FromException``1(System.Threading.Tasks.TaskFactory{``0},System.Exception)">
            <summary>Creates a Task that has completed in the Faulted state with the specified exception.</summary>
            <param name="factory">The target TaskFactory.</param>
            <param name="exception">The exception with which the Task should fault.</param>
            <returns>The completed Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.FromResult``1(System.Threading.Tasks.TaskFactory{``0},``0)">
            <summary>Creates a Task that has completed in the RanToCompletion state with the specified result.</summary>
            <typeparam name="TResult">Specifies the type of payload for the new Task.</typeparam>
            <param name="factory">The target TaskFactory.</param>
            <param name="result">The result with which the Task should complete.</param>
            <returns>The completed Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.FromAsync(System.Threading.Tasks.TaskFactory,System.Threading.WaitHandle)">
            <summary>Creates a Task that will be completed when the specified WaitHandle is signaled.</summary>
            <param name="factory">The target factory.</param>
            <param name="waitHandle">The WaitHandle.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Asynchronously iterates through an enumerable of tasks.</summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Object},System.Threading.CancellationToken)">
            <summary>Asynchronously iterates through an enumerable of tasks.</summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="cancellationToken">The cancellation token used to cancel the iteration.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Object},System.Threading.Tasks.TaskCreationOptions)">
            <summary>Asynchronously iterates through an enumerable of tasks.</summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Object},System.Threading.Tasks.TaskScheduler)">
            <summary>Asynchronously iterates through an enumerable of tasks.</summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="scheduler">The scheduler to which tasks will be scheduled.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Object},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>Asynchronously iterates through an enumerable of tasks.</summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="cancellationToken">The cancellation token used to cancel the iteration.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <param name="scheduler">The scheduler to which tasks will be scheduled.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Object},System.Object)">
            <summary>Asynchronously iterates through an enumerable of tasks.</summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="state">The asynchronous state for the returned Task.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Object},System.Object,System.Threading.CancellationToken)">
            <summary>Asynchronously iterates through an enumerable of tasks.</summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="state">The asynchronous state for the returned Task.</param>
            <param name="cancellationToken">The cancellation token used to cancel the iteration.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>Asynchronously iterates through an enumerable of tasks.</summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="state">The asynchronous state for the returned Task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
            <summary>Asynchronously iterates through an enumerable of tasks.</summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="state">The asynchronous state for the returned Task.</param>
            <param name="scheduler">The scheduler to which tasks will be scheduled.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>Asynchronously iterates through an enumerable of tasks.</summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="state">The asynchronous state for the returned Task.</param>
            <param name="cancellationToken">The cancellation token used to cancel the iteration.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <param name="scheduler">The scheduler to which tasks will be scheduled.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.TrackedSequence(System.Threading.Tasks.TaskFactory,System.Func{System.Threading.Tasks.Task}[])">
            <summary>Asynchronously executes a sequence of tasks, maintaining a list of all tasks processed.</summary>
            <param name="factory">The TaskFactory to use to create the task.</param>
            <param name="functions">
            The functions that generate the tasks through which to iterate sequentially.
            Iteration will cease if a task faults.
            </param>
            <returns>A Task that will return the list of tracked tasks iterated.</returns>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskFactoryExtensions.TrackedSequenceInternal(System.Collections.Generic.IEnumerable{System.Func{System.Threading.Tasks.Task}},System.Threading.Tasks.TaskCompletionSource{System.Collections.Generic.IList{System.Threading.Tasks.Task}})">
            <summary>Creates the enumerable to iterate through with Iterate.</summary>
            <param name="functions">
            The functions that generate the tasks through which to iterate sequentially.
            Iteration will cease if a task faults.
            </param>
            <param name="tcs">The TaskCompletionSource to resolve with the asynchronous results.</param>
            <returns>The enumerable through which to iterate.</returns>
        </member>
        <member name="T:Nequeo.Threading.Extension.TaskSchedulerExtensions">
            <summary>Extension methods for TaskScheduler.</summary>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskSchedulerExtensions.ToSynchronizationContext(System.Threading.Tasks.TaskScheduler)">
            <summary>Gets a SynchronizationContext that targets this TaskScheduler.</summary>
            <param name="scheduler">The target scheduler.</param>
            <returns>A SynchronizationContext that targets this scheduler.</returns>
        </member>
        <member name="T:Nequeo.Threading.Extension.TaskSchedulerExtensions.TaskSchedulerSynchronizationContext">
            <summary>Provides a SynchronizationContext wrapper for a TaskScheduler.</summary>
        </member>
        <member name="F:Nequeo.Threading.Extension.TaskSchedulerExtensions.TaskSchedulerSynchronizationContext._scheduler">
            <summary>The scheduler.</summary>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskSchedulerExtensions.TaskSchedulerSynchronizationContext.#ctor(System.Threading.Tasks.TaskScheduler)">
            <summary>Initializes the context with the specified scheduler.</summary>
            <param name="scheduler">The scheduler to target.</param>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskSchedulerExtensions.TaskSchedulerSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>Dispatches an asynchronous message to the synchronization context.</summary>
            <param name="d">The System.Threading.SendOrPostCallback delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:Nequeo.Threading.Extension.TaskSchedulerExtensions.TaskSchedulerSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>Dispatches a synchronous message to the synchronization context.</summary>
            <param name="d">The System.Threading.SendOrPostCallback delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="T:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms">
            <summary>
            Provides parallelized algorithms for common operations.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.Filter``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>Filters an input list, running a predicate over each element of the input.</summary>
            <typeparam name="T">Specifies the type of data in the list.</typeparam>
            <param name="input">The list to be filtered.</param>
            <param name="predicate">The predicate to use to determine which elements pass.</param>
            <returns>A new list containing all those elements from the input that passed the filter.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.Filter``1(System.Collections.Generic.IList{``0},System.Threading.Tasks.ParallelOptions,System.Func{``0,System.Boolean})">
            <summary>Filters an input list, running a predicate over each element of the input.</summary>
            <typeparam name="T">Specifies the type of data in the list.</typeparam>
            <param name="input">The list to be filtered.</param>
            <param name="parallelOptions">Options to use for the execution of this filter.</param>
            <param name="predicate">The predicate to use to determine which elements pass.</param>
            <returns>A new list containing all those elements from the input that passed the filter.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.For(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Action{System.Numerics.BigInteger})">
            <summary>Executes a for loop in which iterations may run in parallel.</summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.For(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Threading.Tasks.ParallelOptions,System.Action{System.Numerics.BigInteger})">
            <summary>Executes a for loop in which iterations may run in parallel.</summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="options">A System.Threading.Tasks.ParallelOptions instance that configures the behavior of this operation.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.Range(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>Creates an enumerable that iterates the range [fromInclusive, toExclusive).</summary>
            <param name="fromInclusive">The lower bound, inclusive.</param>
            <param name="toExclusive">The upper bound, exclusive.</param>
            <returns>The enumerable of the range.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.ForRange(System.Int32,System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>Executes a for loop over ranges in which iterations may run in parallel. </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="body">The delegate that is invoked once per range.</param>
            <returns>A ParallelLoopResult structure that contains information on what portion of the loop completed.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.ForRange(System.Int32,System.Int32,System.Action{System.Int32,System.Int32,System.Threading.Tasks.ParallelLoopState})">
            <summary>Executes a for loop over ranges in which iterations may run in parallel. </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="body">The delegate that is invoked once per range.</param>
            <returns>A ParallelLoopResult structure that contains information on what portion of the loop completed.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.ForRange``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
            <summary>Executes a for loop over ranges in which iterations may run in parallel. </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="localInit">The function delegate that returns the initial state of the local data for each thread.</param>
            <param name="body">The delegate that is invoked once per range.</param>
            <param name="localFinally">The delegate that performs a final action on the local state of each thread.</param>
            <returns>A ParallelLoopResult structure that contains information on what portion of the loop completed.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.ForRange(System.Int64,System.Int64,System.Action{System.Int64,System.Int64})">
            <summary>Executes a for loop over ranges in which iterations may run in parallel. </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="body">The delegate that is invoked once per range.</param>
            <returns>A ParallelLoopResult structure that contains information on what portion of the loop completed.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.ForRange(System.Int64,System.Int64,System.Action{System.Int64,System.Int64,System.Threading.Tasks.ParallelLoopState})">
            <summary>Executes a for loop over ranges in which iterations may run in parallel. </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="body">The delegate that is invoked once per range.</param>
            <returns>A ParallelLoopResult structure that contains information on what portion of the loop completed.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.ForRange``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
            <summary>Executes a for loop over ranges in which iterations may run in parallel. </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="localInit">The function delegate that returns the initial state of the local data for each thread.</param>
            <param name="body">The delegate that is invoked once per range.</param>
            <param name="localFinally">The delegate that performs a final action on the local state of each thread.</param>
            <returns>A ParallelLoopResult structure that contains information on what portion of the loop completed.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.ForRange(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Int32})">
            <summary>Executes a for loop over ranges in which iterations may run in parallel. </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the behavior of this operation.</param>
            <param name="body">The delegate that is invoked once per range.</param>
            <returns>A ParallelLoopResult structure that contains information on what portion of the loop completed.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.ForRange(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Int32,System.Threading.Tasks.ParallelLoopState})">
            <summary>Executes a for loop over ranges in which iterations may run in parallel. </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the behavior of this operation.</param>
            <param name="body">The delegate that is invoked once per range.</param>
            <returns>A ParallelLoopResult structure that contains information on what portion of the loop completed.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.ForRange``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
            <summary>Executes a for loop over ranges in which iterations may run in parallel. </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="parallelOptions">The parallel option to apply.</param>
            <param name="localInit">The function delegate that returns the initial state of the local data for each thread.</param>
            <param name="body">The delegate that is invoked once per range.</param>
            <param name="localFinally">The delegate that performs a final action on the local state of each thread.</param>
            <returns>A ParallelLoopResult structure that contains information on what portion of the loop completed.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.ForRange(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Int64})">
            <summary>Executes a for loop over ranges in which iterations may run in parallel. </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the behavior of this operation.</param>
            <param name="body">The delegate that is invoked once per range.</param>
            <returns>A ParallelLoopResult structure that contains information on what portion of the loop completed.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.ForRange(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Int64,System.Threading.Tasks.ParallelLoopState})">
            <summary>Executes a for loop over ranges in which iterations may run in parallel. </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the behavior of this operation.</param>
            <param name="body">The delegate that is invoked once per range.</param>
            <returns>A ParallelLoopResult structure that contains information on what portion of the loop completed.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.ForRange``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
            <summary>Executes a for loop over ranges in which iterations may run in parallel. </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="parallelOptions">The parallel option to apply.</param>
            <param name="localInit">The function delegate that returns the initial state of the local data for each thread.</param>
            <param name="body">The delegate that is invoked once per range.</param>
            <param name="localFinally">The delegate that performs a final action on the local state of each thread.</param>
            <returns>A ParallelLoopResult structure that contains information on what portion of the loop completed.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.Map``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>Executes a map operation, converting an input list into an output list, in parallel.</summary>
            <typeparam name="TInput">Specifies the type of the input data.</typeparam>
            <typeparam name="TOutput">Specifies the type of the output data.</typeparam>
            <param name="input">The input list to be mapped used the transform function.</param>
            <param name="transform">The transform function to use to map the input data to the output data.</param>
            <returns>The output data, transformed using the transform function.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.Map``2(System.Collections.Generic.IList{``0},System.Threading.Tasks.ParallelOptions,System.Func{``0,``1})">
            <summary>Executes a map operation, converting an input list into an output list, in parallel.</summary>
            <typeparam name="TInput">Specifies the type of the input data.</typeparam>
            <typeparam name="TOutput">Specifies the type of the output data.</typeparam>
            <param name="input">The input list to be mapped used the transform function.</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the behavior of this operation.</param>
            <param name="transform">The transform function to use to map the input data to the output data.</param>
            <returns>The output data, transformed using the transform function.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.Reduce``1(System.Collections.Generic.IList{``0},``0,System.Func{``0,``0,``0})">
            <summary>Reduces the input data using the specified aggregation operation.</summary>
            <typeparam name="T">Specifies the type of data being aggregated.</typeparam>
            <param name="input">The input data to be reduced.</param>
            <param name="seed">The seed to use to initialize the operation; this seed may be used multiple times.</param>
            <param name="associativeCommutativeOperation">The reduction operation.</param>
            <returns>The reduced value.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.Reduce``1(System.Collections.Generic.IList{``0},System.Threading.Tasks.ParallelOptions,``0,System.Func{``0,``0,``0})">
            <summary>Reduces the input data using the specified aggregation operation.</summary>
            <typeparam name="T">Specifies the type of data being aggregated.</typeparam>
            <param name="input">The input data to be reduced.</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the behavior of this operation.</param>
            <param name="seed">The seed to use to initialize the operation; this seed may be used multiple times.</param>
            <param name="associativeCommutativeOperation">The reduction operation.</param>
            <returns>The reduced value.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.Reduce``1(System.Int32,System.Int32,System.Func{System.Int32,``0},``0,System.Func{``0,``0,``0})">
            <summary>Reduces the input range using the specified aggregation operation.</summary>
            <typeparam name="T">Specifies the type of data being aggregated.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="mapOperation">The function used to retrieve the data to be reduced for a given index.</param>
            <param name="seed">The seed to use to initialize the operation; this seed may be used multiple times.</param>
            <param name="associativeCommutativeOperation">The reduction operation.</param>
            <returns>The reduced value.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.Reduce``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{System.Int32,``0},``0,System.Func{``0,``0,``0})">
            <summary>Reduces the input range using the specified aggregation operation.</summary>
            <typeparam name="T">Specifies the type of data being aggregated.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the behavior of this operation.</param>
            <param name="mapOperation">The function used to retrieve the data to be reduced for a given index.</param>
            <param name="seed">The seed to use to initialize the operation; this seed may be used multiple times.</param>
            <param name="associativeCommutativeOperation">The reduction operation.</param>
            <returns>The reduced value.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.Scan``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
            <summary>Computes a parallel prefix scan over the source enumerable using the specified function.</summary>
            <typeparam name="T">The type of the data in the source.</typeparam>
            <param name="source">The source data over which a prefix scan should be computed.</param>
            <param name="function">The function to use for the scan.</param>
            <returns>The results of the scan operation.</returns>
            <remarks>
            For very small functions, such as additions, an implementation targeted
            at the relevant type and operation will perform significantly better than
            this generalized implementation.
            </remarks>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.Scan``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0},System.Boolean)">
            <summary>Computes a parallel prefix scan over the source enumerable using the specified function.</summary>
            <typeparam name="T">The type of the data in the source.</typeparam>
            <param name="source">The source data over which a prefix scan should be computed.</param>
            <param name="function">The function to use for the scan.</param>
            <param name="loadBalance">Whether to load-balance during process.</param>
            <returns>The results of the scan operation.</returns>
            <remarks>
            For very small functions, such as additions, an implementation targeted
            at the relevant type and operation will perform significantly better than
            this generalized implementation.
            </remarks>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.ScanInPlace``1(``0[],System.Func{``0,``0,``0})">
            <summary>Computes a parallel prefix scan in-place on an array using the specified function.</summary>
            <typeparam name="T">The type of the data in the source.</typeparam>
            <param name="data">The data over which a prefix scan should be computed. Upon exit, stores the results.</param>
            <param name="function">The function to use for the scan.</param>
            <returns>The results of the scan operation.</returns>
            <remarks>
            For very small functions, such as additions, an implementation targeted
            at the relevant type and operation will perform significantly better than
            this generalized implementation.
            </remarks>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.ScanInPlace``1(``0[],System.Func{``0,``0,``0},System.Boolean)">
            <summary>Computes a parallel prefix scan in-place on an array using the specified function.</summary>
            <typeparam name="T">The type of the data in the source.</typeparam>
            <param name="data">The data over which a prefix scan should be computed. Upon exit, stores the results.</param>
            <param name="function">The function to use for the scan.</param>
            <param name="loadBalance">Whether to load-balance during process.</param>
            <returns>The results of the scan operation.</returns>
            <remarks>
            For very small functions, such as additions, an implementation targeted
            at the relevant type and operation will perform significantly better than
            this generalized implementation.
            </remarks>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.InclusiveScanInPlaceSerial``1(``0[],System.Func{``0,``0,``0},System.Int32,System.Int32,System.Int32)">
            <summary>Computes a sequential prefix scan over the array using the specified function.</summary>
            <typeparam name="T">The type of the data in the array.</typeparam>
            <param name="arr">The data, which will be overwritten with the computed prefix scan.</param>
            <param name="function">The function to use for the scan.</param>
            <param name="arrStart">The start of the data in arr over which the scan is being computed.</param>
            <param name="arrLength">The length of the data in arr over which the scan is being computed.</param>
            <param name="skip">The inclusive distance between elements over which the scan is being computed.</param>
            <remarks>No parameter validation is performed.</remarks>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.ExclusiveScanInPlaceSerial``1(``0[],System.Func{``0,``0,``0},System.Int32,System.Int32)">
            <summary>Computes a sequential exclusive prefix scan over the array using the specified function.</summary>
            <param name="arr">The data, which will be overwritten with the computed prefix scan.</param>
            <param name="function">The function to use for the scan.</param>
            <param name="lowerBoundInclusive">The inclusive lower bound of the array at which to start the scan.</param>
            <param name="upperBoundExclusive">The exclusive upper bound of the array at which to end the scan.</param>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.InclusiveScanInPlaceWithLoadBalancingParallel``1(``0[],System.Func{``0,``0,``0},System.Int32,System.Int32,System.Int32)">
            <summary>Computes a parallel prefix scan over the array using the specified function.</summary>
            <typeparam name="T">The type of the data in the array.</typeparam>
            <param name="arr">The data, which will be overwritten with the computed prefix scan.</param>
            <param name="function">The function to use for the scan.</param>
            <param name="arrStart">The start of the data in arr over which the scan is being computed.</param>
            <param name="arrLength">The length of the data in arr over which the scan is being computed.</param>
            <param name="skip">The inclusive distance between elements over which the scan is being computed.</param>
            <remarks>No parameter validation is performed.</remarks>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.InclusiveScanInPlaceParallel``1(``0[],System.Func{``0,``0,``0})">
            <summary>Computes a parallel inclusive prefix scan over the array using the specified function.</summary>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.Sort``1(``0[])">
            <summary>Sorts an array in parallel.</summary>
            <typeparam name="T">Specifies the type of data in the array.</typeparam>
            <param name="array">The array to be sorted.</param>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
            <summary>Sorts an array in parallel.</summary>
            <typeparam name="T">Specifies the type of data in the array.</typeparam>
            <param name="array">The array to be sorted.</param>
            <param name="comparer">The comparer used to compare two elements during the sort operation.</param>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.Sort``1(``0[],System.Int32,System.Int32)">
            <summary>Sorts an array in parallel.</summary>
            <typeparam name="T">Specifies the type of data in the array.</typeparam>
            <param name="array">The array to be sorted.</param>
            <param name="index">The index at which to start the sort, inclusive.</param>
            <param name="length">The number of elements to be sorted, starting at the start index.</param>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>Sorts an array in parallel.</summary>
            <typeparam name="T">Specifies the type of data in the array.</typeparam>
            <param name="array">The array to be sorted.</param>
            <param name="index">The index at which to start the sort, inclusive.</param>
            <param name="length">The number of elements to be sorted, starting at the start index.</param>
            <param name="comparer">The comparer used to compare two elements during the sort operation.</param>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.Sort``2(``0[],``1[])">
            <summary>Sorts key/value arrays in parallel.</summary>
            <typeparam name="TKey">Specifies the type of the data in the keys array.</typeparam>
            <typeparam name="TValue">Specifies the type of the data in the items array.</typeparam>
            <param name="keys">The keys to be sorted.</param>
            <param name="items">The items to be sorted based on the corresponding keys.</param>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})">
            <summary>Sorts key/value arrays in parallel.</summary>
            <typeparam name="TKey">Specifies the type of the data in the keys array.</typeparam>
            <typeparam name="TValue">Specifies the type of the data in the items array.</typeparam>
            <param name="keys">The keys to be sorted.</param>
            <param name="items">The items to be sorted based on the corresponding keys.</param>
            <param name="comparer">The comparer used to compare two elements during the sort operation.</param>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.Sort``2(``0[],``1[],System.Int32,System.Int32)">
            <summary>Sorts key/value arrays in parallel.</summary>
            <typeparam name="TKey">Specifies the type of the data in the keys array.</typeparam>
            <typeparam name="TValue">Specifies the type of the data in the items array.</typeparam>
            <param name="keys">The keys to be sorted.</param>
            <param name="items">The items to be sorted based on the corresponding keys.</param>
            <param name="index">The index at which to start the sort, inclusive.</param>
            <param name="length">The number of elements to be sorted, starting at the start index.</param>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>Sorts key/value arrays in parallel.</summary>
            <typeparam name="TKey">Specifies the type of the data in the keys array.</typeparam>
            <typeparam name="TValue">Specifies the type of the data in the items array.</typeparam>
            <param name="keys">The keys to be sorted.</param>
            <param name="items">The items to be sorted based on the corresponding keys.</param>
            <param name="index">The index at which to start the sort, inclusive.</param>
            <param name="length">The number of elements to be sorted, starting at the start index.</param>
            <param name="comparer">The comparer used to compare two elements during the sort operation.</param>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.SpeculativeFor``1(System.Int32,System.Int32,System.Func{System.Int32,``0})">
            <summary>Executes a function for each value in a range, returning the first result achieved and ceasing execution.</summary>
            <typeparam name="TResult">The type of the data returned.</typeparam>
            <param name="fromInclusive">The start of the range, inclusive.</param>
            <param name="toExclusive">The end of the range, exclusive.</param>
            <param name="body">The function to execute for each element.</param>
            <returns>The result computed.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.SpeculativeFor``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{System.Int32,``0})">
            <summary>Executes a function for each value in a range, returning the first result achieved and ceasing execution.</summary>
            <typeparam name="TResult">The type of the data returned.</typeparam>
            <param name="fromInclusive">The start of the range, inclusive.</param>
            <param name="toExclusive">The end of the range, exclusive.</param>
            <param name="options">The options to use for processing the loop.</param>
            <param name="body">The function to execute for each element.</param>
            <returns>The result computed.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.SpeculativeForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>Executes a function for each element in a source, returning the first result achieved and ceasing execution.</summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="TResult">The type of the data returned.</typeparam>
            <param name="source">The input elements to be processed.</param>
            <param name="body">The function to execute for each element.</param>
            <returns>The result computed.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.SpeculativeForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``0,``1})">
            <summary>Executes a function for each element in a source, returning the first result achieved and ceasing execution.</summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="TResult">The type of the data returned.</typeparam>
            <param name="source">The input elements to be processed.</param>
            <param name="options">The options to use for processing the loop.</param>
            <param name="body">The function to execute for each element.</param>
            <returns>The result computed.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.SpeculativeInvoke``1(System.Func{``0}[])">
            <summary>Invokes the specified functions, potentially in parallel, canceling outstanding invocations once one completes.</summary>
            <typeparam name="T">Specifies the type of data returned by the functions.</typeparam>
            <param name="functions">The functions to be executed.</param>
            <returns>A result from executing one of the functions.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.SpeculativeInvoke``1(System.Threading.Tasks.ParallelOptions,System.Func{``0}[])">
            <summary>Invokes the specified functions, potentially in parallel, canceling outstanding invocations once one completes.</summary>
            <typeparam name="T">Specifies the type of data returned by the functions.</typeparam>
            <param name="options">The options to use for the execution.</param>
            <param name="functions">The functions to be executed.</param>
            <returns>A result from executing one of the functions.</returns>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.Wavefront(System.Int32,System.Int32,System.Int32,System.Int32,System.Action{System.Int32,System.Int32,System.Int32,System.Int32})">
            <summary>Process in parallel a matrix where every cell has a dependency on the cell above it and to its left.</summary>
            <param name="numRows">The number of rows in the matrix.</param>
            <param name="numColumns">The number of columns in the matrix.</param>
            <param name="numBlocksPerRow">Partition the matrix into this number of blocks along the rows.</param>
            <param name="numBlocksPerColumn">Partition the matrix into this number of blocks along the columns.</param>
            <param name="processBlock">The action to invoke for every block, supplied with the start and end indices of the rows and columns.</param>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.Wavefront(System.Int32,System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>Process in parallel a matrix where every cell has a dependency on the cell above it and to its left.</summary>
            <param name="numRows">The number of rows in the matrix.</param>
            <param name="numColumns">The number of columns in the matrix.</param>
            <param name="processRowColumnCell">The action to invoke for every cell, supplied with the row and column indices.</param>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.ParallelWhile(System.Func{System.Boolean},System.Action)">
            <summary>Repeatedly executes an operation in parallel while the specified condition evaluates to true.</summary>
            <param name="condition">The condition to evaluate.</param>
            <param name="body">The loop body.</param>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.ParallelWhile(System.Threading.Tasks.ParallelOptions,System.Func{System.Boolean},System.Action)">
            <summary>Repeatedly executes an operation in parallel while the specified condition evaluates to true.</summary>
            <param name="parallelOptions">A ParallelOptions instance that configures the behavior of this operation.</param>
            <param name="condition">The condition to evaluate.</param>
            <param name="body">The loop body.</param>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.WhileNotEmpty``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Action{``0}})">
            <summary>Processes data in parallel, allowing the processing function to add more data to be processed.</summary>
            <typeparam name="T">Specifies the type of data being processed.</typeparam>
            <param name="initialValues">The initial set of data to be processed.</param>
            <param name="body">The operation to execute for each value.</param>
        </member>
        <member name="M:Nequeo.Threading.Parallel.Algorithms.ParallelAlgorithms.WhileNotEmpty``1(System.Threading.Tasks.ParallelOptions,System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Action{``0}})">
            <summary>Processes data in parallel, allowing the processing function to add more data to be processed.</summary>
            <typeparam name="T">Specifies the type of data being processed.</typeparam>
            <param name="parallelOptions">A ParallelOptions instance that configures the behavior of this operation.</param>
            <param name="initialValues">The initial set of data to be processed.</param>
            <param name="body">The operation to execute for each value.</param>
        </member>
        <member name="T:Nequeo.Threading.Pipeline">
            <summary>Provides support for pipelined data processing.</summary>
        </member>
        <member name="M:Nequeo.Threading.Pipeline.Create``2(System.Func{``0,``1})">
            <summary>Creates a new pipeline, with the specified function as the sole stage.</summary>
            <typeparam name="TInput">Specifies the type of the input data to the pipeline.</typeparam>
            <typeparam name="TOutput">Specifies the type of the output data from this stage of the pipeline.</typeparam>
            <param name="func">The function used to process input data into output data.</param>
            <returns>A pipeline for converting from input data to output data.</returns>
        </member>
        <member name="M:Nequeo.Threading.Pipeline.Create``2(System.Func{``0,``1},System.Int32)">
            <summary>Creates a new pipeline, with the specified function as the sole stage.</summary>
            <typeparam name="TInput">Specifies the type of the input data to the pipeline.</typeparam>
            <typeparam name="TOutput">Specifies the type of the output data from this stage of the pipeline.</typeparam>
            <param name="func">The function used to process input data into output data.</param>
            <param name="degreeOfParallelism">The concurrency level for this stage of the pipeline.</param>
            <returns>A pipeline for converting from input data to output data.</returns>
        </member>
        <member name="T:Nequeo.Threading.Pipeline`2">
            <summary>Provides support for pipelined data processing.</summary>
            <typeparam name="TInput">Specifies the type of the input data to the pipeline.</typeparam>
            <typeparam name="TOutput">Specifies the type of the output data from this stage of the pipeline.</typeparam>
        </member>
        <member name="M:Nequeo.Threading.Pipeline`2.Next``1(System.Func{`1,``0})">
            <summary>Creates a new pipeline that combines the current pipeline with a new stage.</summary>
            <typeparam name="TNextOutput">Specifies the new output type of the pipeline.</typeparam>
            <param name="func">
            The function used to convert the output of the current pipeline into the new
            output of the new pipeline.
            </param>
            <returns>A new pipeline that combines the current pipeline with the new stage.</returns>
            <remarks>This overload creates a parallel pipeline stage.</remarks>
        </member>
        <member name="M:Nequeo.Threading.Pipeline`2.Next``1(System.Func{`1,``0},System.Int32)">
            <summary>Creates a new pipeline that combines the current pipeline with a new stage.</summary>
            <typeparam name="TNextOutput">Specifies the new output type of the pipeline.</typeparam>
            <param name="func">
            The function used to convert the output of the current pipeline into the new
            output of the new pipeline.
            </param>
            <param name="degreeOfParallelism">The concurrency level for this stage of the pipeline.</param>
            <returns>A new pipeline that combines the current pipeline with the new stage.</returns>
        </member>
        <member name="M:Nequeo.Threading.Pipeline`2.Process(System.Collections.Generic.IEnumerable{`0})">
            <summary>Runs the pipeline and returns an enumerable over the results.</summary>
            <param name="source">The source data to be processed by the pipeline.</param>
            <returns>An enumerable of the results of the pipeline.</returns>
        </member>
        <member name="M:Nequeo.Threading.Pipeline`2.Process(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>Runs the pipeline and returns an enumerable over the results.</summary>
            <param name="source">The source data to be processed by the pipeline.</param>
            <param name="cancellationToken">The cancellation token used to signal cancellation of the pipelining.</param>
            <returns>An enumerable of the results of the pipeline.</returns>
        </member>
        <member name="M:Nequeo.Threading.Pipeline`2.ProcessNoArgValidation(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>Runs the pipeline and returns an enumerable over the results.</summary>
            <param name="source">The source data to be processed by the pipeline.</param>
            <param name="cancellationToken">The cancellation token used to signal cancellation of the pipelining.</param>
            <returns>An enumerable of the results of the pipeline.</returns>
        </member>
        <member name="M:Nequeo.Threading.Pipeline`2.ProcessCore(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken,System.Collections.Concurrent.BlockingCollection{`1})">
            <summary>Implements the core processing for a pipeline stage.</summary>
            <param name="source">The source data to be processed by the pipeline.</param>
            <param name="cancellationToken">The cancellation token used to signal cancellation of the pipelining.</param>
            <param name="output">The collection into which to put the output.</param>
        </member>
        <member name="T:Nequeo.Threading.Pipeline`2.InternalPipeline`1">
            <summary>Helper used to add a new stage to a pipeline.</summary>
            <typeparam name="TNextOutput">Specifies the type of the output for the new pipeline.</typeparam>
        </member>
        <member name="M:Nequeo.Threading.Pipeline`2.InternalPipeline`1.ProcessCore(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken,System.Collections.Concurrent.BlockingCollection{`2})">
            <summary>Implements the core processing for a pipeline stage.</summary>
            <param name="source">The source data to be processed by the pipeline.</param>
            <param name="cancellationToken">The cancellation token used to signal cancellation of the pipelining.</param>
            <param name="output">The collection into which to put the output.</param>
        </member>
        <member name="T:Nequeo.Threading.ReductionVariable`1">
            <summary>Provides a reduction variable for aggregating data across multiple threads involved in a computation.</summary>
            <typeparam name="T">Specifies the type of the data being aggregated.</typeparam>
        </member>
        <member name="F:Nequeo.Threading.ReductionVariable`1._seedFactory">
            <summary>The factory used to initialize a value on a thread.</summary>
        </member>
        <member name="F:Nequeo.Threading.ReductionVariable`1._threadLocal">
            <summary>Thread-local storage for each thread's value.</summary>
        </member>
        <member name="F:Nequeo.Threading.ReductionVariable`1._values">
            <summary>The list of all thread-local values for later enumeration.</summary>
        </member>
        <member name="M:Nequeo.Threading.ReductionVariable`1.#ctor">
            <summary>Initializes the instances.</summary>
        </member>
        <member name="M:Nequeo.Threading.ReductionVariable`1.#ctor(System.Func{`0})">
            <summary>Initializes the instances.</summary>
            <param name="seedFactory">
            The function invoked to provide the initial value for a thread.  
            If null, the default value of T will be used as the seed.
            </param>
        </member>
        <member name="M:Nequeo.Threading.ReductionVariable`1.CreateValue">
            <summary>Creates a value for the current thread and stores it in the central list of values.</summary>
            <returns>The boxed value.</returns>
        </member>
        <member name="P:Nequeo.Threading.ReductionVariable`1.Value">
            <summary>Gets or sets the value for the current thread.</summary>
        </member>
        <member name="P:Nequeo.Threading.ReductionVariable`1.Values">
            <summary>Gets the values for all of the threads that have used this instance.</summary>
        </member>
        <member name="M:Nequeo.Threading.ReductionVariable`1.Reduce(System.Func{`0,`0,`0})">
            <summary>Applies an accumulator function over the values in this variable.</summary>
            <param name="function">An accumulator function to be invoked on each value.</param>
            <returns>The accumulated value.</returns>
        </member>
        <member name="M:Nequeo.Threading.ReductionVariable`1.Reduce``1(``0,System.Func{``0,`0,``0})">
            <summary>
            Applies an accumulator function over the values in this variable.
            The specified seed is used as the initial accumulator value.
            </summary>
            <param name="seed">The seed the apply.</param>
            <param name="function">An accumulator function to be invoked on each value.</param>
            <returns>The accumulated value.</returns>
        </member>
        <member name="F:Nequeo.Threading.ReductionVariable`1.disposed">
            <summary>
            Track whether Dispose has been called.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.ReductionVariable`1.Dispose">
            <summary>
            Implement IDisposable.
            Do not make this method virtual.
            A derived class should not be able to override this method.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.ReductionVariable`1.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.ReductionVariable`1.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="T:Nequeo.Threading.ReductionVariable_DebugView`1">
            <summary>Debug view for the reductino variable</summary>
            <typeparam name="T">Specifies the type of the data being aggregated.</typeparam>
        </member>
        <member name="M:Nequeo.Threading.ReductionVariable_DebugView`1.#ctor(Nequeo.Threading.ReductionVariable{`0})">
            <summary>
            
            </summary>
            <param name="variable"></param>
        </member>
        <member name="T:Nequeo.Threading.SpinLockWrapper">
            <summary>Provides a simple, reference type wrapper for SpinLock.</summary>
        </member>
        <member name="M:Nequeo.Threading.SpinLockWrapper.#ctor">
            <summary>Initializes an instance of the SpinLockClass class.</summary>
        </member>
        <member name="M:Nequeo.Threading.SpinLockWrapper.#ctor(System.Boolean)">
            <summary>Initializes an instance of the SpinLockClass class.</summary>
            <param name="enableThreadOwnerTracking">
            Controls whether the SpinLockClass should track
            thread-ownership fo the lock.
            </param>
        </member>
        <member name="M:Nequeo.Threading.SpinLockWrapper.Execute(System.Action)">
            <summary>Runs the specified delegate under the lock.</summary>
            <param name="runUnderLock">The delegate to be executed while holding the lock.</param>
        </member>
        <member name="M:Nequeo.Threading.SpinLockWrapper.Enter(System.Boolean@)">
            <summary>Enters the lock.</summary>
            <param name="lockTaken">
            Upon exit of the Enter method, specifies whether the lock was acquired. 
            The variable passed by reference must be initialized to false.
            </param>
        </member>
        <member name="M:Nequeo.Threading.SpinLockWrapper.Exit">
            <summary>Exits the SpinLock.</summary>
        </member>
        <member name="M:Nequeo.Threading.SpinLockWrapper.Exit(System.Boolean)">
            <summary>Exits the SpinLock.</summary>
            <param name="useMemoryBarrier">
            A Boolean value that indicates whether a memory fence should be issued in
            order to immediately publish the exit operation to other threads.
            </param>
        </member>
        <member name="T:Nequeo.Threading.Stream.AbstractStreamBase">
            <summary>
            Base stream class that implements all of Stream's abstract members.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.Stream.AbstractStreamBase.CanRead">
            <summary>Determines whether data can be read from the stream.</summary>
        </member>
        <member name="P:Nequeo.Threading.Stream.AbstractStreamBase.CanWrite">
            <summary>Determines whether data can be written to the stream.</summary>
        </member>
        <member name="P:Nequeo.Threading.Stream.AbstractStreamBase.CanSeek">
            <summary>Determines whether the stream can be seeked.</summary>
        </member>
        <member name="M:Nequeo.Threading.Stream.AbstractStreamBase.Flush">
            <summary>Flushes the contents of the stream to the underlying storage.</summary>
        </member>
        <member name="P:Nequeo.Threading.Stream.AbstractStreamBase.Length">
            <summary>Gets the length of the stream.</summary>
        </member>
        <member name="P:Nequeo.Threading.Stream.AbstractStreamBase.Position">
            <summary>Gets or sets the current position of the stream.</summary>
        </member>
        <member name="M:Nequeo.Threading.Stream.AbstractStreamBase.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current
            stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">
            An array of bytes. When Read returns, the buffer contains the specified
            byte array with the values between offset and (offset + count - 1) replaced
            by the bytes read from the current source.
            </param>
            <param name="offset">
            The zero-based byte offset in buffer at which to begin storing the data read
            from the current stream.
            </param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the
            number of bytes requested if that many bytes are not currently available,
            or zero (0) if the end of the stream has been reached.
            </returns>
        </member>
        <member name="M:Nequeo.Threading.Stream.AbstractStreamBase.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Sets the position within the current stream.</summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">
            A value of type System.IO.SeekOrigin indicating the reference point used
            to obtain the new position.
            </param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:Nequeo.Threading.Stream.AbstractStreamBase.SetLength(System.Int64)">
            <summary>Sets the length of the current stream.</summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:Nequeo.Threading.Stream.AbstractStreamBase.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Writes a sequence of bytes to the stream.</summary>
            <param name="buffer">An array of bytes. Write copies count bytes from buffer to the stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="T:Nequeo.Threading.Tasks.AsyncCall`1">
            <summary>Asynchronously invokes a handler for every posted item.</summary>
            <typeparam name="T">Specifies the type of data processed by the instance.</typeparam>
        </member>
        <member name="F:Nequeo.Threading.Tasks.AsyncCall`1._queue">
            <summary>
            A queue that stores the posted data.  Also serves as the syncObj for protected instance state.
            A ConcurrentQueue is used to enable lock-free dequeues while running with a single consumer task.
            </summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.AsyncCall`1._handler">
            <summary>The delegate to invoke for every element.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.AsyncCall`1._maxItemsPerTask">
            <summary>The maximum number of items that should be processed by an individual task.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.AsyncCall`1._tf">
            <summary>The TaskFactory to use to launch new tasks.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.AsyncCall`1._parallelOptions">
            <summary>The options to use for parallel processing of data.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.AsyncCall`1._processingCount">
            <summary>Whether a processing task has been scheduled.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.AsyncCall`1.#ctor(System.Action{`0},System.Int32,System.Int32,System.Threading.Tasks.TaskScheduler)">
            <summary>Initializes the AsyncCall with an action to execute for each element.</summary>
            <param name="actionHandler">The action to run for every posted item.</param>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism to use.  If not specified, 1 is used for serial execution.</param>
            <param name="scheduler">The scheduler to use.  If null, the default scheduler is used.</param>
            <param name="maxItemsPerTask">The maximum number of items to be processed per task.  If not specified, Int32.MaxValue is used.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.AsyncCall`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Int32,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes the AsyncCall with a function to execute for each element.  The function returns an Task 
            that represents the asynchronous completion of that element's processing.
            </summary>
            <param name="functionHandler">The function to run for every posted item.</param>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism to use.  If not specified, 1 is used for serial execution.</param>
            <param name="scheduler">The scheduler to use.  If null, the default scheduler is used.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.AsyncCall`1.#ctor(System.Int32,System.Int32,System.Threading.Tasks.TaskScheduler)">
            <summary>General initialization of the AsyncCall.  Another constructor must initialize the delegate.</summary>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism to use.  If not specified, 1 is used for serial execution.</param>
            <param name="maxItemsPerTask">The maximum number of items to be processed per task.  If not specified, Int32.MaxValue is used.</param>
            <param name="scheduler">The scheduler to use.  If null, the default scheduler is used.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.AsyncCall`1.Post(`0)">
            <summary>Post an item for processing.</summary>
            <param name="item">The item to be processed.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.AsyncCall`1.GetItemsToProcess">
            <summary>Gets an enumerable that yields the items to be processed at this time.</summary>
            <returns>An enumerable of items.</returns>
        </member>
        <member name="M:Nequeo.Threading.Tasks.AsyncCall`1.ProcessItemsActionTaskBody">
            <summary>Used as the body of an action task to process items in the queue.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.AsyncCall`1.ProcessItemFunctionTaskBody(System.Object)">
            <summary>Used as the body of a function task to process items in the queue.</summary>
        </member>
        <member name="T:Nequeo.Threading.Tasks.AsyncCall">
            <summary>Provides static factory methods for creating AsyncCall(Of T) instances.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.AsyncCall.Create``1(System.Action{``0},System.Int32,System.Int32,System.Threading.Tasks.TaskScheduler)">
            <summary>Initializes the AsyncCall with an action to execute for each element.</summary>
            <param name="actionHandler">The action to run for every posted item.</param>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism to use.  If not specified, 1 is used for serial execution.</param>
            <param name="scheduler">The scheduler to use.  If null, the default scheduler is used.</param>
            <param name="maxItemsPerTask">The maximum number of items to be processed per task.  If not specified, Int32.MaxValue is used.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.AsyncCall.Create``1(System.Func{``0,System.Threading.Tasks.Task},System.Int32,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes the AsyncCall with a function to execute for each element.  The function returns an Task 
            that represents the asynchronous completion of that element's processing.
            </summary>
            <param name="functionHandler">The function to run for every posted item.</param>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism to use.  If not specified, 1 is used for serial execution.</param>
            <param name="scheduler">The scheduler to use.  If null, the default scheduler is used.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.AsyncCall.CreateInTargetAppDomain``1(System.AppDomain,System.Action{``0},System.Int32,System.Int32)">
            <summary>Initializes the AsyncCall in the specified AppDomain with an action to execute for each element.</summary>
            <param name="targetDomain">The target application domain to attch to.</param>
            <param name="actionHandler">The action to run for every posted item.</param>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism to use.  If not specified, 1 is used for serial execution.</param>
            <param name="maxItemsPerTask">The maximum number of items to be processed per task.  If not specified, Int32.MaxValue is used.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.AsyncCall.CreateInTargetAppDomain``1(System.AppDomain,System.Func{``0,System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Initializes the AsyncCall in the specified AppDomain with a function to execute for each element.  
            The function returns an Task that represents the asynchronous completion of that element's processing.
            </summary>
            <param name="targetDomain">The target application domain to attch to.</param>
            <param name="functionHandler">The action to run for every posted item.</param>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism to use.  If not specified, 1 is used for serial execution.</param>
        </member>
        <member name="T:Nequeo.Threading.Tasks.AsyncResultQueue">
            <summary>
            Provides basic implementation of the IAsyncResult interface.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.AsyncResultQueue.#ctor(System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the AsyncResult object with the
            specified owner of the AsyncResult object, the optional callback
            delegate, and optional state object.
            </summary>
            <param name="owner">
            The owner of the AsyncResult object.
            </param>
            <param name="callback">
            An optional asynchronous callback, to be called when the 
            operation is complete. 
            </param>
            <param name="state">
            A user-provided object that distinguishes this particular 
            asynchronous request from other requests. 
            </param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.AsyncResultQueue.Signal">
            <summary>
            Signals that the operation has completed.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.Tasks.AsyncResultQueue.Owner">
            <summary>
            Gets the owner of this AsyncResult object.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.Tasks.AsyncResultQueue.AsyncState">
            <summary>
            Gets the async state.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.Tasks.AsyncResultQueue.AsyncWaitHandle">
            <summary>
            Gets the async wait handle.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.Tasks.AsyncResultQueue.CompletedSynchronously">
            <summary>
            Get the completed synchronously indicator.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.Tasks.AsyncResultQueue.IsCompleted">
            <summary>
            Get the is operation complete indicator.
            </summary>
        </member>
        <member name="T:Nequeo.Threading.Tasks.CompletedTask">
            <summary>Provides access to an already completed task.</summary>
            <remarks>A completed task can be useful for using ContinueWith overloads where there aren't StartNew equivalents.</remarks>
        </member>
        <member name="F:Nequeo.Threading.Tasks.CompletedTask.Default">
            <summary>Gets a completed Task.</summary>
        </member>
        <member name="T:Nequeo.Threading.Tasks.CompletedTask`1">
            <summary>Provides access to an already completed task.</summary>
            <remarks>A completed task can be useful for using ContinueWith overloads where there aren't StartNew equivalents.</remarks>
        </member>
        <member name="M:Nequeo.Threading.Tasks.CompletedTask`1.#cctor">
            <summary>Initializes a Task.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.CompletedTask`1.Default">
            <summary>Gets a completed Task.</summary>
        </member>
        <member name="T:Nequeo.Threading.Tasks.DelegateQueue">
            <summary>
            Represents an asynchronous queue of delegates.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.DelegateQueue.#ctor">
            <summary>
            Initializes a new instance of the DelegateQueue class.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.DelegateQueue.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the DelegateQueue class with the specified IContainer object.
            </summary>
            <param name="container">
            The IContainer to which the DelegateQueue will add itself.
            </param>
        </member>
        <member name="E:Nequeo.Threading.Tasks.DelegateQueue.InvokeCompleted">
            <summary>
            Occurs after a method has been invoked as a result of a call to 
            the BeginInvoke or BeginInvokePriority methods.
            </summary>
        </member>
        <member name="E:Nequeo.Threading.Tasks.DelegateQueue.PostCompleted">
            <summary>
            Occurs after a method has been invoked as a result of a call to
            the Post and PostPriority methods.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.DelegateQueue.BeginInvokePriority(System.Delegate,System.Object[])">
            <summary>
            Executes the delegate on the main thread that this object executes on.
            </summary>
            <param name="method">
            A Delegate to a method that takes parameters of the same number and 
            type that are contained in args. 
            </param>
            <param name="args">
            An array of type Object to pass as arguments to the given method. 
            </param>
            <returns>
            An IAsyncResult interface that represents the asynchronous operation 
            started by calling this method.
            </returns>
            <remarks>
            The delegate is placed at the beginning of the queue. Its invocation
            takes priority over delegates already in the queue. 
            </remarks>
        </member>
        <member name="M:Nequeo.Threading.Tasks.DelegateQueue.InvokePriority(System.Delegate,System.Object[])">
            <summary>
            Executes the delegate on the main thread that this object executes on.
            </summary>
            <param name="method">
            A Delegate to a method that takes parameters of the same number and 
            type that are contained in args. 
            </param>
            <param name="args">
            An array of type Object to pass as arguments to the given method. 
            </param>
            <returns>
            An IAsyncResult interface that represents the asynchronous operation 
            started by calling this method.
            </returns>
            <remarks>
            <para>
            The delegate is placed at the beginning of the queue. Its invocation
            takes priority over delegates already in the queue. 
            </para>
            <para>
            Unlike BeginInvoke, this method operates synchronously, that is, it 
            waits until the process completes before returning. Exceptions raised 
            during the call are propagated back to the caller.
            </para>
            </remarks>
        </member>
        <member name="M:Nequeo.Threading.Tasks.DelegateQueue.PostPriority(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches an asynchronous message to this synchronization context. 
            </summary>
            <param name="d">
            The SendOrPostCallback delegate to call.
            </param>
            <param name="state">
            The object passed to the delegate.
            </param>
            <remarks>
            The Post method starts an asynchronous request to post a message. 
            </remarks>
        </member>
        <member name="M:Nequeo.Threading.Tasks.DelegateQueue.SendPriority(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches an synchronous message to this synchronization context. 
            </summary>
            <param name="d">
            The SendOrPostCallback delegate to call.
            </param>
            <param name="state">
            The object passed to the delegate.
            </param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.DelegateQueue.OnInvokeCompleted(Nequeo.Threading.Tasks.InvokeCompletedEventArgs)">
            <summary>
            Raises the InvokeCompleted event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.DelegateQueue.OnPostCompleted(Nequeo.Threading.Tasks.PostCompletedEventArgs)">
            <summary>
            Raises the PostCompleted event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.DelegateQueue.OnDisposed(System.EventArgs)">
            <summary>
            Raises the Disposed event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.DelegateQueue.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches a synchronous message to this synchronization context. 
            </summary>
            <param name="d">
            The SendOrPostCallback delegate to call.
            </param>
            <param name="state">
            The object passed to the delegate.
            </param>
            <remarks>
            The Send method starts an synchronous request to send a message. 
            </remarks>
        </member>
        <member name="M:Nequeo.Threading.Tasks.DelegateQueue.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches an asynchronous message to this synchronization context. 
            </summary>
            <param name="d">
            The SendOrPostCallback delegate to call.
            </param>
            <param name="state">
            The object passed to the delegate.
            </param>
            <remarks>
            The Post method starts an asynchronous request to post a message. 
            </remarks>
        </member>
        <member name="E:Nequeo.Threading.Tasks.DelegateQueue.Disposed">
            <summary>
            Represents the method that handles the Disposed delegate of a DelegateQueue.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.Tasks.DelegateQueue.Site">
            <summary>
            Gets or sets the ISite associated with the DelegateQueue.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.DelegateQueue.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            Executes the delegate on the main thread that this DelegateQueue executes on.
            </summary>
            <param name="method">
            A Delegate to a method that takes parameters of the same number and type that 
            are contained in args. 
            </param>
            <param name="args">
            An array of type Object to pass as arguments to the given method. This can be 
            a null reference (Nothing in Visual Basic) if no arguments are needed. 
            </param>
            <returns>
            An IAsyncResult interface that represents the asynchronous operation started 
            by calling this method.
            </returns>
            <remarks>
            <para>The delegate is called asynchronously, and this method returns immediately. 
            You can call this method from any thread. If you need the return value from a process 
            started with this method, call EndInvoke to get the value.</para>
            <para>If you need to call the delegate synchronously, use the Invoke method instead.</para>
            </remarks>
        </member>
        <member name="M:Nequeo.Threading.Tasks.DelegateQueue.EndInvoke(System.IAsyncResult)">
            <summary>
            Waits until the process started by calling BeginInvoke completes, and then returns 
            the value generated by the process.
            </summary>
            <param name="result">
            An IAsyncResult interface that represents the asynchronous operation started 
            by calling BeginInvoke. 
            </param>
            <returns>
            An Object that represents the return value generated by the asynchronous operation.
            </returns>
            <remarks>
            This method gets the return value of the asynchronous operation represented by the 
            IAsyncResult passed by this interface. If the asynchronous operation has not completed, this method will wait until the result is available.
            </remarks>
        </member>
        <member name="M:Nequeo.Threading.Tasks.DelegateQueue.Invoke(System.Delegate,System.Object[])">
            <summary>
            Executes the delegate on the main thread that this DelegateQueue executes on.
            </summary>
            <param name="method">
            A Delegate that contains a method to call, in the context of the thread for the DelegateQueue.
            </param>
            <param name="args">
            An array of type Object that represents the arguments to pass to the given method.
            </param>
            <returns>
            An Object that represents the return value from the delegate being invoked, or a 
            null reference (Nothing in Visual Basic) if the delegate has no return value.
            </returns>
            <remarks>
            <para>Unlike BeginInvoke, this method operates synchronously, that is, it waits until 
            the process completes before returning. Exceptions raised during the call are propagated 
            back to the caller.</para>
            <para>Use this method when calling a method from a different thread to marshal the call 
            to the proper thread.</para>
            </remarks>
        </member>
        <member name="P:Nequeo.Threading.Tasks.DelegateQueue.InvokeRequired">
            <summary>
            Gets a value indicating whether the caller must call Invoke.
            </summary>
            <value>
            <b>true</b> if the caller must call Invoke; otherwise, <b>false</b>.
            </value>
            <remarks>
            This property determines whether the caller must call Invoke when making 
            method calls to this DelegateQueue. If you are calling a method from a different 
            thread, you must use the Invoke method to marshal the call to the proper thread.
            </remarks>
        </member>
        <member name="M:Nequeo.Threading.Tasks.DelegateQueue.Dispose">
            <summary>
            Disposes of the DelegateQueue.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.DelegateQueue.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.DelegateQueue.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="T:Nequeo.Threading.Tasks.DelegateQueue.DelegateQueueAsyncResult">
            <summary>
            Implements the IAsyncResult interface for the DelegateQueue class.
            </summary>
        </member>
        <member name="T:Nequeo.Threading.Tasks.InvokeCompletedEventArgs">
            <summary>
            Represents information about the InvokeCompleted event.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.InvokeCompletedEventArgs.#ctor(System.Delegate,System.Object[],System.Object,System.Exception)">
            <summary>
            Represents information about the InvokeCompleted event.
            </summary>
            <param name="method">The method.</param>
            <param name="args">The arguments.</param>
            <param name="result">The result.</param>
            <param name="error">The error messsage.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.InvokeCompletedEventArgs.GetArgs">
            <summary>
            Get the arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nequeo.Threading.Tasks.InvokeCompletedEventArgs.Method">
            <summary>
            Gets the method.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.Tasks.InvokeCompletedEventArgs.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.Tasks.InvokeCompletedEventArgs.Error">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:Nequeo.Threading.Tasks.PostCompletedEventArgs">
            <summary>
            Post complete event arguments.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.PostCompletedEventArgs.#ctor(System.Threading.SendOrPostCallback,System.Object,System.Exception)">
            <summary>
            Post complete event arguments.
            </summary>
            <param name="callback">The call back.</param>
            <param name="state">The state.</param>
            <param name="error">The error message.</param>
        </member>
        <member name="P:Nequeo.Threading.Tasks.PostCompletedEventArgs.Callback">
            <summary>
            Gets the send or post callback.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.Tasks.PostCompletedEventArgs.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.Tasks.PostCompletedEventArgs.Error">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave">
            <summary>Provides concurrent and exclusive task schedulers that coordinate.</summary>
        </member>
        <member name="T:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveInterleaveDebugView">
            <summary>Provides a debug view for ConcurrentExclusiveInterleave.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveInterleaveDebugView._interleave">
            <summary>The interleave being debugged.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveInterleaveDebugView.#ctor(Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave)">
            <summary>Initializes the debug view.</summary>
            <param name="interleave">The interleave being debugged.</param>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveInterleaveDebugView.ConcurrentTasksWaiting">
            <summary>Gets the number of tasks waiting to run concurrently.</summary>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveInterleaveDebugView.InterleaveTask">
            <summary>Gets a description of the processing task for debugging purposes.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave._internalLock">
            <summary>Synchronizes all activity in this type and its generated schedulers.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave._parallelOptions">
            <summary>The parallel options used by the asynchronous task and parallel loops.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave._concurrentTaskScheduler">
            <summary>The scheduler used to queue and execute "reader" tasks that may run concurrently with other readers.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave._exclusiveTaskScheduler">
            <summary>The scheduler used to queue and execute "writer" tasks that must run exclusively while no other tasks for this interleave are running.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave._taskExecuting">
            <summary>Whether this interleave has queued its processing task.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave._exclusiveProcessingIncludesChildren">
            <summary>Whether the exclusive processing of a task should include all of its children as well.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.#ctor">
            <summary>Initialies the ConcurrentExclusiveInterleave.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.#ctor(System.Boolean)">
            <summary>Initialies the ConcurrentExclusiveInterleave.</summary>
            <param name="exclusiveProcessingIncludesChildren">Whether the exclusive processing of a task should include all of its children as well.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.#ctor(System.Threading.Tasks.TaskScheduler)">
            <summary>Initialies the ConcurrentExclusiveInterleave.</summary>
            <param name="targetScheduler">The target scheduler on which this interleave should execute.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.#ctor(System.Threading.Tasks.TaskScheduler,System.Boolean)">
            <summary>Initialies the ConcurrentExclusiveInterleave.</summary>
            <param name="targetScheduler">The target scheduler on which this interleave should execute.</param>
            <param name="exclusiveProcessingIncludesChildren">Whether the exclusive processing of a task should include all of its children as well.</param>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentTaskScheduler">
            <summary>
            Gets a TaskScheduler that can be used to schedule tasks to this interleave
            that may run concurrently with other tasks on this interleave.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ExclusiveTaskScheduler">
            <summary>
            Gets a TaskScheduler that can be used to schedule tasks to this interleave
            that must run exclusively with regards to other tasks on this interleave.
            </summary>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ExclusiveTaskCount">
            <summary>Gets the number of tasks waiting to run exclusively.</summary>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentTaskCount">
            <summary>Gets the number of tasks waiting to run concurrently.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.NotifyOfNewWork">
            <summary>Notifies the interleave that new work has arrived to be processed.</summary>
            <remarks>Must only be called while holding the lock.</remarks>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveInterleaveProcessor">
            <summary>The body of the async processor to be run in a Task.  Only one should be running at a time.</summary>
            <remarks>This has been separated out into its own method to improve the Parallel Tasks window experience.</remarks>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ExecuteConcurrentTask(System.Threading.Tasks.Task)">
            <summary>Runs a concurrent task.</summary>
            <param name="task">The task to execute.</param>
            <remarks>This has been separated out into its own method to improve the Parallel Tasks window experience.</remarks>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.GetConcurrentTasksUntilExclusiveExists">
            <summary>
            Gets an enumerable that yields waiting concurrent tasks one at a time until
            either there are no more concurrent tasks or there are any exclusive tasks.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.GetExclusiveTasks">
            <summary>
            Gets an enumerable that yields all of the exclusive tasks one at a time.
            </summary>
        </member>
        <member name="T:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler">
            <summary>
            A scheduler shim used to queue tasks to the interleave and execute those tasks on request of the interleave.
            </summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler._interleave">
            <summary>The parent interleave.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler._maximumConcurrencyLevel">
            <summary>The maximum concurrency level for the scheduler.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler._processingTaskOnCurrentThread">
            <summary>Whether a Task is currently being processed on this thread.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.#ctor(Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave,System.Collections.Generic.Queue{System.Threading.Tasks.Task},System.Int32)">
            <summary>Initializes the scheduler.</summary>
            <param name="interleave">The parent interleave.</param>
            <param name="tasks">The queue to store queued tasks into.</param>
            <param name="maximumConcurrencyLevel">The maximum concurrecy level</param>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level this scheduler is able to support.</summary>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.Tasks">
            <summary>Gets the queue of tasks for this scheduler.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.ExecuteTask(System.Threading.Tasks.Task)">
            <summary>Executes a task on this scheduler.</summary>
            <param name="task">The task to be executed.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Tries to execute the task synchronously on this scheduler.</summary>
            <param name="task">The task to execute.</param>
            <param name="taskWasPreviouslyQueued">Whether the task was previously queued to the scheduler.</param>
            <returns>true if the task could be executed; otherwise, false.</returns>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.GetScheduledTasks">
            <summary>Gets for debugging purposes the tasks scheduled to this scheduler.</summary>
            <returns>An enumerable of the tasks queued.</returns>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.disposed">
            <summary>
            Track whether Dispose has been called.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.Dispose">
            <summary>
            Implement IDisposable.
            Do not make this method virtual.
            A derived class should not be able to override this method.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.disposed">
            <summary>
            Track whether Dispose has been called.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.Dispose">
            <summary>
            Implement IDisposable.
            Do not make this method virtual.
            A derived class should not be able to override this method.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ConcurrentExclusiveInterleave.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="T:Nequeo.Threading.Tasks.Schedulers.CurrentThreadTaskScheduler">
            <summary>Provides a task scheduler that runs tasks on the current thread.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.CurrentThreadTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Runs the provided Task synchronously on the current thread.</summary>
            <param name="task">The task to be executed.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.CurrentThreadTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Runs the provided Task synchronously on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Whether the Task was previously queued to the scheduler.</param>
            <returns>True if the Task was successfully executed; otherwise, false.</returns>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.CurrentThreadTaskScheduler.GetScheduledTasks">
            <summary>Gets the Tasks currently scheduled to this scheduler.</summary>
            <returns>An empty enumerable, as Tasks are never queued, only executed.</returns>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.CurrentThreadTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum degree of parallelism for this scheduler.</summary>
        </member>
        <member name="T:Nequeo.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler">
            <summary>Provides a TaskScheduler that uses an I/O completion port for concurrency control.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.m_tasks">
            <summary>The queue of tasks to be scheduled.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.m_iocp">
            <summary>The I/O completion port to use for concurrency control.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.m_schedulerThread">
            <summary>Whether the current thread is a scheduler thread.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.m_remainingThreadsToShutdown">
            <summary>Event used to wait for all threads to shutdown.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.#ctor(System.Int32,System.Int32)">
            <summary>Initializes the IOCompletionPortTaskScheduler.</summary>
            <param name="maxConcurrencyLevel">The maximum number of threads in the scheduler to be executing concurrently.</param>
            <param name="numAvailableThreads">The number of threads to have available in the scheduler for executing tasks.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.Dispose">
            <summary>Dispose of the scheduler.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.GetScheduledTasks">
            <summary>Gets a list of all tasks scheduled to this scheduler.</summary>
            <returns>An enumerable of all scheduled tasks.</returns>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to this scheduler for execution.</summary>
            <param name="task">The task to be executed.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Try to execute a task on the current thread.</summary>
            <param name="task">The task to execute.</param>
            <param name="taskWasPreviouslyQueued">Whether the task was previously queued to this scheduler.</param>
            <returns>Whether the task was executed.</returns>
        </member>
        <member name="T:Nequeo.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.IOCompletionPort">
            <summary>Provides a simple managed wrapper for an I/O completion port.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.IOCompletionPort.INFINITE_TIMEOUT">
            <summary>Infinite timeout value to use for GetQueuedCompletedStatus.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.IOCompletionPort.INVALID_FILE_HANDLE">
            <summary>An invalid file handle value.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.IOCompletionPort.INVALID_IOCP_HANDLE">
            <summary>An invalid I/O completion port handle value.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.IOCompletionPort.m_handle">
            <summary>The I/O completion porth handle.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.IOCompletionPort.#ctor(System.Int32)">
            <summary>Initializes the I/O completion port.</summary>
            <param name="maxConcurrencyLevel">The maximum concurrency level allowed by the I/O completion port.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.IOCompletionPort.Dispose">
            <summary>Clean up.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.IOCompletionPort.NotifyOne">
            <summary>Notify that I/O completion port that new work is available.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.IOCompletionPort.WaitOne">
            <summary>Waits for an item on the I/O completion port.</summary>
            <returns>true if an item was available; false if the completion port closed before an item could be retrieved.</returns>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.IOCompletionPort.CreateIoCompletionPort(System.IntPtr,System.IntPtr,System.UIntPtr,System.UInt32)">
            <summary>
            Creates an input/output (I/O) completion port and associates it with a specified file handle, 
            or creates an I/O completion port that is not yet associated with a file handle, allowing association at a later time.
            </summary>
            <param name="fileHandle">An open file handle or INVALID_HANDLE_VALUE.</param>
            <param name="existingCompletionPort">A handle to an existing I/O completion port or NULL.</param>
            <param name="completionKey">The per-handle user-defined completion key that is included in every I/O completion packet for the specified file handle.</param>
            <param name="numberOfConcurrentThreads">The maximum number of threads that the operating system can allow to concurrently process I/O completion packets for the I/O completion port.</param>
            <returns>If the function succeeds, the return value is the handle to an I/O completion port.  If the function fails, the return value is NULL.</returns>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.IOCompletionPort.GetQueuedCompletionStatus(System.IntPtr,System.UInt32@,System.IntPtr@,System.IntPtr@,System.UInt32)">
            <summary>Attempts to dequeue an I/O completion packet from the specified I/O completion port.</summary>
            <param name="completionPort">A handle to the completion port.</param>
            <param name="lpNumberOfBytes">A pointer to a variable that receives the number of bytes transferred during an I/O operation that has completed.</param>
            <param name="lpCompletionKey">A pointer to a variable that receives the completion key value associated with the file handle whose I/O operation has completed.</param>
            <param name="lpOverlapped">A pointer to a variable that receives the address of the OVERLAPPED structure that was specified when the completed I/O operation was started.</param>
            <param name="dwMilliseconds">The number of milliseconds that the caller is willing to wait for a completion packet to appear at the completion port. </param>
            <returns>Returns nonzero (TRUE) if successful or zero (FALSE) otherwise.</returns>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.IOCompletionPortTaskScheduler.IOCompletionPort.PostQueuedCompletionStatus(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>Posts an I/O completion packet to an I/O completion port.</summary>
            <param name="completionPort">A handle to the completion port.</param>
            <param name="dwNumberOfBytesTransferred">The value to be returned through the lpNumberOfBytesTransferred parameter of the GetQueuedCompletionStatus function.</param>
            <param name="dwCompletionKey">The value to be returned through the lpCompletionKey parameter of the GetQueuedCompletionStatus function.</param>
            <param name="lpOverlapped">The value to be returned through the lpOverlapped parameter of the GetQueuedCompletionStatus function.</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</returns>
        </member>
        <member name="T:Nequeo.Threading.Tasks.Schedulers.IOTaskScheduler">
            <summary>Provides a task scheduler that targets the I/O ThreadPool.</summary>
        </member>
        <member name="T:Nequeo.Threading.Tasks.Schedulers.IOTaskScheduler.WorkItem">
            <summary>Represents a task queued to the I/O pool.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.IOTaskScheduler.#ctor">
            <summary>Initializes a new instance of the IOTaskScheduler class.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.IOTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler for execution on the I/O ThreadPool.</summary>
            <param name="task">The Task to queue.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.IOTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Executes a task on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Ignored.</param>
            <returns>Whether the task could be executed.</returns>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.IOTaskScheduler.Dispose">
            <summary>Disposes of resources used by the scheduler.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.IOTaskScheduler.GetScheduledTasks">
            <summary>Gets an enumerable of tasks queued to the scheduler.</summary>
            <returns>An enumerable of tasks queued to the scheduler.</returns>
            <remarks>This implementation will always return an empty enumerable.</remarks>
        </member>
        <member name="T:Nequeo.Threading.Tasks.Schedulers.LimitedConcurrencyLevelTaskScheduler">
            <summary>
            Provides a task scheduler that ensures a maximum concurrency level while
            running on top of the ThreadPool.
            </summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.LimitedConcurrencyLevelTaskScheduler._currentThreadIsProcessingItems">
            <summary>Whether the current thread is processing work items.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.LimitedConcurrencyLevelTaskScheduler._tasks">
            <summary>The list of tasks to be executed.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.LimitedConcurrencyLevelTaskScheduler._maxDegreeOfParallelism">
            <summary>The maximum concurrency level allowed by this scheduler.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.LimitedConcurrencyLevelTaskScheduler._delegatesQueuedOrRunning">
            <summary>Whether the scheduler is currently processing work items.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.LimitedConcurrencyLevelTaskScheduler.#ctor(System.Int32)">
            <summary>
            Initializes an instance of the LimitedConcurrencyLevelTaskScheduler class with the
            specified degree of parallelism.
            </summary>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism provided by this scheduler.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.LimitedConcurrencyLevelTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.LimitedConcurrencyLevelTaskScheduler.NotifyThreadPoolOfPendingWork">
            <summary>
            Informs the ThreadPool that there's work to be executed for this scheduler.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.LimitedConcurrencyLevelTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Attempts to execute the specified task on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued"></param>
            <returns>Whether the task could be executed on the current thread.</returns>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.LimitedConcurrencyLevelTaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
            <summary>Attempts to remove a previously scheduled task from the scheduler.</summary>
            <param name="task">The task to be removed.</param>
            <returns>Whether the task could be found and removed.</returns>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.LimitedConcurrencyLevelTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.LimitedConcurrencyLevelTaskScheduler.GetScheduledTasks">
            <summary>Gets an enumerable of the tasks currently scheduled on this scheduler.</summary>
            <returns>An enumerable of the tasks currently scheduled.</returns>
        </member>
        <member name="T:Nequeo.Threading.Tasks.Schedulers.OrderedTaskScheduler">
            <summary>
            Provides a task scheduler that ensures only one task is executing at a time, and that tasks
            execute in the order that they were queued.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.OrderedTaskScheduler.#ctor">
            <summary>Initializes an instance of the OrderedTaskScheduler class.</summary>
        </member>
        <member name="T:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler">
            <summary>
            Provides a TaskScheduler that provides control over priorities, fairness, and the underlying threads utilized.
            </summary>
        </member>
        <member name="T:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerDebugView">
            <summary>Debug view for the QueuedTaskScheduler.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerDebugView._scheduler">
            <summary>The scheduler.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerDebugView.#ctor(Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler)">
            <summary>Initializes the debug view.</summary>
            <param name="scheduler">The scheduler.</param>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerDebugView.ScheduledTasks">
            <summary>Gets all of the Tasks queued to the scheduler directly.</summary>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerDebugView.Queues">
            <summary>Gets the prioritized and fair queues.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler._queueGroups">
            <summary>
            A sorted list of round-robin queue lists.  Tasks with the smallest priority value
            are preferred.  Priority groups are round-robin'd through in order of priority.
            </summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler._disposeCancellation">
            <summary>Cancellation token used for disposal.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler._concurrencyLevel">
            <summary>
            The maximum allowed concurrency level of this scheduler.  If custom threads are
            used, this represents the number of created threads.
            </summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler._taskProcessingThread">
            <summary>Whether we're processing tasks on the current thread.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler._targetScheduler">
            <summary>The scheduler onto which actual work is scheduled.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler._nonthreadsafeTaskQueue">
            <summary>The queue of tasks to process when using an underlying target scheduler.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler._delegatesQueuedOrRunning">
            <summary>The number of Tasks that have been queued or that are running whiel using an underlying scheduler.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler._threads">
            <summary>The threads used by the scheduler to process work.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler._blockingTaskQueue">
            <summary>The collection of tasks to be executed on our custom threads.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.#ctor">
            <summary>Initializes the scheduler.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.#ctor(System.Threading.Tasks.TaskScheduler)">
            <summary>Initializes the scheduler.</summary>
            <param name="targetScheduler">The target underlying scheduler onto which this sceduler's work is queued.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32)">
            <summary>Initializes the scheduler.</summary>
            <param name="targetScheduler">The target underlying scheduler onto which this sceduler's work is queued.</param>
            <param name="maxConcurrencyLevel">The maximum degree of concurrency allowed for this scheduler's work.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.#ctor(System.Int32)">
            <summary>Initializes the scheduler.</summary>
            <param name="threadCount">The number of threads to create and use for processing work items.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.#ctor(System.Int32,System.String,System.Boolean,System.Threading.ThreadPriority,System.Threading.ApartmentState,System.Int32,System.Action,System.Action)">
            <summary>Initializes the scheduler.</summary>
            <param name="threadCount">The number of threads to create and use for processing work items.</param>
            <param name="threadName">The name to use for each of the created threads.</param>
            <param name="useForegroundThreads">A Boolean value that indicates whether to use foreground threads instead of background.</param>
            <param name="threadPriority">The priority to assign to each thread.</param>
            <param name="threadApartmentState">The apartment state to use for each thread.</param>
            <param name="threadMaxStackSize">The stack size to use for each thread.</param>
            <param name="threadInit">An initialization routine to run on each thread.</param>
            <param name="threadFinally">A finalization routine to run on each thread.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.ThreadBasedDispatchLoop(System.Action,System.Action)">
            <summary>The dispatch loop run by all threads in this scheduler.</summary>
            <param name="threadInit">An initialization routine to run when the thread begins.</param>
            <param name="threadFinally">A finalization routine to run before the thread ends.</param>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.DebugQueueCount">
            <summary>Gets the number of queues currently activated.</summary>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.DebugTaskCount">
            <summary>Gets the number of tasks currently scheduled.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.FindNextTask_NeedsLock(System.Threading.Tasks.Task@,Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue@)">
            <summary>Find the next task that should be executed, based on priorities and fairness and the like.</summary>
            <param name="targetTask">The found task, or null if none was found.</param>
            <param name="queueForTargetTask">
            The scheduler associated with the found task.  Due to security checks inside of TPL,  
            this scheduler needs to be used to execute that task.
            </param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.ProcessPrioritizedAndBatchedTasks">
            <summary>
            Process tasks one at a time in the best order.  
            This should be run in a Task generated by QueueTask.
            It's been separated out into its own method to show up better in Parallel Tasks.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.NotifyNewWorkItem">
            <summary>Notifies the pool that there's a new item to be executed in one of the round-robin queues.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Tries to execute a task synchronously on the current thread.</summary>
            <param name="task">The task to execute.</param>
            <param name="taskWasPreviouslyQueued">Whether the task was previously queued.</param>
            <returns>true if the task was executed; otherwise, false.</returns>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.GetScheduledTasks">
            <summary>Gets the tasks scheduled to this scheduler.</summary>
            <returns>An enumerable of all tasks queued to this scheduler.</returns>
            <remarks>This does not include the tasks on sub-schedulers.  Those will be retrieved by the debugger separately.</remarks>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level to use when processing tasks.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.ActivateNewQueue">
            <summary>Creates and activates a new scheduling queue for this scheduler.</summary>
            <returns>The newly created and activated queue at priority 0.</returns>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.ActivateNewQueue(System.Int32)">
            <summary>Creates and activates a new scheduling queue for this scheduler.</summary>
            <param name="priority">The priority level for the new queue.</param>
            <returns>The newly created and activated queue at the specified priority.</returns>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.RemoveQueue_NeedsLock(Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue)">
            <summary>Removes a scheduler from the group.</summary>
            <param name="queue">The scheduler to be removed.</param>
        </member>
        <member name="T:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueueGroup">
            <summary>A group of queues a the same priority level.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueueGroup.NextQueueIndex">
            <summary>The starting index for the next round-robin traversal.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueueGroup.CreateSearchOrder">
            <summary>Creates a search order through this group.</summary>
            <returns>An enumerable of indices for this group.</returns>
        </member>
        <member name="T:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue">
            <summary>Provides a scheduling queue associatd with a QueuedTaskScheduler.</summary>
        </member>
        <member name="T:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView">
            <summary>A debug view for the queue.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView._queue">
            <summary>The queue.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView.#ctor(Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue)">
            <summary>Initializes the debug view.</summary>
            <param name="queue">The queue to be debugged.</param>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView.Priority">
            <summary>Gets the priority of this queue in its associated scheduler.</summary>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView.Id">
            <summary>Gets the ID of this scheduler.</summary>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView.ScheduledTasks">
            <summary>Gets all of the tasks scheduled to this queue.</summary>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView.AssociatedScheduler">
            <summary>Gets the QueuedTaskScheduler with which this queue is associated.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue._pool">
            <summary>The scheduler with which this pool is associated.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue._workItems">
            <summary>The work items stored in this queue.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue._priority">
            <summary>Gets the priority for this queue.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.#ctor(System.Int32,Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler)">
            <summary>Initializes the queue.</summary>
            <param name="priority">The priority associated with this queue.</param>
            <param name="pool">The scheduler with which this queue is associated.</param>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.WaitingTasks">
            <summary>Gets the number of tasks waiting in this scheduler.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.GetScheduledTasks">
            <summary>Gets the tasks scheduled to this scheduler.</summary>
            <returns>An enumerable of all tasks queued to this scheduler.</returns>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Tries to execute a task synchronously on the current thread.</summary>
            <param name="task">The task to execute.</param>
            <param name="taskWasPreviouslyQueued">Whether the task was previously queued.</param>
            <returns>true if the task was executed; otherwise, false.</returns>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.ExecuteTask(System.Threading.Tasks.Task)">
            <summary>Runs the specified ask.</summary>
            <param name="task">The task to execute.</param>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level to use when processing tasks.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue._disposed">
            <summary>
            Track whether Dispose has been called.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.Dispose">
            <summary>
            Implement IDisposable.
            Do not make this method virtual.
            A derived class should not be able to override this method.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.disposed">
            <summary>
            Track whether Dispose has been called.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.Dispose">
            <summary>
            Implement IDisposable.
            Do not make this method virtual.
            A derived class should not be able to override this method.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.QueuedTaskScheduler.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="T:Nequeo.Threading.Tasks.Schedulers.ReprioritizableTaskScheduler">
            <summary>Provides a task scheduler that supports reprioritizing previously queued tasks.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ReprioritizableTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ReprioritizableTaskScheduler.Prioritize(System.Threading.Tasks.Task)">
            <summary>Reprioritizes a previously queued task to the front of the queue.</summary>
            <param name="task">The task to be reprioritized.</param>
            <returns>Whether the task could be found and moved to the front of the queue.</returns>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ReprioritizableTaskScheduler.Deprioritize(System.Threading.Tasks.Task)">
            <summary>Reprioritizes a previously queued task to the back of the queue.</summary>
            <param name="task">The task to be reprioritized.</param>
            <returns>Whether the task could be found and moved to the back of the queue.</returns>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ReprioritizableTaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
            <summary>Removes a previously queued item from the scheduler.</summary>
            <param name="task">The task to be removed.</param>
            <returns>Whether the task could be removed from the scheduler.</returns>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ReprioritizableTaskScheduler.ProcessNextQueuedItem(System.Object)">
            <summary>Picks up and executes the next item in the queue.</summary>
            <param name="ignored">Ignored.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ReprioritizableTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Executes the specified task inline.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Whether the task was previously queued.</param>
            <returns>Whether the task could be executed inline.</returns>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ReprioritizableTaskScheduler.GetScheduledTasks">
            <summary>Gets all of the tasks currently queued to the scheduler.</summary>
            <returns>An enumerable of the tasks currently queued to the scheduler.</returns>
        </member>
        <member name="T:Nequeo.Threading.Tasks.Schedulers.RoundRobinSchedulerGroup">
            <summary>Enables the creation of a group of schedulers that support round-robin scheduling for fairness.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.RoundRobinSchedulerGroup.CreateScheduler">
            <summary>Creates a new scheduler as part of this group.</summary>
            <returns>The new scheduler.</returns>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.RoundRobinSchedulerGroup.Schedulers">
            <summary>Gets a collection of all schedulers in this group.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.RoundRobinSchedulerGroup.RemoveQueue_NeedsLock(Nequeo.Threading.Tasks.Schedulers.RoundRobinSchedulerGroup.RoundRobinTaskSchedulerQueue)">
            <summary>Removes a scheduler from the group.</summary>
            <param name="queue">The scheduler to be removed.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.RoundRobinSchedulerGroup.NotifyNewWorkItem">
            <summary>Notifies the ThreadPool that there's a new item to be executed.</summary>
        </member>
        <member name="T:Nequeo.Threading.Tasks.Schedulers.RoundRobinSchedulerGroup.RoundRobinTaskSchedulerQueue">
            <summary>A scheduler that participates in round-robin scheduling.</summary>
        </member>
        <member name="T:Nequeo.Threading.Tasks.Schedulers.StaTaskScheduler">
            <summary>Provides a scheduler that uses STA threads.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.StaTaskScheduler._tasks">
            <summary>Stores the queued tasks to be executed by our pool of STA threads.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.StaTaskScheduler._threads">
            <summary>The STA threads used by the scheduler.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.StaTaskScheduler.#ctor(System.Int32)">
            <summary>Initializes a new instance of the StaTaskScheduler class with the specified concurrency level.</summary>
            <param name="numberOfThreads">The number of threads that should be created and used by this scheduler.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.StaTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a Task to be executed by this scheduler.</summary>
            <param name="task">The task to be executed.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.StaTaskScheduler.GetScheduledTasks">
            <summary>Provides a list of the scheduled tasks for the debugger to consume.</summary>
            <returns>An enumerable of all tasks currently scheduled.</returns>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.StaTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Determines whether a Task may be inlined.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Whether the task was previously queued.</param>
            <returns>true if the task was successfully inlined; otherwise, false.</returns>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.StaTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.StaTaskScheduler.Dispose">
            <summary>
            Cleans up the scheduler by indicating that no more tasks will be queued.
            This method blocks until all threads successfully shutdown.
            </summary>
        </member>
        <member name="T:Nequeo.Threading.Tasks.Schedulers.SynchronizationContextTaskScheduler">
            <summary>Provides a task scheduler that targets a specific SynchronizationContext.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.SynchronizationContextTaskScheduler._tasks">
            <summary>The queue of tasks to execute, maintained for debugging purposes.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.SynchronizationContextTaskScheduler._context">
            <summary>The target context under which to execute the queued tasks.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.SynchronizationContextTaskScheduler.#ctor">
            <summary>Initializes an instance of the SynchronizationContextTaskScheduler class.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.SynchronizationContextTaskScheduler.#ctor(System.Threading.SynchronizationContext)">
            <summary>
            Initializes an instance of the SynchronizationContextTaskScheduler class
            with the specified SynchronizationContext.
            </summary>
            <param name="context">The SynchronizationContext under which to execute tasks.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.SynchronizationContextTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler for execution on the I/O ThreadPool.</summary>
            <param name="task">The Task to queue.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.SynchronizationContextTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Tries to execute a task on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Ignored.</param>
            <returns>Whether the task could be executed.</returns>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.SynchronizationContextTaskScheduler.GetScheduledTasks">
            <summary>Gets an enumerable of tasks queued to the scheduler.</summary>
            <returns>An enumerable of tasks queued to the scheduler.</returns>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.SynchronizationContextTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary>
        </member>
        <member name="T:Nequeo.Threading.Tasks.Schedulers.ThreadPerTaskScheduler">
            <summary>Provides a task scheduler that dedicates a thread per task.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ThreadPerTaskScheduler.GetScheduledTasks">
            <summary>Gets the tasks currently scheduled to this scheduler.</summary>
            <remarks>This will always return an empty enumerable, as tasks are launched as soon as they're queued.</remarks>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ThreadPerTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Starts a new thread to process the provided task.</summary>
            <param name="task">The task to be executed.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.ThreadPerTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Runs the provided task on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Ignored.</param>
            <returns>Whether the task could be executed on the current thread.</returns>
        </member>
        <member name="T:Nequeo.Threading.Tasks.Schedulers.WorkStealingTaskScheduler">
            <summary>Provides a work-stealing scheduler.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.WorkStealingTaskScheduler.#ctor">
            <summary>Initializes a new instance of the WorkStealingTaskScheduler class.</summary>
            <remarks>This constructors defaults to using twice as many threads as there are processors.</remarks>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.WorkStealingTaskScheduler.#ctor(System.Int32)">
            <summary>Initializes a new instance of the WorkStealingTaskScheduler class.</summary>
            <param name="concurrencyLevel">The number of threads to use in the scheduler.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.WorkStealingTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be scheduled.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.WorkStealingTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Executes a task on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Ignored.</param>
            <returns>Whether the task could be executed.</returns>
        </member>
        <member name="P:Nequeo.Threading.Tasks.Schedulers.WorkStealingTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.WorkStealingTaskScheduler.GetScheduledTasks">
            <summary>Gets all of the tasks currently scheduled to this scheduler.</summary>
            <returns>An enumerable containing all of the scheduled tasks.</returns>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.WorkStealingTaskScheduler.AddWsq(Nequeo.Threading.Tasks.Schedulers.WorkStealingQueue{System.Threading.Tasks.Task})">
            <summary>Adds a work-stealing queue to the set of queues.</summary>
            <param name="wsq">The queue to be added.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.WorkStealingTaskScheduler.RemoveWsq(Nequeo.Threading.Tasks.Schedulers.WorkStealingQueue{System.Threading.Tasks.Task})">
            <summary>Remove a work-stealing queue from the set of queues.</summary>
            <param name="wsq">The work-stealing queue to remove.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.WorkStealingTaskScheduler.DispatchLoop">
            <summary>
            The dispatch loop run by each thread in the scheduler.
            </summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.Schedulers.WorkStealingTaskScheduler.disposed">
            <summary>
            Track whether Dispose has been called.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.WorkStealingTaskScheduler.Dispose">
            <summary>
            Implement IDisposable.
            Do not make this method virtual.
            A derived class should not be able to override this method.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.WorkStealingTaskScheduler.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.Schedulers.WorkStealingTaskScheduler.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="T:Nequeo.Threading.Tasks.Schedulers.WorkStealingQueue`1">
            <summary>A work-stealing queue.</summary>
            <typeparam name="T">Specifies the type of data stored in the queue.</typeparam>
        </member>
        <member name="T:Nequeo.Threading.Tasks.SerialTaskQueue">
            <summary>Represents a queue of tasks to be started and executed serially.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.SerialTaskQueue._tasks">
            <summary>The ordered queue of tasks to be executed. Also serves as a lock protecting all shared state.</summary>
        </member>
        <member name="F:Nequeo.Threading.Tasks.SerialTaskQueue._taskInFlight">
            <summary>The task currently executing, or null if there is none.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.SerialTaskQueue.Enqueue(System.Func{System.Threading.Tasks.Task})">
            <summary>Enqueues the task to be processed serially and in order.</summary>
            <param name="taskGenerator">The function that generates a non-started task.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.SerialTaskQueue.Enqueue(System.Threading.Tasks.Task)">
            <summary>Enqueues the non-started task to be processed serially and in order.</summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.SerialTaskQueue.Completed">
            <summary>Gets a Task that represents the completion of all previously queued tasks.</summary>
        </member>
        <member name="M:Nequeo.Threading.Tasks.SerialTaskQueue.EnqueueInternal(System.Object)">
            <summary>Enqueues the task to be processed serially and in order.</summary>
            <param name="taskOrFunction">The task or functino that generates a task.</param>
            <remarks>The task must not be started and must only be started by this instance.</remarks>
        </member>
        <member name="M:Nequeo.Threading.Tasks.SerialTaskQueue.OnTaskCompletion(System.Threading.Tasks.Task)">
            <summary>Called when a Task completes to potentially start the next in the queue.</summary>
            <param name="ignored">The task that completed.</param>
        </member>
        <member name="M:Nequeo.Threading.Tasks.SerialTaskQueue.StartTask_CallUnderLock(System.Object)">
            <summary>Starts the provided task (or function that returns a task).</summary>
            <param name="nextItem">The next task or function that returns a task.</param>
        </member>
        <member name="T:Nequeo.Threading.ThreadSafeRandom">
            <summary>
            Represents a thread-safe, pseudo-random number generator.
            </summary>
        </member>
        <member name="F:Nequeo.Threading.ThreadSafeRandom._global">
            <summary>Seed provider.</summary>
        </member>
        <member name="F:Nequeo.Threading.ThreadSafeRandom._local">
            <summary>The underlyin provider of randomness, one instance per thread, initialized with _global.</summary>
        </member>
        <member name="M:Nequeo.Threading.ThreadSafeRandom.Next">
            <summary>Returns a nonnegative random number.</summary>
            <returns>A 32-bit signed integer greater than or equal to zero and less than MaxValue.</returns>
        </member>
        <member name="M:Nequeo.Threading.ThreadSafeRandom.Next(System.Int32)">
            <summary>Returns a nonnegative random number less than the specified maximum.</summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to zero. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to zero, and less than maxValue; 
            that is, the range of return values ordinarily includes zero but not maxValue. However, 
            if maxValue equals zero, maxValue is returned.
            </returns>
        </member>
        <member name="M:Nequeo.Threading.ThreadSafeRandom.Next(System.Int32,System.Int32)">
            <summary>Returns a random number within a specified range.</summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
            <returns>
            A 32-bit signed integer greater than or equal to minValue and less than maxValue; 
            that is, the range of return values includes minValue but not maxValue. 
            If minValue equals maxValue, minValue is returned.
            </returns>
        </member>
        <member name="M:Nequeo.Threading.ThreadSafeRandom.NextDouble">
            <summary>Returns a random number between 0.0 and 1.0.</summary>
            <returns>A double-precision floating point number greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:Nequeo.Threading.ThreadSafeRandom.NextBytes(System.Byte[])">
            <summary>Fills the elements of a specified array of bytes with random numbers.</summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
        </member>
        <member name="F:Nequeo.Threading.ThreadSafeRandom.disposed">
            <summary>
            Track whether Dispose has been called.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.ThreadSafeRandom.Dispose">
            <summary>
            Implement IDisposable.
            Do not make this method virtual.
            A derived class should not be able to override this method.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.ThreadSafeRandom.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
        </member>
        <member name="M:Nequeo.Threading.ThreadSafeRandom.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="T:Nequeo.Threading.TransferStream">
            <summary>
            Writeable stream for using a separate thread in a producer/consumer scenario.
            </summary>
        </member>
        <member name="F:Nequeo.Threading.TransferStream._writeableStream">
            <summary>The underlying stream to target.</summary>
        </member>
        <member name="F:Nequeo.Threading.TransferStream._chunks">
            <summary>The collection of chunks to be written.</summary>
        </member>
        <member name="F:Nequeo.Threading.TransferStream._processingTask">
            <summary>The Task to use for background writing.</summary>
        </member>
        <member name="M:Nequeo.Threading.TransferStream.#ctor(System.IO.Stream)">
            <summary>Initializes a new instance of the TransferStream.</summary>
            <param name="writeableStream">The underlying stream to which to write.</param>
        </member>
        <member name="P:Nequeo.Threading.TransferStream.CanWrite">
            <summary>Determines whether data can be written to the stream.</summary>
        </member>
        <member name="M:Nequeo.Threading.TransferStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Writes a sequence of bytes to the stream.</summary>
            <param name="buffer">An array of bytes. Write copies count bytes from buffer to the stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:Nequeo.Threading.TransferStream.Close">
            <summary>Closes the stream and releases all resources associated with it.</summary>
        </member>
    </members>
</doc>
