<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nequeo.Primitive</name>
    </assembly>
    <members>
        <member name="T:Nequeo.Caching.RuntimeCache">
            <summary>
            Class that contains the current runtime cache for
            the current application.
            </summary>
        </member>
        <member name="P:Nequeo.Caching.RuntimeCache.Cache">
            <summary>
            Gets the caching object for the current application.
            </summary>
        </member>
        <member name="P:Nequeo.Caching.RuntimeCache.Count">
            <summary>
            Gets the number of items stored in the cache.
            </summary>
        </member>
        <member name="P:Nequeo.Caching.RuntimeCache.QueryableItems">
            <summary>
            Gets the runtime queryable cached items.
            </summary>
        </member>
        <member name="P:Nequeo.Caching.RuntimeCache.CacheDuration">
            <summary>
            Gets sets, the number of seconds to cache the current item.
            </summary>
        </member>
        <member name="P:Nequeo.Caching.RuntimeCache.Values">
            <summary>
            Gets all the values within the cache.
            </summary>
        </member>
        <member name="P:Nequeo.Caching.RuntimeCache.Keys">
            <summary>
            Gets all the keys within the cache.
            </summary>
        </member>
        <member name="M:Nequeo.Caching.RuntimeCache.ContainsValue(System.Object)">
            <summary>
            Searches for the current value in the cache.
            </summary>
            <param name="value">The value to search for.</param>
            <returns>True if the value exists in the cache else false.</returns>
        </member>
        <member name="M:Nequeo.Caching.RuntimeCache.ContainsKey(System.String)">
            <summary>
            Searches for the current key in the cache.
            </summary>
            <param name="cacheKey">The key to search for.</param>
            <returns>True if the key exists in the cache else false.</returns>
        </member>
        <member name="M:Nequeo.Caching.RuntimeCache.GetKeyGroup(System.String)">
            <summary>
            Gets all the cache keys that have the specified 
            text in the key identifier.
            </summary>
            <param name="text">The text to search for.</param>
            <returns>A list of all cache keys.</returns>
        </member>
        <member name="M:Nequeo.Caching.RuntimeCache.GetValueType(System.String)">
            <summary>
            Gets the type of object in the cache.
            </summary>
            <param name="cacheKey">The cache key to get.</param>
            <returns>The type of object in the cache value.</returns>
        </member>
        <member name="M:Nequeo.Caching.RuntimeCache.Add(System.String,System.Object,System.Double)">
            <summary>
            Add the current child item to the cache.
            </summary>
            <param name="cacheKey">The specific item cache key to the model dependancy.</param>
            <param name="value">The object the cache.</param>
            <param name="cacheDuration">The duration of the cache item.</param>
        </member>
        <member name="M:Nequeo.Caching.RuntimeCache.Add(System.String,System.String,System.Object,System.Double)">
            <summary>
            Add the current child item to the cache.
            </summary>
            <param name="modelObjectName">The model object name dependancy.</param>
            <param name="cacheKey">The specific item cache key to the model dependancy.</param>
            <param name="value">The object the cache.</param>
            <param name="cacheDuration">The duration of the cache item.</param>
        </member>
        <member name="M:Nequeo.Caching.RuntimeCache.Remove(System.String)">
            <summary>
            Remove the current child item from the cached dependancy.
            </summary>
            <param name="cacheKey">The specific item cache key to the model dependancy.</param>
        </member>
        <member name="M:Nequeo.Caching.RuntimeCache.Invalidate(System.String)">
            <summary>
            Invalidate the current dependancy including all child items.
            </summary>
            <param name="key">The model object dependancy name or the cache key.</param>
        </member>
        <member name="M:Nequeo.Caching.RuntimeCache.Get(System.String)">
            <summary>
            Get the current cached object.
            </summary>
            <param name="cacheKey">The specific item cache key to the model dependancy.</param>
            <returns>The current cached object.</returns>
        </member>
        <member name="M:Nequeo.Caching.RuntimeCache.Set(System.String,System.Object,System.Double)">
            <summary>
            Set the existing cached item with a new value.
            </summary>
            <param name="cacheKey">The specific item cache key to the model dependancy.></param>
            <param name="value">The object the cache.</param>
            <param name="cacheDuration">The duration of the cache item.</param>
        </member>
        <member name="M:Nequeo.Caching.RuntimeCache.GetCacheItem">
            <summary>
            Cache enumerator, allows iteration through the cache.
            </summary>
            <returns>The current cached item.</returns>
        </member>
        <member name="M:Nequeo.Caching.RuntimeCache.GetValue">
            <summary>
            Cache value enumerator, allows iteration through all values.
            </summary>
            <returns>The cache value item.</returns>
        </member>
        <member name="M:Nequeo.Caching.RuntimeCache.GetKey">
            <summary>
            Cache key enumerator, allows iteration through all keys.
            </summary>
            <returns>The cache key item.</returns>
        </member>
        <member name="M:Nequeo.Caching.RuntimeCache.GetCacheKey(System.String,System.String)">
            <summary>
            Get the unique name of the cached object.
            </summary>
            <param name="modelObjectName">The model object dependancy name.</param>
            <param name="cacheKey">The specific item cache key to the model dependancy.</param>
            <returns>The unique name of the cached object.</returns>
        </member>
        <member name="M:Nequeo.Caching.RuntimeCache.CreateHttpRuntime">
            <summary>
            Create a new HttpRuntime object.
            </summary>
        </member>
        <member name="T:Nequeo.Caching.CustomCache">
            <summary>
            Class that contains the current custom cache for
            the current application.
            </summary>
        </member>
        <member name="P:Nequeo.Caching.CustomCache.Cache">
            <summary>
            Gets the caching object for the current application.
            </summary>
        </member>
        <member name="P:Nequeo.Caching.CustomCache.Values">
            <summary>
            Gets all the values within the cache.
            </summary>
        </member>
        <member name="P:Nequeo.Caching.CustomCache.Keys">
            <summary>
            Gets all the keys within the cache.
            </summary>
        </member>
        <member name="P:Nequeo.Caching.CustomCache.Count">
            <summary>
            Gets the number of items stored in the cache.
            </summary>
        </member>
        <member name="M:Nequeo.Caching.CustomCache.NullifyCache">
            <summary>
            Nullifies the current cache.
            </summary>
        </member>
        <member name="M:Nequeo.Caching.CustomCache.ContainsKey(System.String)">
            <summary>
            Searches for the current key in the cache.
            </summary>
            <param name="cacheKey">The key to search for.</param>
            <returns>True if the key exists in the cache else false.</returns>
        </member>
        <member name="M:Nequeo.Caching.CustomCache.ContainsValue(System.Object)">
            <summary>
            Searches for the current value in the cache.
            </summary>
            <param name="value">The value to search for.</param>
            <returns>True if the value exists in the cache else false.</returns>
        </member>
        <member name="M:Nequeo.Caching.CustomCache.GetValueType(System.String)">
            <summary>
            Gets the type of object in the cache.
            </summary>
            <param name="cacheKey">The cache key to get.</param>
            <returns>The type of object in the cache value.</returns>
        </member>
        <member name="M:Nequeo.Caching.CustomCache.GetKeyGroup(System.String)">
            <summary>
            Gets all the cache keys that have the specified 
            text in the key identifier.
            </summary>
            <param name="text">The text to search for.</param>
            <returns>A list of all cache keys.</returns>
        </member>
        <member name="M:Nequeo.Caching.CustomCache.Add(System.String,System.Object)">
            <summary>
            Add the current child item to the cache.
            </summary>
            <param name="cacheKey">The specific item cache key to the model dependancy.</param>
            <param name="value">The object the cache.</param>
        </member>
        <member name="M:Nequeo.Caching.CustomCache.Get(System.String)">
            <summary>
            Get the current cached object.
            </summary>
            <param name="cacheKey">The specific item cache key to the model dependancy.</param>
            <returns>The current cached object.</returns>
        </member>
        <member name="M:Nequeo.Caching.CustomCache.Set(System.String,System.Object)">
            <summary>
            Set the exists cached item with a new value.
            </summary>
            <param name="cacheKey">The specific item cache key to the model dependancy.></param>
            <param name="value">The object the cache.</param>
        </member>
        <member name="M:Nequeo.Caching.CustomCache.Remove(System.String)">
            <summary>
            Remove the current child item from the cached dependancy.
            </summary>
            <param name="cacheKey">The specific item cache key to the model dependancy.</param>
        </member>
        <member name="M:Nequeo.Caching.CustomCache.GetCacheItem">
            <summary>
            Cache enumerator, allows iteration through the cache.
            </summary>
            <returns>The current cached item.</returns>
        </member>
        <member name="M:Nequeo.Caching.CustomCache.GetValue">
            <summary>
            Cache value enumerator, allows iteration through all values.
            </summary>
            <returns>The cache value item.</returns>
        </member>
        <member name="M:Nequeo.Caching.CustomCache.GetKey">
            <summary>
            Cache key enumerator, allows iteration through all keys.
            </summary>
            <returns>The cache key item.</returns>
        </member>
        <member name="M:Nequeo.Caching.CustomCache.Clear">
            <summary>
            Removes all the items stored in the cache.
            </summary>
        </member>
        <member name="T:Nequeo.Custom.AsyncGenericResultArgs`1">
            <summary>
            Command argument class containing event handler
            information for the server command delegate.
            </summary>
            <typeparam name="T">The type of result to store.</typeparam>
        </member>
        <member name="M:Nequeo.Custom.AsyncGenericResultArgs`1.#ctor(`0)">
            <summary>
            Constructor for the command event argument.
            </summary>
            <param name="result">The result object</param>
        </member>
        <member name="P:Nequeo.Custom.AsyncGenericResultArgs`1.Result">
            <summary>
            Contains the result that is received from the server.
            </summary>
        </member>
        <member name="T:Nequeo.Custom.ClientCommandArgs">
            <summary>
            Command argument class containing event handler
            information for the server command delegate.
            </summary>
        </member>
        <member name="M:Nequeo.Custom.ClientCommandArgs.#ctor(System.String,System.String,System.Int64)">
            <summary>
            Constructor for the command event argument.
            </summary>
            <param name="command">The command that is received from the server.</param>
            <param name="data">The data that is received from the server.</param>
            <param name="code">The code that is received from the server.</param>
        </member>
        <member name="P:Nequeo.Custom.ClientCommandArgs.Command">
            <summary>
            Contains the command that is received from the server.
            </summary>
        </member>
        <member name="P:Nequeo.Custom.ClientCommandArgs.Data">
            <summary>
            Contains the data that is received from the server.
            </summary>
        </member>
        <member name="P:Nequeo.Custom.ClientCommandArgs.Code">
            <summary>
            Contains the code that is received from the server.
            </summary>
        </member>
        <member name="T:Nequeo.Custom.ClientOperationArgs">
            <summary>
            Operation argument class containing event handler
            information for the server operation delegate.
            </summary>
        </member>
        <member name="M:Nequeo.Custom.ClientOperationArgs.#ctor(System.String,System.String,System.Int64)">
            <summary>
            Constructor for the operation event argument.
            </summary>
            <param name="localFile">The local file name.</param>
            <param name="remoteFile">The remote file name.</param>
            <param name="fileSize">The file size.</param>
        </member>
        <member name="P:Nequeo.Custom.ClientOperationArgs.LocalFile">
            <summary>
            Contains the local file name.
            </summary>
        </member>
        <member name="P:Nequeo.Custom.ClientOperationArgs.RemoteFile">
            <summary>
            Contains the remote file name.
            </summary>
        </member>
        <member name="P:Nequeo.Custom.ClientOperationArgs.FileSize">
            <summary>
            Contains the file size.
            </summary>
        </member>
        <member name="T:Nequeo.Custom.ClientProgressArgs">
            <summary>
            Progress argument class containing event handler
            information for the server progress delegate.
            </summary>
        </member>
        <member name="M:Nequeo.Custom.ClientProgressArgs.#ctor(System.Int64)">
            <summary>
            Constructor for the progress event argument.
            </summary>
            <param name="size">The current number of 
            bytes sent or received.</param>
        </member>
        <member name="P:Nequeo.Custom.ClientProgressArgs.Size">
            <summary>
            Contains The current number of bytes 
            sent or received.
            </summary>
        </member>
        <member name="T:Nequeo.Custom.ClientThreadErrorArgs">
            <summary>
            Thread error argument class containing event handler
            information for the server thread error delegate.
            </summary>
        </member>
        <member name="M:Nequeo.Custom.ClientThreadErrorArgs.#ctor(System.String,System.Int64)">
            <summary>
            Constructor for the thread error event argument.
            </summary>
            <param name="data">The current thread error.</param>
            <param name="code">The code that is received from the server.</param>
        </member>
        <member name="P:Nequeo.Custom.ClientThreadErrorArgs.Data">
            <summary>
            Contains the current thread error. 
            sent or received.
            </summary>
        </member>
        <member name="P:Nequeo.Custom.ClientThreadErrorArgs.Code">
            <summary>
            Contains the code that is received from the server.
            </summary>
        </member>
        <member name="T:Nequeo.Custom.MessageArgs">
            <summary>
            Command argument class containing event handler
            information for the server command delegate.
            </summary>
        </member>
        <member name="M:Nequeo.Custom.MessageArgs.#ctor(System.String)">
            <summary>
            Constructor for the command event argument.
            </summary>
            <param name="message">The message that is received from the server.</param>
        </member>
        <member name="P:Nequeo.Custom.MessageArgs.Message">
            <summary>
            Contains the message that is received from the server.
            </summary>
        </member>
        <member name="T:Nequeo.Custom.AsyncArgs">
            <summary>
            Command argument class containing event handler
            information for the server command delegate.
            </summary>
        </member>
        <member name="M:Nequeo.Custom.AsyncArgs.#ctor(Nequeo.Exceptions.AsyncException)">
            <summary>
            Constructor for the command event argument.
            </summary>
            <param name="exception">The message that is received from the server.</param>
        </member>
        <member name="P:Nequeo.Custom.AsyncArgs.Exception">
            <summary>
            Contains the message that is received from the server.
            </summary>
        </member>
        <member name="T:Nequeo.Custom.OperationArgs">
            <summary>
            Command argument class containing event handler
            information for the server command delegate.
            </summary>
        </member>
        <member name="M:Nequeo.Custom.OperationArgs.#ctor(System.Boolean)">
            <summary>
            Constructor for the command event argument.
            </summary>
            <param name="cancel">True if the operation should be cancelled.</param>
        </member>
        <member name="P:Nequeo.Custom.OperationArgs.Cancel">
            <summary>
            Contains the cancel that is received from the server.
            </summary>
        </member>
        <member name="T:Nequeo.Custom.ValidationArgs">
            <summary>
            Command argument class containing event handler
            information for the server command delegate.
            </summary>
        </member>
        <member name="M:Nequeo.Custom.ValidationArgs.#ctor(System.Boolean)">
            <summary>
            Constructor for the command event argument.
            </summary>
            <param name="valid">True if the validation was successful; else false.</param>
        </member>
        <member name="P:Nequeo.Custom.ValidationArgs.Valid">
            <summary>
            Contains the valid that is received from the server.
            </summary>
        </member>
        <member name="T:Nequeo.Custom.Base64Encoder">
            <summary>
            Base64 encoder.
            </summary>
        </member>
        <member name="M:Nequeo.Custom.Base64Encoder.#ctor">
            <summary>
            Base64 encoder.
            </summary>
        </member>
        <member name="M:Nequeo.Custom.Base64Encoder.Encode(System.Byte[])">
            <summary>
            Encode the input data producing a base 64 encoded byte array.
            </summary>
            <param name="data">The data to encode.</param>
            <returns>A byte array containing the base 64 encoded data.</returns>
        </member>
        <member name="M:Nequeo.Custom.Base64Encoder.Encode(System.Byte[],System.IO.Stream)">
            <summary>
            Encode the byte data to base 64 writing it to the given output stream.
            </summary>
            <param name="data">The data.</param>
            <param name="outStream">The stream.</param>
            <returns>The number of bytes produced.</returns>
        </member>
        <member name="M:Nequeo.Custom.Base64Encoder.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            Encode the byte data to base 64 writing it to the given output stream.
            </summary>
            <param name="data">The data.</param>
            <param name="off">The offset.</param>
            <param name="length">The length.</param>
            <param name="outStream">The stream.</param>
            <returns>The number of bytes produced.</returns>
        </member>
        <member name="M:Nequeo.Custom.Base64Encoder.Decode(System.Byte[])">
            <summary>
            Decode the base 64 encoded input data. It is assumed the input data is valid.
            </summary>
            <param name="data">The data.</param>
            <returns>A byte array representing the decoded data.</returns>
        </member>
        <member name="M:Nequeo.Custom.Base64Encoder.Decode(System.String)">
            <summary>
            Decode the base 64 encoded string data - whitespace will be ignored.
            </summary>
            <param name="data">The data.</param>
            <returns>A byte array representing the decoded data.</returns>
        </member>
        <member name="M:Nequeo.Custom.Base64Encoder.Decode(System.String,System.IO.Stream)">
            <summary>
            Decode the base 64 encoded string data writing it to the given output stream, whitespace characters will be ignored.
            </summary>
            <param name="data">The data.</param>
            <param name="outStream">The stream.</param>
            <returns>The number of bytes produced.</returns>
        </member>
        <member name="T:Nequeo.Custom.HexEncoder">
            <summary>
            Hex encoder.
            </summary>
        </member>
        <member name="M:Nequeo.Custom.HexEncoder.#ctor">
            <summary>
            Hex encoder.
            </summary>
        </member>
        <member name="M:Nequeo.Custom.HexEncoder.ByteArrayToHexString(System.Byte[])">
            <summary>
            Converts an array of bytes to a hex string.
            </summary>
            <param name="value">The array of bytes to convert.</param>
            <returns>The string of hex values.</returns>
        </member>
        <member name="M:Nequeo.Custom.HexEncoder.HexStringToByteArray(System.String)">
            <summary>
            Converts a hex string to an array of bytes.
            </summary>
            <param name="value">The hex string value.</param>
            <returns>The array of bytes.</returns>
        </member>
        <member name="M:Nequeo.Custom.HexEncoder.HexStringToLong(System.String)">
            <summary>
            Converts the hex value to a number.
            </summary>
            <param name="value">The hex value as string.</param>
            <returns>The number equivalent to the value.</returns>
        </member>
        <member name="M:Nequeo.Custom.HexEncoder.LongToHexString(System.Int64)">
            <summary>
            Converts the number to hex string.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>The hex equivalent to the number.</returns>
        </member>
        <member name="M:Nequeo.Custom.HexEncoder.ToHexString(System.Byte[])">
            <summary>
            Convert to HEX string.
            </summary>
            <param name="data">The byte array to convert.</param>
            <returns>The Hex string.</returns>
        </member>
        <member name="M:Nequeo.Custom.HexEncoder.ToHexString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert to HEX string.
            </summary>
            <param name="data">The byte array to convert.</param>
            <param name="off">The offset.</param>
            <param name="length">The length.</param>
            <returns>The Hex string.</returns>
        </member>
        <member name="M:Nequeo.Custom.HexEncoder.Encode(System.Byte[])">
             encode the input data producing a Hex encoded byte array.
            
             @return a byte array containing the Hex encoded data.
        </member>
        <member name="M:Nequeo.Custom.HexEncoder.Encode(System.Byte[],System.Int32,System.Int32)">
             encode the input data producing a Hex encoded byte array.
            
             @return a byte array containing the Hex encoded data.
        </member>
        <member name="M:Nequeo.Custom.HexEncoder.Encode(System.Byte[],System.IO.Stream)">
             Hex encode the byte data writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Nequeo.Custom.HexEncoder.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             Hex encode the byte data writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Nequeo.Custom.HexEncoder.Decode(System.Byte[])">
             decode the Hex encoded input data. It is assumed the input data is valid.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:Nequeo.Custom.HexEncoder.Decode(System.String)">
             decode the Hex encoded string data - whitespace will be ignored.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:Nequeo.Custom.HexEncoder.Decode(System.String,System.IO.Stream)">
             decode the Hex encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="T:Nequeo.Custom.HexValueEncoder">
            <summary>
            HexValueEncoder.
            </summary>
        </member>
        <member name="M:Nequeo.Custom.HexValueEncoder.#cctor">
            <summary>
            HexValueEncoder.
            </summary>
        </member>
        <member name="M:Nequeo.Custom.HexValueEncoder.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             encode the input data producing a Hex output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Nequeo.Custom.HexValueEncoder.Decode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             decode the Hex encoded byte data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Nequeo.Custom.HexValueEncoder.DecodeString(System.String,System.IO.Stream)">
             decode the Hex encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="T:Nequeo.Custom.IEncoder">
            <summary>
            Encode and decode byte arrays (typically from binary to 7-bit ASCII encodings).
            </summary>
        </member>
        <member name="M:Nequeo.Custom.IEncoder.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="off"></param>
            <param name="length"></param>
            <param name="outStream"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Custom.IEncoder.Decode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="off"></param>
            <param name="length"></param>
            <param name="outStream"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Custom.IEncoder.DecodeString(System.String,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="outStream"></param>
            <returns></returns>
        </member>
        <member name="T:Nequeo.Custom.SplitDelimiterName">
            <summary>
            The string split delimiter name.
            </summary>
        </member>
        <member name="F:Nequeo.Custom.SplitDelimiterName.Tab">
            <summary>
            Tab delimiter (\t).
            </summary>
        </member>
        <member name="F:Nequeo.Custom.SplitDelimiterName.Csv">
            <summary>
            Csv delimiter (, and "").
            </summary>
        </member>
        <member name="F:Nequeo.Custom.SplitDelimiterName.Pipe">
            <summary>
            Pipe delimiter (|).
            </summary>
        </member>
        <member name="F:Nequeo.Custom.SplitDelimiterName.Dot">
            <summary>
            Dot delimiter (.).
            </summary>
        </member>
        <member name="F:Nequeo.Custom.SplitDelimiterName.At">
            <summary>
            At delimiter (@).
            </summary>
        </member>
        <member name="F:Nequeo.Custom.SplitDelimiterName.BackSlash">
            <summary>
            BackSlash delimiter (\).
            </summary>
        </member>
        <member name="F:Nequeo.Custom.SplitDelimiterName.ForwardSlash">
            <summary>
            ForwardSlash delimiter (/).
            </summary>
        </member>
        <member name="F:Nequeo.Custom.SplitDelimiterName.Equal">
            <summary>
            Equal delimiter (=).
            </summary>
        </member>
        <member name="F:Nequeo.Custom.SplitDelimiterName.Comma">
            <summary>
            Comma delimiter (,).
            </summary>
        </member>
        <member name="F:Nequeo.Custom.SplitDelimiterName.Return">
            <summary>
            Return delimiter (\r).
            </summary>
        </member>
        <member name="F:Nequeo.Custom.SplitDelimiterName.LineFeed">
            <summary>
            Line Feed delimiter (\n).
            </summary>
        </member>
        <member name="F:Nequeo.Custom.SplitDelimiterName.ReturnLineFeed">
            <summary>
            Return Line Feed delimiter (\r\n).
            </summary>
        </member>
        <member name="F:Nequeo.Custom.SplitDelimiterName.Colon">
            <summary>
            Colon delimiter (:).
            </summary>
        </member>
        <member name="F:Nequeo.Custom.SplitDelimiterName.SemiColon">
            <summary>
            Semi Colon delimiter (;).
            </summary>
        </member>
        <member name="T:Nequeo.Custom.DatabaseBoolean">
            <summary>
            Database boolean nullable type.
            </summary>
        </member>
        <member name="F:Nequeo.Custom.DatabaseBoolean.dbNull">
            <summary>
            DbNull
            </summary>
        </member>
        <member name="F:Nequeo.Custom.DatabaseBoolean.dbFalse">
            <summary>
            DbFalse
            </summary>
        </member>
        <member name="F:Nequeo.Custom.DatabaseBoolean.dbTrue">
            <summary>
            DbTrue
            </summary>
        </member>
        <member name="M:Nequeo.Custom.DatabaseBoolean.op_Implicit(System.Boolean)~Nequeo.Custom.DatabaseBoolean">
            <summary>
            Implicit conversion from bool to DBBool. Maps true to 
            DBBool.dbTrue and false to DBBool.dbFalse:
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Custom.DatabaseBoolean.op_Explicit(Nequeo.Custom.DatabaseBoolean)~System.Boolean">
            <summary>
            Explicit conversion from DBBool to bool. Throws an 
            exception if the given DBBool is dbNull, otherwise returns
            true or false:
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Custom.DatabaseBoolean.op_Equality(Nequeo.Custom.DatabaseBoolean,Nequeo.Custom.DatabaseBoolean)">
            <summary>
            Equality operator. Returns dbNull if either operand is dbNull, 
            otherwise returns dbTrue or dbFalse:
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Custom.DatabaseBoolean.op_Inequality(Nequeo.Custom.DatabaseBoolean,Nequeo.Custom.DatabaseBoolean)">
            <summary>
            Inequality operator. Returns dbNull if either operand is
            dbNull, otherwise returns dbTrue or dbFalse:
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Custom.DatabaseBoolean.op_LogicalNot(Nequeo.Custom.DatabaseBoolean)">
            <summary>
            Logical negation operator. Returns dbTrue if the operand is 
            dbFalse, dbNull if the operand is dbNull, or dbFalse if the
            operand is dbTrue:
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Custom.DatabaseBoolean.op_BitwiseAnd(Nequeo.Custom.DatabaseBoolean,Nequeo.Custom.DatabaseBoolean)">
            <summary>
            Logical AND operator. Returns dbFalse if either operand is 
            dbFalse, dbNull if either operand is dbNull, otherwise dbTrue:
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Custom.DatabaseBoolean.op_BitwiseOr(Nequeo.Custom.DatabaseBoolean,Nequeo.Custom.DatabaseBoolean)">
            <summary>
            Logical OR operator. Returns dbTrue if either operand is 
            dbTrue, dbNull if either operand is dbNull, otherwise dbFalse:
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Custom.DatabaseBoolean.op_True(Nequeo.Custom.DatabaseBoolean)">
            <summary>
            Definitely true operator. Returns true if the operand is 
            dbTrue, false otherwise:
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Custom.DatabaseBoolean.op_False(Nequeo.Custom.DatabaseBoolean)">
            <summary>
            Definitely false operator. Returns true if the operand is 
            dbFalse, false otherwise:
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Custom.DatabaseBoolean.op_Implicit(Nequeo.Custom.DatabaseBoolean)~System.String">
            <summary>
            Overload the conversion from DBBool to string:
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Custom.DatabaseBoolean.Equals(System.Object)">
            <summary>
            Override the Object.Equals(object o) method:
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Custom.DatabaseBoolean.GetHashCode">
            <summary>
            Override the Object.GetHashCode() method:
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Custom.DatabaseBoolean.ToString">
            <summary>
            Override the ToString method to convert DBBool to a string:
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nequeo.Custom.QuotedPrintable">
            <summary>
            Encodes data that consists of printable characters in the US-ASCII character set. See RFC 2406 Section 6.7.
            </summary>
        </member>
        <member name="M:Nequeo.Custom.QuotedPrintable.Encode(System.Char[])">
            <summary>
            Encode the array of characters.
            </summary>
            <param name="data">The array of characters.</param>
            <returns>The encoded string.</returns>
        </member>
        <member name="M:Nequeo.Custom.QuotedPrintable.Decode(System.Char[])">
            <summary>
            Decode the array of characters.
            </summary>
            <param name="data">The array of characters.</param>
            <returns>The decoded string.</returns>
        </member>
        <member name="T:Nequeo.Custom.TimeoutClock">
            <summary>
            Timeout control, non threaded clock.
            </summary>
        </member>
        <member name="M:Nequeo.Custom.TimeoutClock.#ctor(System.Int32)">
            <summary>
            Timeout control, non threaded clock.
            </summary>
            <param name="timeout">The timeout in milliseconds; -1 wait indefinitely.</param>
            <exception cref="T:System.Exception">The timeout is negative.</exception>
        </member>
        <member name="M:Nequeo.Custom.TimeoutClock.Reset">
            <summary>
            Reset the clock.
            </summary>
        </member>
        <member name="M:Nequeo.Custom.TimeoutClock.IsComplete">
            <summary>
            Has the clock timed out.
            </summary>
            <returns>True is the timeout has beem reached; else false.</returns>
        </member>
        <member name="M:Nequeo.Custom.TimeoutClock.Start">
            <summary>
            Start the clock.
            </summary>
        </member>
        <member name="T:Nequeo.Extension.ByteExtensions">
            <summary>
            Class that extends the Byte[] type.
            </summary>
        </member>
        <member name="M:Nequeo.Extension.ByteExtensions.ToUInt16(System.Byte[],Nequeo.Custom.ByteOrder)">
            <summary>
            Convert the source byte array to the byte order.
            </summary>
            <param name="source">The current sources</param>
            <param name="sourceOrder">The byte order.</param>
            <returns>The unsigned int.</returns>
        </member>
        <member name="M:Nequeo.Extension.ByteExtensions.ToUInt32(System.Byte[],Nequeo.Custom.ByteOrder)">
            <summary>
            Convert the source byte array to the byte order.
            </summary>
            <param name="source">The current sources</param>
            <param name="sourceOrder">The byte order.</param>
            <returns>The unsigned int.</returns>
        </member>
        <member name="M:Nequeo.Extension.ByteExtensions.ToUInt64(System.Byte[],Nequeo.Custom.ByteOrder)">
            <summary>
            Convert the source byte array to the byte order.
            </summary>
            <param name="source">The current sources</param>
            <param name="sourceOrder">The byte order.</param>
            <returns>The unsigned int.</returns>
        </member>
        <member name="M:Nequeo.Extension.ByteExtensions.ToHostOrder(System.Byte[],Nequeo.Custom.ByteOrder)">
            <summary>
            Converts the order of the specified array of <see cref="T:System.Byte"/> to the host byte order.
            </summary>
            <returns>
            An array of <see cref="T:System.Byte"/> converted from <paramref name="source"/>.
            </returns>
            <param name="source">
            An array of <see cref="T:System.Byte"/> to convert.
            </param>
            <param name="sourceOrder">
            One of the <see cref="T:Nequeo.Custom.ByteOrder"/> enum values, indicates the byte order of
            <paramref name="source"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Nequeo.Extension.ByteExtensions.Combine(System.Byte[],System.Byte[])">
            <summary>
            Combine the array to the source array, append to the end of the array
            </summary>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array to combine.</param>
            <returns>The new byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.ByteExtensions.CombineParallel(System.Byte[],System.Byte[])">
            <summary>
            Combine the array in parallel to the source array, append to the end of the array
            </summary>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array to combine.</param>
            <returns>The new byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.ByteExtensions.CombineParallelAsync(System.Byte[],System.Byte[])">
            <summary>
            Combine the array in parallel and asynchronously to the source array, append to the end of the array
            </summary>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array to combine.</param>
            <returns>The new byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.ByteExtensions.Combine(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Combine the array to the source array, append to the end of the array
            </summary>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array to combine.</param>
            <param name="arrayTwo">The second array to combine.</param>
            <returns>The new byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.ByteExtensions.CombineParallel(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Combine the array in parallel to the source array, append to the end of the array
            </summary>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array to combine.</param>
            <param name="arrayTwo">The second array to combine.</param>
            <returns>The new byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.ByteExtensions.CombineParallelAsync(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Combine the array in parallel and asynchronously to the source array, append to the end of the array
            </summary>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array to combine.</param>
            <param name="arrayTwo">The second array to combine.</param>
            <returns>The new byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.ByteExtensions.Combine(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Combine the array to the source array, append to the end of the array
            </summary>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array to combine.</param>
            <param name="arrayTwo">The second array to combine.</param>
            <param name="arrayThree">The third array to combine.</param>
            <returns>The new byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.ByteExtensions.CombineParallel(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Combine the array in parallel to the source array, append to the end of the array
            </summary>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array to combine.</param>
            <param name="arrayTwo">The second array to combine.</param>
            <param name="arrayThree">The third array to combine.</param>
            <returns>The new byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.ByteExtensions.CombineParallelAsync(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Combine the array in parallel and asynchronously to the source array, append to the end of the array
            </summary>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array to combine.</param>
            <param name="arrayTwo">The second array to combine.</param>
            <param name="arrayThree">The third array to combine.</param>
            <returns>The new byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.ByteExtensions.Combine(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Combine the array to the source array, append to the end of the array
            </summary>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array to combine.</param>
            <param name="arrayTwo">The second array to combine.</param>
            <param name="arrayThree">The third array to combine.</param>
            <param name="arrayFour">The fourth array to combine.</param>
            <returns>The new byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.ByteExtensions.CombineParallel(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Combine the array in parallel to the source array, append to the end of the array
            </summary>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array to combine.</param>
            <param name="arrayTwo">The second array to combine.</param>
            <param name="arrayThree">The third array to combine.</param>
            <param name="arrayFour">The fourth array to combine.</param>
            <returns>The new byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.ByteExtensions.CombineParallelAsync(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Combine the array in parallel and asynchronously to the source array, append to the end of the array
            </summary>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array to combine.</param>
            <param name="arrayTwo">The second array to combine.</param>
            <param name="arrayThree">The third array to combine.</param>
            <param name="arrayFour">The fourth array to combine.</param>
            <returns>The new byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.ByteExtensions.SourceArray(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Apply the task for the byte array.
            </summary>
            <param name="result">The result array.</param>
            <param name="source">The source array.</param>
            <param name="start">The starting index of the result array.</param>
            <returns>The resulting byte array.</returns>
        </member>
        <member name="M:Nequeo.Extension.ByteExtensions.SourceArrayParallel(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Apply the task for the byte array.
            </summary>
            <param name="result">The result array.</param>
            <param name="source">The source array.</param>
            <param name="start">The starting index of the result array.</param>
            <returns>The resulting byte array.</returns>
        </member>
        <member name="T:Nequeo.Extension.AsyncCombineBytes">
            <summary>
            Asyncronous combine bytes.
            </summary>
        </member>
        <member name="M:Nequeo.Extension.AsyncCombineBytes.#ctor(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Async combine bytes
            </summary>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array.</param>
            <param name="arrayTwo">The second array.</param>
            <param name="arrayThree">The third array.</param>
            <param name="arrayFour">The fourth array.</param>
            <param name="countExclusive">The parallel for loop count exclusive.</param>
            <param name="index">The current result array size index.</param>
            <param name="callback">The callback</param>
            <param name="state">The state.</param>
        </member>
        <member name="P:Nequeo.Extension.AsyncCombineBytes.Exception">
            <summary>
            Gets the current execution exception
            </summary>
        </member>
        <member name="E:Nequeo.Extension.AsyncCombineBytes.OnError">
            <summary>
            Load error.
            </summary>
        </member>
        <member name="M:Nequeo.Extension.AsyncCombineBytes.BeginLoad">
            <summary>
            Begin the async load.
            </summary>
            <returns>The async result</returns>
        </member>
        <member name="M:Nequeo.Extension.AsyncCombineBytes.EndLoad(System.IAsyncResult)">
            <summary>
            End the async load.
            </summary>
            <param name="ar">The async result</param>
            <returns>The data table.</returns>
        </member>
        <member name="M:Nequeo.Extension.AsyncCombineBytes.FuncAsyncLoad">
            <summary>
            The async query request method.
            </summary>
        </member>
        <member name="T:Nequeo.Extension.GenericArrayExtensions">
            <summary>
            Class that extends the a generic array type.
            </summary>
        </member>
        <member name="M:Nequeo.Extension.GenericArrayExtensions.SubArray``1(``0[],System.Int64,System.Int64)">
            <summary>
            Retrieves a sub-array from the specified <paramref name="source"/>.
            A sub-array starts at the specified element position in <paramref name="source"/>.
            </summary>
            <returns>
            An array of T that receives a sub-array, or an empty array of T
            if any problems with the parameters.
            </returns>
            <param name="source">
            An array of T from which to retrieve a sub-array.
            </param>
            <param name="startIndex">
            A <see cref="T:System.Int64"/> that represents the zero-based starting position of
            a sub-array in <paramref name="source"/>.
            </param>
            <param name="length">
            A <see cref="T:System.Int64"/> that represents the number of elements to retrieve.
            </param>
            <typeparam name="T">
            The type of elements in <paramref name="source"/>.
            </typeparam>
        </member>
        <member name="M:Nequeo.Extension.GenericArrayExtensions.Reverse``1(``0[])">
            <summary>
            Reverse the array from the source.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="source">The source array.</param>
            <returns>The source type array.</returns>
        </member>
        <member name="M:Nequeo.Extension.GenericArrayExtensions.Combine``1(``0[],``0[])">
            <summary>
            Combine the array to the source array, append to the end of the array
            </summary>
            <typeparam name="T">The type to examine.</typeparam>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array to combine.</param>
            <returns>The new byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.GenericArrayExtensions.CombineParallel``1(``0[],``0[])">
            <summary>
            Combine the array in parallel to the source array, append to the end of the array
            </summary>
            <typeparam name="T">The type to examine.</typeparam>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array to combine.</param>
            <returns>The new byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.GenericArrayExtensions.CombineParallelAsync``1(``0[],``0[])">
            <summary>
            Combine the array in parallel and asynchronously to the source array, append to the end of the array
            </summary>
            <typeparam name="T">The type to examine.</typeparam>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array to combine.</param>
            <returns>The new byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.GenericArrayExtensions.Combine``1(``0[],``0[],``0[])">
            <summary>
            Combine the array to the source array, append to the end of the array
            </summary>
            <typeparam name="T">The type to examine.</typeparam>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array to combine.</param>
            <param name="arrayTwo">The second array to combine.</param>
            <returns>The new byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.GenericArrayExtensions.CombineParallel``1(``0[],``0[],``0[])">
            <summary>
            Combine the array in parallel to the source array, append to the end of the array
            </summary>
            <typeparam name="T">The type to examine.</typeparam>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array to combine.</param>
            <param name="arrayTwo">The second array to combine.</param>
            <returns>The new byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.GenericArrayExtensions.CombineParallelAsync``1(``0[],``0[],``0[])">
            <summary>
            Combine the array in parallel and asynchronously to the source array, append to the end of the array
            </summary>
            <typeparam name="T">The type to examine.</typeparam>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array to combine.</param>
            <param name="arrayTwo">The second array to combine.</param>
            <returns>The new byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.GenericArrayExtensions.Combine``1(``0[],``0[],``0[],``0[])">
            <summary>
            Combine the array to the source array, append to the end of the array
            </summary>
            <typeparam name="T">The type to examine.</typeparam>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array to combine.</param>
            <param name="arrayTwo">The second array to combine.</param>
            <param name="arrayThree">The third array to combine.</param>
            <returns>The new byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.GenericArrayExtensions.CombineParallel``1(``0[],``0[],``0[],``0[])">
            <summary>
            Combine the array in parallel to the source array, append to the end of the array
            </summary>
            <typeparam name="T">The type to examine.</typeparam>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array to combine.</param>
            <param name="arrayTwo">The second array to combine.</param>
            <param name="arrayThree">The third array to combine.</param>
            <returns>The new byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.GenericArrayExtensions.CombineParallelAsync``1(``0[],``0[],``0[],``0[])">
            <summary>
            Combine the array in parallel and asynchronously to the source array, append to the end of the array
            </summary>
            <typeparam name="T">The type to examine.</typeparam>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array to combine.</param>
            <param name="arrayTwo">The second array to combine.</param>
            <param name="arrayThree">The third array to combine.</param>
            <returns>The new byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.GenericArrayExtensions.Combine``1(``0[],``0[],``0[],``0[],``0[])">
            <summary>
            Combine the array to the source array, append to the end of the array
            </summary>
            <typeparam name="T">The type to examine.</typeparam>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array to combine.</param>
            <param name="arrayTwo">The second array to combine.</param>
            <param name="arrayThree">The third array to combine.</param>
            <param name="arrayFour">The fourth array to combine.</param>
            <returns>The new byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.GenericArrayExtensions.CombineParallel``1(``0[],``0[],``0[],``0[],``0[])">
            <summary>
            Combine the array in parallel to the source array, append to the end of the array
            </summary>
            <typeparam name="T">The type to examine.</typeparam>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array to combine.</param>
            <param name="arrayTwo">The second array to combine.</param>
            <param name="arrayThree">The third array to combine.</param>
            <param name="arrayFour">The fourth array to combine.</param>
            <returns>The new byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.GenericArrayExtensions.CombineParallelAsync``1(``0[],``0[],``0[],``0[],``0[])">
            <summary>
            Combine the array in parallel and asynchronously to the source array, append to the end of the array
            </summary>
            <typeparam name="T">The type to examine.</typeparam>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array to combine.</param>
            <param name="arrayTwo">The second array to combine.</param>
            <param name="arrayThree">The third array to combine.</param>
            <param name="arrayFour">The fourth array to combine.</param>
            <returns>The new byte array.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.GenericArrayExtensions.SourceArray``1(``0[],``0[],System.Int32)">
            <summary>
            Apply the task for the byte array.
            </summary>
            <typeparam name="T">The type to examine.</typeparam>
            <param name="result">The result array.</param>
            <param name="source">The source array.</param>
            <param name="start">The starting index of the result array.</param>
            <returns>The resulting byte array.</returns>
        </member>
        <member name="M:Nequeo.Extension.GenericArrayExtensions.SourceArrayParallel``1(``0[],``0[],System.Int32)">
            <summary>
            Apply the task for the byte array.
            </summary>
            <typeparam name="T">The type to examine.</typeparam>
            <param name="result">The result array.</param>
            <param name="source">The source array.</param>
            <param name="start">The starting index of the result array.</param>
            <returns>The resulting byte array.</returns>
        </member>
        <member name="T:Nequeo.Extension.AsyncCombineGenericArray`1">
            <summary>
            Asyncronous combine bytes.
            </summary>
            <typeparam name="T">The type to examine.</typeparam>
        </member>
        <member name="M:Nequeo.Extension.AsyncCombineGenericArray`1.#ctor(`0[],`0[],`0[],`0[],`0[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Async combine bytes
            </summary>
            <param name="source">The source array.</param>
            <param name="arrayOne">The first array.</param>
            <param name="arrayTwo">The second array.</param>
            <param name="arrayThree">The third array.</param>
            <param name="arrayFour">The fourth array.</param>
            <param name="countExclusive">The parallel for loop count exclusive.</param>
            <param name="index">The current result array size index.</param>
            <param name="callback">The callback</param>
            <param name="state">The state.</param>
        </member>
        <member name="P:Nequeo.Extension.AsyncCombineGenericArray`1.Exception">
            <summary>
            Gets the current execution exception
            </summary>
        </member>
        <member name="E:Nequeo.Extension.AsyncCombineGenericArray`1.OnError">
            <summary>
            Load error.
            </summary>
        </member>
        <member name="M:Nequeo.Extension.AsyncCombineGenericArray`1.BeginLoad">
            <summary>
            Begin the async load.
            </summary>
            <returns>The async result</returns>
        </member>
        <member name="M:Nequeo.Extension.AsyncCombineGenericArray`1.EndLoad(System.IAsyncResult)">
            <summary>
            End the async load.
            </summary>
            <param name="ar">The async result</param>
            <returns>The data table.</returns>
        </member>
        <member name="M:Nequeo.Extension.AsyncCombineGenericArray`1.FuncAsyncLoad">
            <summary>
            The async query request method.
            </summary>
        </member>
        <member name="T:Nequeo.Extension.IEnumerableExtensions">
            <summary>
            Class that extends the System.Collections.Generic.IEnumerable type.
            </summary>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.ToStringArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the System.Collections.Generic.IEnumerable type
            to a collection of strings.
            </summary>
            <typeparam name="TSource">The source type within the collection.</typeparam>
            <param name="source">The current IEnumerable type.</param>
            <returns>The array of strings for the source type.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.ToObjectArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the System.Collections.Generic.IEnumerable type
            to a collection of objects.
            </summary>
            <typeparam name="TSource">The source type within the collection.</typeparam>
            <param name="source">The current IEnumerable type.</param>
            <returns>The array of objects for the source type.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.ToTSourceArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the object type
            to the specific type.
            </summary>
            <typeparam name="TSource">The source type within the collection.</typeparam>
            <param name="source">The source collection array.</param>
            <returns>The array of generic type objects for the source type.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.ToTSourceArray``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Converts the object type
            to the specific type.
            </summary>
            <typeparam name="TResult">The result type within the collection.</typeparam>
            <param name="source">The source collection array.</param>
            <returns>The array of generic type objects for the source type.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.ToListTSourceArray``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Converts the System.Collections.Generic.IEnumerable type
            to a list object with generic array.
            </summary>
            <typeparam name="TResult">The source type within the collection.</typeparam>
            <param name="source">The source collection array.</param>
            <returns>The array of generic type in the list object for the source type.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.ToListTSourceArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the System.Collections.Generic.IEnumerable type
            to a list object with generic array.
            </summary>
            <typeparam name="TSource">The source type within the collection.</typeparam>
            <param name="source">The source collection array.</param>
            <returns>The array of generic type in the list object for the source type.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.Intersection``1(System.Collections.Generic.IEnumerable{``0},``0[],System.Boolean)">
            <summary>
            Finds the intersection of two arrays
            </summary>
            <typeparam name="TSource">The source type within the collection.</typeparam>
            <param name="source">The source collection array.</param>
            <param name="arrayB">The array to compare with.</param>
            <param name="isEachArraySorted">Are each of the arrays sorted.</param>
            <returns>The intersection collection of the arrays.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.IntersectionExists``1(System.Collections.Generic.IEnumerable{``0},``0[],System.Boolean)">
            <summary>
            Does an intersection of two arrays exist.
            </summary>
            <typeparam name="TSource">The source type within the collection.</typeparam>
            <param name="source">The source collection array.</param>
            <param name="arrayB">The array to compare with.</param>
            <param name="isEachArraySorted">Are each of the arrays sorted.</param>
            <returns>True if an intersection exists; else false.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Sorts an array of elements, descending or ascending.
            </summary>
            <typeparam name="TSource">The source type within the collection.</typeparam>
            <param name="source">The source collection array.</param>
            <param name="descending">Sort in decending order else ascending.</param>
            <returns>The sorted array of elements.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null.</exception>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Finds the index of the first item matching an expression in an enumerable.
            </summary> 
            <typeparam name="TSource">The source type within the collection.</typeparam>
            <param name="source">The enumerable to search.</param> 
            <param name="predicate">The expression to test the items against.</param> 
            <returns>The index of the first matching item, or -1 if no items match.</returns> 
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.FindIndexes``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Finds the indexes of the item matching an expression in an enumerable.
            </summary> 
            <typeparam name="TSource">The source type within the collection.</typeparam>
            <param name="source">The enumerable to search.</param> 
            <param name="predicate">The expression to test the items against.</param> 
            <returns>The indexes of the matching items, or null if no items match.</returns> 
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.Remove``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Remove an item from the array.
            </summary>
            <typeparam name="TSource">The source type within the collection.</typeparam>
            <param name="source">The enumerable to search.</param>
            <param name="index">The index of the item in the array to remove.</param>
            <returns>The new array of items.</returns>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.Remove``1(System.Collections.Generic.IEnumerable{``0},System.Int32[])">
            <summary>
            Remove item(s) from the array.
            </summary>
            <typeparam name="TSource">The source type within the collection.</typeparam>
            <param name="source">The enumerable to search.</param>
            <param name="indexes">The indexes of the item in the array to remove.</param>
            <returns>The new array of items.</returns>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.Remove``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Remove item(s) from the array.
            </summary>
            <typeparam name="TSource">The source type within the collection.</typeparam>
            <param name="source">The enumerable to search.</param>
            <param name="predicate">The expression to test the items against.</param> 
            <returns>The new array of items.</returns>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.Keep``1(System.Collections.Generic.IEnumerable{``0},System.Int32[])">
            <summary>
            Keep item(s) in the array.
            </summary>
            <typeparam name="TSource">The source type within the collection.</typeparam>
            <param name="source">The enumerable to search.</param>
            <param name="indexes">The indexes of the item in the array to keep.</param>
            <returns>The new array of items.</returns>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.Keep``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Keep item(s) in the array.
            </summary>
            <typeparam name="TSource">The source type within the collection.</typeparam>
            <param name="source">The enumerable to search.</param>
            <param name="predicate">The expression to test the items against.</param> 
            <returns>The new array of items.</returns>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.AddIfNotExists``2(System.Collections.Generic.IEnumerable{``0},``1[],System.Func{``0,``1,System.Boolean},System.Func{``1,``0})">
            <summary>
            Add the items to the sources if they do not exist in the source collection.
            </summary>
            <typeparam name="TSource">The source type within the collection.</typeparam>
            <typeparam name="TAdd">The add type within the collection.</typeparam>
            <param name="source">The enumerable to search.</param>
            <param name="add">The list to add to the sources if any item does not exist in the source.</param>
            <param name="predicate">The expression to test the items against.</param>
            <param name="addAction">The expression used to add the data.</param>
            <returns>The new array of items.</returns>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.AddIfNotExists``3(System.Collections.Generic.IEnumerable{``0},``1[],``2[],System.Func{``0,``1,System.Boolean},System.Func{``1,``2,``0})">
            <summary>
            Add the items to the sources if they do not exist in the source collection.
            </summary>
            <typeparam name="TSource">The source type within the collection.</typeparam>
            <typeparam name="TAdd">The add type within the collection.</typeparam>
            <typeparam name="TAddSecond">The second add type to include.</typeparam>
            <param name="source">The enumerable to search.</param>
            <param name="add">The list to add to the sources if any item does not exist in the source.</param>
            <param name="addSecond">The second list to add.</param>
            <param name="predicate">The expression to test the items against.</param>
            <param name="addAction">The expression used to add the data.</param>
            <returns>The new array of items.</returns>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Executes the provided delegate for each item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <param name="action">The action to be applied.</param>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes the provided delegate for each item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <param name="action">The action to be applied.</param>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.AsGenericEnumerable(System.Collections.IEnumerable)">
            <summary>
            Convert to generic object enumerable instance.
            </summary>
            <param name="source">The current enumerable.</param>
            <returns>The generic enumerable instance.</returns>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.IndexOf(System.Collections.IEnumerable,System.Object)">
            <summary>
            Get the index of the item.
            </summary>
            <param name="source">The current enumerable.</param>
            <param name="item">The item.</param>
            <returns>The index of the item.</returns>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.ElementAt(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Get the element at index.
            </summary>
            <param name="source">The current enumerable.</param>
            <param name="index">The index.</param>
            <returns>The object at the index; else null.</returns>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.SelectRecursive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Select recursively.
            </summary>
            <typeparam name="TSource">The enumerable type.</typeparam>
            <param name="source">The enum source.</param>
            <param name="recursiveSelector">The recursive selector.</param>
            <returns>The enumerable type result.</returns>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Zip iterator. 
            </summary>
            <typeparam name="TFirst">The first type.</typeparam>
            <typeparam name="TSecond">The second type.</typeparam>
            <typeparam name="TResult">The result ype.</typeparam>
            <param name="first">The first collection.</param>
            <param name="second">The second collection.</param>
            <param name="resultSelector">The result selector function.</param>
            <returns>The combined type collection.</returns>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.ZipIterator``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Zip iterator. 
            </summary>
            <typeparam name="TFirst">The first type.</typeparam>
            <typeparam name="TSecond">The second type.</typeparam>
            <typeparam name="TResult">The result ype.</typeparam>
            <param name="first">The first collection.</param>
            <param name="second">The second collection.</param>
            <param name="resultSelector">The result selector function.</param>
            <returns>The combined type collection.</returns>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.ToReadOnlyCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            To readOnly collection.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="sequence">The current sequence.</param>
            <returns>The readOnly collection.</returns>
        </member>
        <member name="T:Nequeo.Extension.IEnumerableExtensions.DefaultReadOnlyCollection`1">
            <summary>
            Default ReadOnly Collection.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
        </member>
        <member name="P:Nequeo.Extension.IEnumerableExtensions.DefaultReadOnlyCollection`1.Empty">
            <summary>
            Gets the Empty collection.
            </summary>
        </member>
        <member name="T:Nequeo.Extension.IEnumerableExtensions.GenericEnumerable`1">
            <summary>
            Generic enumerable.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.GenericEnumerable`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Nequeo.Extension.IEnumerableExtensions.GenericEnumerable`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.GenericEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the implicit enumerable.
            </summary>
            <returns>The implicit enumerable.</returns>
        </member>
        <member name="M:Nequeo.Extension.IEnumerableExtensions.GenericEnumerable`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Get the implicit generic enumerable.
            </summary>
            <returns>The implicit generic enumerable.</returns>
        </member>
        <member name="T:Nequeo.Extension.Int32Extensions">
            <summary>
            Class that extends the System.Int32 type.
            </summary>
        </member>
        <member name="M:Nequeo.Extension.Int32Extensions.Multiplication(System.Int32,System.Int32)">
            <summary>
            Get the multiplication result.
            </summary>
            <param name="intValue">The current integer value.</param>
            <param name="multiplyBy">The multiplication value.</param>
            <returns>The new multiplied value.</returns>
        </member>
        <member name="M:Nequeo.Extension.Int32Extensions.Division(System.Int32,System.Int32)">
            <summary>
            Get the division result.
            </summary>
            <param name="intValue">The current integer value.</param>
            <param name="divideBy">The division value.</param>
            <returns>The new divided value.</returns>
        </member>
        <member name="M:Nequeo.Extension.Int32Extensions.ToUVarInt(System.Int32,System.Byte)">
            <summary>
            To unsigned int byte array.
            </summary>
            <param name="intValue">The current integer value.</param>
            <param name="prefix">The prefix.</param>
            <returns>The bytes array.</returns>
        </member>
        <member name="M:Nequeo.Extension.Int32Extensions.FromUVarInt(System.Byte[])">
            <summary>
            From unsigned byte array.
            </summary>
            <param name="binary">The byte array.</param>
            <returns>The integer.</returns>
        </member>
        <member name="T:Nequeo.Extension.StringExtensions">
            <summary>
            Class that extends the System.String type.
            </summary>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.IsOneOf(System.String,System.String[])">
            <summary>
            Is one of.
            </summary>
            <param name="s">The string.</param>
            <param name="candidates">The values to compare.</param>
            <returns>True if the s exists in the candiadtes.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.Words(System.String)">
            <summary>
            Get all words split by whitspace.
            </summary>
            <param name="stringValue">The current string value.</param>
            <returns>The array of words.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.UniqueWords(System.String)">
            <summary>
            Get all unique words split by whitspace.
            </summary>
            <param name="stringValue">The current string value.</param>
            <returns>The array of words.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.RemovePunctuation(System.String)">
            <summary>
            Remove the punctuation from the string.
            </summary>
            <param name="stringValue">The current string value.</param>
            <returns>The string without punctuation.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.RemovePunctuationFromStart(System.String)">
            <summary>
            Remove the punctuation from the start of the string.
            </summary>
            <param name="stringValue">The current string value.</param>
            <returns>The string without punctuation.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.RemovePunctuationFromEnd(System.String)">
            <summary>
            Remove the punctuation from the end of the string.
            </summary>
            <param name="stringValue">The current string value.</param>
            <returns>The string without punctuation.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.RemovePunctuationFromStartAndEnd(System.String)">
            <summary>
            Remove the punctuation from the start and end of the string.
            </summary>
            <param name="stringValue">The current string value.</param>
            <returns>The string without punctuation.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.Trim(System.String[])">
            <summary>
            Trim the string array.
            </summary>
            <param name="array">The current array.</param>
            <returns>The trimmed array.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.ToIntArray(System.String[])">
            <summary>
            Get the int array from the string array.
            </summary>
            <param name="array">The current array.</param>
            <returns>The int array.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.ToLongArray(System.String[])">
            <summary>
            Get the long array from the string array.
            </summary>
            <param name="array">The current array.</param>
            <returns>The long array.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.ToBoolArray(System.String[])">
            <summary>
            Get the bool array from the string array.
            </summary>
            <param name="array">The current array.</param>
            <returns>The bool array.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.ToDoubleArray(System.String[])">
            <summary>
            Get the double array from the string array.
            </summary>
            <param name="array">The current array.</param>
            <returns>The double array.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.ToDecimalArray(System.String[])">
            <summary>
            Get the decimal array from the string array.
            </summary>
            <param name="array">The current array.</param>
            <returns>The decimal array.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.SplitCsv(System.String)">
            <summary>
            Split the string using a csv delimeter.
            </summary>
            <param name="stringValue">The current string.</param>
            <returns>The collection of items.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null or empty</exception>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.SplitPipe(System.String)">
            <summary>
            Split the string using a pipe delimeter.
            </summary>
            <param name="stringValue">The current string.</param>
            <returns>The collection of items.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null or empty</exception>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.SplitTab(System.String)">
            <summary>
            Split the string using a tab delimeter.
            </summary>
            <param name="stringValue">The current string.</param>
            <returns>The collection of items.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null or empty</exception>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.Split(System.String,Nequeo.Custom.SplitDelimiterName)">
            <summary>
            Split the string according to the delimiter.
            </summary>
            <param name="stringValue">The current string.</param>
            <param name="delimiter">The delimeter to split against.</param>
            <returns>The collection of items.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null or empty</exception>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.Plural(System.String)">
            <summary>
            Converts the word from singular to plural.
            </summary>
            <param name="stringValue">The current string.</param>
            <returns>The converted word as plural.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.WordCount(System.String)">
            <summary>
            Gets the word count of the current string.
            </summary>
            <param name="stringValue">The current string.</param>
            <returns>The word count.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null or empty</exception>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.ToUpperFirstToLowerRest(System.String)">
            <summary>
            Converts the first letter of each word found to upper case
            and all other letters in each word found to lower case.
            </summary>
            <param name="stringValue">The current string.</param>
            <returns>The newly formatted string.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null or empty</exception>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.ToUpperFirstLetterInEachWord(System.String)">
            <summary>
            Converts the first letter of each word found to upper case.
            </summary>
            <param name="stringValue">The current string.</param>
            <returns>The newly formatted string.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null or empty</exception>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.ToUpperFirstLetter(System.String)">
            <summary>
            Converts to first letter of the string to upper case.
            </summary>
            <param name="stringValue">The current string.</param>
            <returns>The newly formatted string.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null or empty</exception>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.ToLowerFirstLetterInEachWord(System.String)">
            <summary>
            Converts the first letter of each word found to lower case.
            </summary>
            <param name="stringValue">The current string.</param>
            <returns>The newly formatted string.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null or empty</exception>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.ToLowerFirstLetter(System.String)">
            <summary>
            Converts to first letter of the string to lower case.
            </summary>
            <param name="stringValue">The current string.</param>
            <returns>The newly formatted string.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null or empty</exception>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.ReplaceKeyOperands(System.String)">
            <summary>
            Removes the key operands from the string.
            </summary>
            <param name="stringValue">The current string.</param>
            <returns>The newly formatted string.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null or empty</exception>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.ReplaceNumbers(System.String)">
            <summary>
            Replaces the string if it is a number to a string with 'N' at the begining of the number.
            </summary>
            <param name="stringValue">The current string.</param>
            <returns>The newly formatted string.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null or empty</exception>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.GetUtcOffsetHours(System.String)">
            <summary>
            Get the Utc offset hours in the string.
            </summary>
            <param name="stringValue">The current string.</param>
            <returns>The utc offset hours.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null or empty</exception>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.GetUtcOffsetMinutes(System.String)">
            <summary>
            Get the Utc offset minutes in the string.
            </summary>
            <param name="stringValue">The current string.</param>
            <returns>The utc offset minutes.</returns>
            <exception cref="T:System.ArgumentNullException">Source object can not be null or empty</exception>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified System.String with the text equivalent of the value of a 
            corresponding System.Object instance in a specified array.
            </summary>
            <param name="instance">A string to format.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
            <returns>A copy of format in which the format items have been replaced by the System.String 
            equivalent of the corresponding instances of System.Object in args.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.HasValue(System.String)">
            <summary>
            Is the value empty or null.
            </summary>
            <param name="value">The value to test.</param>
            <returns>True if a value exists; else false.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.IsCaseSensitiveEqual(System.String,System.String)">
            <summary>
            Determines whether this instance and another specified System.String object have the same value.
            </summary>
            <param name="instance">The string to check equality.</param>
            <param name="comparing">The comparing with string.</param>
            <returns>
            <c>true</c> if the value of the comparing parameter is the same as this string; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.IsCaseInsensitiveEqual(System.String,System.String)">
            <summary>
            Determines whether this instance and another specified System.String object have the same value.
            </summary>
            <param name="instance">The string to check equality.</param>
            <param name="comparing">The comparing with string.</param>
            <returns>
            <c>true</c> if the value of the comparing parameter is the same as this string; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Determines whether this instance is null or empty string.
            </summary>
            <param name="instance">The string to check its value.</param>
            <returns>
            <c>true</c> if the value is null or empty string; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.Compress(System.String)">
            <summary>
            Compresses the specified instance (using Gzip algorithm).
            </summary>
            <param name="instance">The instance.</param>
            <returns>The Base64 compressed value.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.Decompress(System.String)">
            <summary>
            Decompresses the specified instance (using Gzip algorithm).
            </summary>
            <param name="instance">The Base64 compressed instance.</param>
            <returns>The decompressed value.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.ToEnum``1(System.String,``0)">
            <summary>
            Get the enum value from the instance.
            </summary>
            <typeparam name="T">The enum type.</typeparam>
            <param name="instance">The string instance.</param>
            <param name="defaultValue">The default enum type.</param>
            <returns>The enum type.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.AsTitle(System.String)">
            <summary>
            Convert first letter to upper case of each word.
            </summary>
            <param name="value">The string.</param>
            <returns>The title.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.SplitPascalCase(System.String)">
            <summary>
            Split pascal case.
            </summary>
            <param name="value">The value.</param>
            <returns>The pascal case.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.FromByteArray(System.String,System.Byte[])">
            <summary>
            Convert to string.
            </summary>
            <param name="value">The instance.</param>
            <param name="bs">The byte array.</param>
            <returns>The string from the byte array.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.FromByteArray(System.Byte[])">
            <summary>
            From byte array to string.
            </summary>
            <param name="bs">The byte array.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.ToByteArray(System.String,System.Char[])">
            <summary>
            Convert the char array to byte array.
            </summary>
            <param name="value">The string value.</param>
            <param name="cs">The char array.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.ToByteArray(System.String)">
            <summary>
            Convert to byte array.
            </summary>
            <param name="value">The string value.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.FromAsciiByteArray(System.String,System.Byte[])">
            <summary>
            Convert to ASCII from byte array.
            </summary>
            <param name="value">The value.</param>
            <param name="bytes">The byte array.</param>
            <returns>The ASCII string.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.FromAsciiByteArray(System.Byte[])">
            <summary>
            Convert to ASCII from byte array.
            </summary>
            <param name="bytes">The byte array.</param>
            <returns>The ASCII string.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.ToAsciiByteArray(System.String,System.Char[])">
            <summary>
            Convert to ASCII byte array.
            </summary>
            <param name="value">The current string.</param>
            <param name="cs">The array of chars to convert.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.ToAsciiByteArray(System.String)">
            <summary>
            Convert to ASCII byte array.
            </summary>
            <param name="value">The chars to convert.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.FromUtf8ByteArray(System.String,System.Byte[])">
            <summary>
            Convert from UTF8 byte array to string.
            </summary>
            <param name="value">The value.</param>
            <param name="bytes">The UTF8 byte array.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.ToUtf8ByteArray(System.String,System.Char[])">
            <summary>
            Convert to UTF8 byte array.
            </summary>
            <param name="value">The string value.</param>
            <param name="cs">The char array.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.ToUtf8ByteArray(System.String)">
            <summary>
            Convert to UTF8 byte array.
            </summary>
            <param name="value">The string value.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.FromDefaultByteArray(System.String,System.Byte[])">
            <summary>
            Convert from Default byte array to string.
            </summary>
            <param name="value">The value.</param>
            <param name="bytes">The Default byte array.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.ToDefaultByteArray(System.String,System.Char[])">
            <summary>
            Convert to Default byte array.
            </summary>
            <param name="value">The value.</param>
            <param name="cs">The char array.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:Nequeo.Extension.StringExtensions.ToDefaultByteArray(System.String)">
            <summary>
            Convert to Default byte array.
            </summary>
            <param name="value">The value.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="T:Nequeo.Invention.Application">
            <summary>
            Class for external/internal application integration.
            </summary>
        </member>
        <member name="F:Nequeo.Invention.Application.Instance">
            <summary>
            Create a new static instance
            </summary>
        </member>
        <member name="M:Nequeo.Invention.Application.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Nequeo.Invention.Application.#ctor">
            <summary>
            Constructor for the current class.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.Application.RunApplicationEx(System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Runs the application with no standard output/error incapsolation.
            </summary>
            <param name="applicationExecutable">The application to start.</param>
            <param name="applicationArguments">The application arguments if any.</param>
            <param name="verb">The application verb if any.</param>
            <param name="redirectOutput">Should the output/error streams be captured.</param>
            <param name="waitForExit">The amount of time to wait before exit; -1 indicates do not wait; 0 indicates wait indefinitely</param>
            <returns>The results from the application if any.</returns>
            <remarks>Option for application output/error capture.</remarks>
        </member>
        <member name="M:Nequeo.Invention.Application.RunApplication(System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Runs the application with no standard output/error incapsolation.
            </summary>
            <param name="applicationExecutable">The application to start.</param>
            <param name="applicationArguments">The application arguments if any.</param>
            <param name="verb">The application verb if any.</param>
            <param name="redirectOutput">Should the output/error streams be captured.</param>
            <param name="waitForExit">The amount of time to wait before exit; -1 indicates do not wait; 0 indicates wait indefinitely</param>
            <returns>The results from the application if any.</returns>
            <remarks>Option for application output/error capture.</remarks>
        </member>
        <member name="M:Nequeo.Invention.Application.RunApplication(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Runs the application with no standard output/error incapsolation.
            </summary>
            <param name="applicationExecutable">The application to start.</param>
            <param name="applicationArguments">The application arguments if any.</param>
            <param name="verb">The application verb if any.</param>
            <param name="redirectOutput">Should the output/error streams be captured.</param>
            <returns>The results from the application if any.</returns>
            <remarks>Option for application output/error capture.</remarks>
        </member>
        <member name="M:Nequeo.Invention.Application.RunApplication(System.String,System.String,System.String)">
            <summary>
            Runs the application with no standard output/error incapsolation.
            </summary>
            <param name="applicationExecutable">The application to start.</param>
            <param name="applicationArguments">The application arguments if any.</param>
            <param name="verb">The application verb if any.</param>
            <returns>The results from the application if any.</returns>
            <remarks>No application output/error is captured.</remarks>
        </member>
        <member name="M:Nequeo.Invention.Application.RunApplication(System.String,System.String)">
            <summary>
            Runs the application with no standard output/error incapsolation.
            </summary>
            <param name="applicationExecutable">The application to start.</param>
            <param name="applicationArguments">The application arguments if any.</param>
            <returns>The results from the application if any.</returns>
            <remarks>No application output/error is captured.</remarks>
        </member>
        <member name="T:Nequeo.Invention.ApplicationResult">
            <summary>
            The struct will contain the application
            return results when application integration
            is applied.
            </summary>
        </member>
        <member name="F:Nequeo.Invention.ApplicationResult.Output">
            <summary>
            The output string from an application.
            </summary>
        </member>
        <member name="F:Nequeo.Invention.ApplicationResult.Error">
            <summary>
            The error string from an application.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.ApplicationResult.#ctor(System.String,System.String)">
            <summary>
            Default application result constructor.
            </summary>
            <param name="output">The ouput string from the application.</param>
            <param name="error">The error string from the application.</param>
        </member>
        <member name="T:Nequeo.Invention.ApplicationInteraction">
            <summary>
            Class for external/internal application integration.
            </summary>
        </member>
        <member name="F:Nequeo.Invention.ApplicationInteraction.Instance">
            <summary>
            Create a new static instance
            </summary>
        </member>
        <member name="M:Nequeo.Invention.ApplicationInteraction.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Nequeo.Invention.ApplicationInteraction.#ctor">
            <summary>
            Constructor for the current class.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.ApplicationInteraction.RunApplicationEx(System.String,System.String,System.String,System.Int32)">
            <summary>
            Runs the application with no standard output/error incapsolation.
            </summary>
            <param name="applicationExecutable">The application to start.</param>
            <param name="applicationArguments">The application arguments if any.</param>
            <param name="verb">The application verb if any.</param>
            <param name="waitForExit">The amount of time to wait before exit; -1 indicates do not wait; 0 indicates wait indefinitely</param>
            <returns>The results from the application if any.</returns>
            <remarks>Option for application output/error capture.</remarks>
        </member>
        <member name="M:Nequeo.Invention.ApplicationInteraction.RunApplication(System.String,System.String,System.String,System.Int32)">
            <summary>
            Runs the application with no standard output/error incapsolation.
            </summary>
            <param name="applicationExecutable">The application to start.</param>
            <param name="applicationArguments">The application arguments if any.</param>
            <param name="verb">The application verb if any.</param>
            <param name="waitForExit">The amount of time to wait before exit; -1 indicates do not wait; 0 indicates wait indefinitely</param>
            <returns>The results from the application if any.</returns>
            <remarks>Option for application output/error capture.</remarks>
        </member>
        <member name="M:Nequeo.Invention.ApplicationInteraction.RunApplication(System.String,System.String,System.String)">
            <summary>
            Runs the application with no standard output/error incapsolation.
            </summary>
            <param name="applicationExecutable">The application to start.</param>
            <param name="applicationArguments">The application arguments if any.</param>
            <param name="verb">The application verb if any.</param>
            <returns>The results from the application if any.</returns>
            <remarks>No application output/error is captured.</remarks>
        </member>
        <member name="M:Nequeo.Invention.ApplicationInteraction.RunApplication(System.String,System.String)">
            <summary>
            Runs the application with no standard output/error incapsolation.
            </summary>
            <param name="applicationExecutable">The application to start.</param>
            <param name="applicationArguments">The application arguments if any.</param>
            <returns>The results from the application if any.</returns>
            <remarks>No application output/error is captured.</remarks>
        </member>
        <member name="T:Nequeo.Invention.ApplicationInteractionResult">
            <summary>
            The struct will contain the application
            return results when application integration
            is applied.
            </summary>
        </member>
        <member name="F:Nequeo.Invention.ApplicationInteractionResult.Output">
            <summary>
            The output stream from an application.
            </summary>
        </member>
        <member name="F:Nequeo.Invention.ApplicationInteractionResult.Input">
            <summary>
            The input stream from an application.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.ApplicationInteractionResult.#ctor(System.IO.StreamReader,System.IO.StreamWriter)">
            <summary>
            Default application result constructor.
            </summary>
            <param name="output">The ouput stream from the application.</param>
            <param name="input">The input stream from the application.</param>
        </member>
        <member name="T:Nequeo.Invention.ListViewItemColumn">
            <summary>
            This class will implement the IComparer interface, The implementation
            will compare and sort a column for all ListViewItem dat in a ListView.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.ListViewItemColumn.#ctor(System.Int32,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="column">The column to compare.</param>
            <param name="descending">Sort into descending order.</param>
            <remarks>Sorting into descebding order default is true else
            sort into ascending or is false.</remarks>
        </member>
        <member name="M:Nequeo.Invention.ListViewItemColumn.Compare(System.Windows.Forms.ListViewItem,System.Windows.Forms.ListViewItem)">
            <summary>
            Compares to list view item columns with each other,
            returns the specified sort direction results.
            </summary>
            <param name="x">First object to compare.</param>
            <param name="y">Second object to compare.</param>
            <returns>The compared index. Positive or negative.</returns>
        </member>
        <member name="T:Nequeo.Invention.ToUpperComparer">
            <summary>
            To upper comparer.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.ToUpperComparer.Equals(System.String,System.String)">
            <summary>
            Compares the table name of the two objects and
            returns the unique collection of the type.
            </summary>
            <param name="x">The first object to match.</param>
            <param name="y">The second object to match.</param>
            <returns>True if a match has been found.</returns>
        </member>
        <member name="M:Nequeo.Invention.ToUpperComparer.GetHashCode(System.String)">
            <summary>
            Gets the hash code for the comparered object.
            </summary>
            <param name="obj">The object containing the member.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="T:Nequeo.Invention.ToLowerComparer">
            <summary>
            To lower comparer.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.ToLowerComparer.Equals(System.String,System.String)">
            <summary>
            Compares the table name of the two objects and
            returns the unique collection of the type.
            </summary>
            <param name="x">The first object to match.</param>
            <param name="y">The second object to match.</param>
            <returns>True if a match has been found.</returns>
        </member>
        <member name="M:Nequeo.Invention.ToLowerComparer.GetHashCode(System.String)">
            <summary>
            Gets the hash code for the comparered object.
            </summary>
            <param name="obj">The object containing the member.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="T:Nequeo.Invention.StringComparer">
            <summary>
            String comparer.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.StringComparer.Equals(System.String,System.String)">
            <summary>
            Compares the table name of the two objects and
            returns the unique collection of the type.
            </summary>
            <param name="x">The first object to match.</param>
            <param name="y">The second object to match.</param>
            <returns>True if a match has been found.</returns>
        </member>
        <member name="M:Nequeo.Invention.StringComparer.GetHashCode(System.String)">
            <summary>
            Gets the hash code for the comparered object.
            </summary>
            <param name="obj">The object containing the member.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="T:Nequeo.Invention.IntegerComparer">
            <summary>
            Integer comparer.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.IntegerComparer.Equals(System.Int32,System.Int32)">
            <summary>
            Compares the table name of the two objects and
            returns the unique collection of the type.
            </summary>
            <param name="x">The first object to match.</param>
            <param name="y">The second object to match.</param>
            <returns>True if a match has been found.</returns>
        </member>
        <member name="M:Nequeo.Invention.IntegerComparer.GetHashCode(System.Int32)">
            <summary>
            Gets the hash code for the comparered object.
            </summary>
            <param name="obj">The object containing the member.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="T:Nequeo.Invention.LongIntegerComparer">
            <summary>
            LongInteger comparer.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.LongIntegerComparer.Equals(System.Int64,System.Int64)">
            <summary>
            Compares the table name of the two objects and
            returns the unique collection of the type.
            </summary>
            <param name="x">The first object to match.</param>
            <param name="y">The second object to match.</param>
            <returns>True if a match has been found.</returns>
        </member>
        <member name="M:Nequeo.Invention.LongIntegerComparer.GetHashCode(System.Int64)">
            <summary>
            Gets the hash code for the comparered object.
            </summary>
            <param name="obj">The object containing the member.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="T:Nequeo.Invention.SingleComparer">
            <summary>
            Single comparer.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.SingleComparer.Equals(System.Single,System.Single)">
            <summary>
            Compares the table name of the two objects and
            returns the unique collection of the type.
            </summary>
            <param name="x">The first object to match.</param>
            <param name="y">The second object to match.</param>
            <returns>True if a match has been found.</returns>
        </member>
        <member name="M:Nequeo.Invention.SingleComparer.GetHashCode(System.Single)">
            <summary>
            Gets the hash code for the comparered object.
            </summary>
            <param name="obj">The object containing the member.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="T:Nequeo.Invention.DoubleComparer">
            <summary>
            Double comparer.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.DoubleComparer.Equals(System.Double,System.Double)">
            <summary>
            Compares the table name of the two objects and
            returns the unique collection of the type.
            </summary>
            <param name="x">The first object to match.</param>
            <param name="y">The second object to match.</param>
            <returns>True if a match has been found.</returns>
        </member>
        <member name="M:Nequeo.Invention.DoubleComparer.GetHashCode(System.Double)">
            <summary>
            Gets the hash code for the comparered object.
            </summary>
            <param name="obj">The object containing the member.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="T:Nequeo.Invention.DecimalComparer">
            <summary>
            Decimal comparer.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.DecimalComparer.Equals(System.Decimal,System.Decimal)">
            <summary>
            Compares the table name of the two objects and
            returns the unique collection of the type.
            </summary>
            <param name="x">The first object to match.</param>
            <param name="y">The second object to match.</param>
            <returns>True if a match has been found.</returns>
        </member>
        <member name="M:Nequeo.Invention.DecimalComparer.GetHashCode(System.Decimal)">
            <summary>
            Gets the hash code for the comparered object.
            </summary>
            <param name="obj">The object containing the member.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="T:Nequeo.Invention.DateTimeComparer">
            <summary>
            DateTime comparer.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.DateTimeComparer.Equals(System.DateTime,System.DateTime)">
            <summary>
            Compares the table name of the two objects and
            returns the unique collection of the type.
            </summary>
            <param name="x">The first object to match.</param>
            <param name="y">The second object to match.</param>
            <returns>True if a match has been found.</returns>
        </member>
        <member name="M:Nequeo.Invention.DateTimeComparer.GetHashCode(System.DateTime)">
            <summary>
            Gets the hash code for the comparered object.
            </summary>
            <param name="obj">The object containing the member.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="T:Nequeo.Invention.ArrayComparer">
            <summary>
            Array manipulation class.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.ArrayComparer.Intersection``1(``0[],``0[],System.Boolean)">
            <summary>
            Finds the intersection of two arrays.
            </summary>
            <typeparam name="TSource">The array type to compare.</typeparam>
            <param name="arrayA">First array of elements to match.</param>
            <param name="arrayB">Second array of elements to match.</param>
            <param name="isEachArraySorted">Are the arrays sorted.</param>
            <returns>An array of intersecting elements else null.</returns>
            <remarks>If the arrays are sorted they must be sorted in the same direction.</remarks>
        </member>
        <member name="M:Nequeo.Invention.ArrayComparer.IntersectionExists``1(``0[],``0[],System.Boolean)">
            <summary>
            Does an intersection exist of two arrays.
            </summary>
            <typeparam name="TSource">The array type to compare.</typeparam>
            <param name="arrayA">First array of elements to match.</param>
            <param name="arrayB">Second array of elements to match.</param>
            <param name="isEachArraySorted">Are the arrays sorted.</param>
            <returns>True if an intersection exists; else false.</returns>
            <remarks>If the arrays are sorted they must be sorted in the same direction.</remarks>
        </member>
        <member name="M:Nequeo.Invention.ArrayComparer.Sort``1(``0[],System.Boolean)">
            <summary>
            Sorts an array of elements, descending or ascending.
            </summary>
            <typeparam name="TSource">The array type to sort.</typeparam>
            <param name="array">The array of elements to sort.</param>
            <param name="descending">Sort in decending order else ascending.</param>
            <returns>The sorted array of elements.</returns>
        </member>
        <member name="M:Nequeo.Invention.ArrayComparer.Uniqueness``1(``0[],System.Int32[]@)">
            <summary>
            Gets the array of unique items and number within a sorted list.
            </summary>
            <typeparam name="TSource">The array type to compare.</typeparam>
            <param name="array">The array of a sorted type to extract unique items from.</param>
            <param name="uniquenessCount">The array of unique item numbers.</param>
            <returns>The array of unique items.</returns>
        </member>
        <member name="M:Nequeo.Invention.ArrayComparer.IntersectionUnSorted``1(``0[],``0[])">
            <summary>
            Finds the intersection of two un-sorted arrays.
            </summary>
            <typeparam name="TSource">The array type to compare.</typeparam>
            <param name="arrayA">First array of elements to match.</param>
            <param name="arrayB">Second array of elements to match.</param>
            <returns>An array of intersecting elements else null.</returns>
        </member>
        <member name="M:Nequeo.Invention.ArrayComparer.IntersectionSorted``1(``0[],``0[])">
            <summary>
            Finds the intersection of two sorted arrays.
            </summary>
            <typeparam name="TSource">The array type to compare.</typeparam>
            <param name="arrayA">First array of elements to match.</param>
            <param name="arrayB">Second array of elements to match.</param>
            <returns>An array of intersecting elements else null.</returns>
        </member>
        <member name="T:Nequeo.Invention.Arrays">
            <summary>
            Custom array provider.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.Arrays.#ctor">
            <summary>
            Custom array provider.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.Arrays.AreEqual(System.Boolean[],System.Boolean[])">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Invention.Arrays.AreEqual(System.Char[],System.Char[])">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Invention.Arrays.AreEqual(System.Byte[],System.Byte[])">
            <summary>
            Are two arrays equal.
            </summary>
            <param name="a">Left side.</param>
            <param name="b">Right side.</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:Nequeo.Invention.Arrays.ConstantTimeAreEqual(System.Byte[],System.Byte[])">
            <summary>
            A constant time equals comparison - does not terminate early if
            test will fail.
            </summary>
            <param name="a">first array</param>
            <param name="b">second array</param>
            <returns>true if arrays equal, false otherwise.</returns>
        </member>
        <member name="M:Nequeo.Invention.Arrays.AreEqual(System.Int32[],System.Int32[])">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Invention.Arrays.HaveSameContents(System.Boolean[],System.Boolean[])">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Invention.Arrays.HaveSameContents(System.Char[],System.Char[])">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Invention.Arrays.HaveSameContents(System.Byte[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Invention.Arrays.HaveSameContents(System.Int32[],System.Int32[])">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Invention.Arrays.ToString(System.Object[])">
            <summary>
            
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Invention.Arrays.GetHashCode(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Invention.Arrays.Clone(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Nequeo.Invention.Arrays.Clone(System.Int32[])">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Nequeo.Invention.Converter">
            <summary>
            Convert specified objects to standard formats.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.Converter.TimeSpanToDurationFormat(System.TimeSpan)">
            <summary>
            Convert a time span to the standard duration format.
            </summary>
            <param name="timeSpan">The time span to convert</param>
            <returns>The formatted string.</returns>
            <remarks>P[n]Y[n]M[n]DT[n]H[n]M[n]S : TimeSpan in the ISO 8601 Duration format</remarks>
            <![CDATA[
            P is the duration designator (historically called "period") placed at the start of the duration representation.
            Y is the year designator that follows the value for the number of years.
            M is the month designator that follows the value for the number of months.
            W is the week designator that follows the value for the number of weeks.
            D is the day designator that follows the value for the number of days.
            T is the time designator that precedes the time components of the representation.
            H is the hour designator that follows the value for the number of hours.
            M is the minute designator that follows the value for the number of minutes.
            S is the second designator that follows the value for the number of seconds.]]>
        </member>
        <member name="M:Nequeo.Invention.Converter.DurationFormatToTimeSpan(System.String)">
            <summary>
            Convert a standard duration format to time span.
            </summary>
            <param name="timeSpan">The time span duration.</param>
            <returns>The new time span.</returns>
            <remarks>P[n]Y[n]M[n]DT[n]H[n]M[n]S : TimeSpan in the ISO 8601 Duration format</remarks>
            <![CDATA[
            P is the duration designator (historically called "period") placed at the start of the duration representation.
            Y is the year designator that follows the value for the number of years.
            M is the month designator that follows the value for the number of months.
            W is the week designator that follows the value for the number of weeks.
            D is the day designator that follows the value for the number of days.
            T is the time designator that precedes the time components of the representation.
            H is the hour designator that follows the value for the number of hours.
            M is the minute designator that follows the value for the number of minutes.
            S is the second designator that follows the value for the number of seconds.]]>
        </member>
        <member name="M:Nequeo.Invention.Converter.GetDurationTime(System.String,System.Double)">
            <summary>
            Get the duration time.
            </summary>
            <param name="time">The current time string.</param>
            <param name="value">The current time value.</param>
            <returns>The total number of ticks.</returns>
        </member>
        <member name="M:Nequeo.Invention.Converter.GetDurationPeriod(System.String,System.Double)">
            <summary>
            Get the duration period.
            </summary>
            <param name="period">The current period string.</param>
            <param name="value">The current period value.</param>
            <returns>The total number of ticks.</returns>
        </member>
        <member name="M:Nequeo.Invention.Converter.GetDurationTimeEx(System.String,System.String,System.Double)">
            <summary>
            Get the duration time.
            </summary>
            <param name="time">The current time string.</param>
            <param name="search">The current search time.</param>
            <param name="value">The current time value.</param>
            <returns>The total number of ticks.</returns>
        </member>
        <member name="M:Nequeo.Invention.Converter.GetDurationPeriodEx(System.String,System.String,System.Double)">
            <summary>
            Get the duration period.
            </summary>
            <param name="period">The current period string.</param>
            <param name="search">The current search period.</param>
            <param name="value">The current period value.</param>
            <returns>The total number of ticks.</returns>
        </member>
        <member name="M:Nequeo.Invention.Converter.GetNumberShortScaleName(System.Double,System.String@,System.Int32@,System.String@,System.String@)">
            <summary>
            Gets the short scale name for the number (e.g. Billion).
            </summary>
            <param name="number">The number to get the name for.</param>
            <param name="newNumber">The new number for the given name; else the original number.</param>
            <param name="exponentialNotation">The exponential notation value (e.g. 9); else zero.</param>
            <param name="metricPrefixName">The metric prefix name (e.g. giga); else empty.</param>
            <param name="metricPrefixSymbol">The metric prefix symbol (e.g. G); else empty.</param>
            <returns>The name of the number; else null;</returns>
        </member>
        <member name="T:Nequeo.Invention.PasswordGenerator">
            <summary>
            Random password generator class.
            </summary>
            <remarks>Includes special characters.</remarks>
        </member>
        <member name="F:Nequeo.Invention.PasswordGenerator.Instance">
            <summary>
            Create a new static instance
            </summary>
        </member>
        <member name="M:Nequeo.Invention.PasswordGenerator.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Nequeo.Invention.PasswordGenerator.#ctor">
            <summary>
            Constructor for the current class.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.PasswordGenerator.RandomEx(System.Int32,System.Int32)">
            <summary>
            Generates a random password.
            </summary>
            <param name="minLength">Minimum password length.</param>
            <param name="maxLength">Maximum password length.</param>
            <returns>Randomly generated password.</returns>
            <remarks>
            The length of the generated password will be determined at
            random and it will fall with the range determined by the
            function parameters.
            </remarks>
        </member>
        <member name="M:Nequeo.Invention.PasswordGenerator.Random">
            <summary>
            Generates a random password.
            </summary>
            <returns>Randomly generated password.</returns>
            <remarks>
            The length of the generated password will be determined at
            random. It will be no shorter than the minimum default and
            no longer than maximum default.
            </remarks>
        </member>
        <member name="M:Nequeo.Invention.PasswordGenerator.Random(System.Int32)">
            <summary>
            Generates a random password of the exact length.
            </summary>
            <param name="length">Exact password length.</param>
            <returns>Randomly generated password.</returns>
        </member>
        <member name="M:Nequeo.Invention.PasswordGenerator.Random(System.Int32,System.Int32)">
            <summary>
            Generates a random password.
            </summary>
            <param name="minLength">Minimum password length.</param>
            <param name="maxLength">Maximum password length.</param>
            <returns>Randomly generated password.</returns>
            <remarks>
            The length of the generated password will be determined at
            random and it will fall with the range determined by the
            function parameters.
            </remarks>
        </member>
        <member name="T:Nequeo.Invention.PasswordStandardGenerator">
            <summary>
            Random standard password generator class.
            </summary>
            <remarks>Does not includes special characters.</remarks>
        </member>
        <member name="F:Nequeo.Invention.PasswordStandardGenerator.Instance">
            <summary>
            Create a new static instance
            </summary>
        </member>
        <member name="M:Nequeo.Invention.PasswordStandardGenerator.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Nequeo.Invention.PasswordStandardGenerator.#ctor">
            <summary>
            Constructor for the current class.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.PasswordStandardGenerator.RandomEx(System.Int32,System.Int32)">
            <summary>
            Generates a random password.
            </summary>
            <param name="minLength">Minimum password length.</param>
            <param name="maxLength">Maximum password length.</param>
            <returns>Randomly generated password.</returns>
            <remarks>
            The length of the generated password will be determined at
            random and it will fall with the range determined by the
            function parameters.
            </remarks>
        </member>
        <member name="M:Nequeo.Invention.PasswordStandardGenerator.Random">
            <summary>
            Generates a random password.
            </summary>
            <returns>Randomly generated password.</returns>
            <remarks>
            The length of the generated password will be determined at
            random. It will be no shorter than the minimum default and
            no longer than maximum default.
            </remarks>
        </member>
        <member name="M:Nequeo.Invention.PasswordStandardGenerator.Random(System.Int32)">
            <summary>
            Generates a random password of the exact length.
            </summary>
            <param name="length">Exact password length.</param>
            <returns>Randomly generated password.</returns>
        </member>
        <member name="M:Nequeo.Invention.PasswordStandardGenerator.Random(System.Int32,System.Int32)">
            <summary>
            Generates a random password.
            </summary>
            <param name="minLength">Minimum password length.</param>
            <param name="maxLength">Maximum password length.</param>
            <returns>Randomly generated password.</returns>
            <remarks>
            The length of the generated password will be determined at
            random and it will fall with the range determined by the
            function parameters.
            </remarks>
        </member>
        <member name="T:Nequeo.Invention.NumberGenerator">
            <summary>
            Random number generator class.
            </summary>
        </member>
        <member name="F:Nequeo.Invention.NumberGenerator.Instance">
            <summary>
            Create a new static instance
            </summary>
        </member>
        <member name="M:Nequeo.Invention.NumberGenerator.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Nequeo.Invention.NumberGenerator.#ctor">
            <summary>
            Constructor for the current class.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.NumberGenerator.RandomEx(System.Int32,System.Int32)">
            <summary>
            Generates a random number.
            </summary>
            <param name="minLength">Minimum number length.</param>
            <param name="maxLength">Maximum number length.</param>
            <returns>Randomly generated number.</returns>
            <remarks>
            The length of the generated number will be determined at
            random and it will fall with the range determined by the
            function parameters.
            </remarks>
        </member>
        <member name="M:Nequeo.Invention.NumberGenerator.Random">
            <summary>
            Generates a random number.
            </summary>
            <returns>Randomly generated number.</returns>
            <remarks>
            The length of the generated number will be determined at
            random. It will be no shorter than the minimum default and
            no longer than maximum default.
            </remarks>
        </member>
        <member name="M:Nequeo.Invention.NumberGenerator.Random(System.Int32)">
            <summary>
            Generates a random number of the exact length.
            </summary>
            <param name="length">Exact number length.</param>
            <returns>Randomly generated number.</returns>
        </member>
        <member name="M:Nequeo.Invention.NumberGenerator.Random(System.Int32,System.Int32)">
            <summary>
            Generates a random number.
            </summary>
            <param name="minLength">Minimum number length.</param>
            <param name="maxLength">Maximum number length.</param>
            <returns>Randomly generated number.</returns>
            <remarks>
            The length of the generated number will be determined at
            random and it will fall with the range determined by the
            function parameters.
            </remarks>
        </member>
        <member name="T:Nequeo.Invention.UpperCaseGenerator">
            <summary>
            Random upper case letter generator class.
            </summary>
        </member>
        <member name="F:Nequeo.Invention.UpperCaseGenerator.Instance">
            <summary>
            Create a new static instance
            </summary>
        </member>
        <member name="M:Nequeo.Invention.UpperCaseGenerator.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Nequeo.Invention.UpperCaseGenerator.#ctor">
            <summary>
            Constructor for the current class.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.UpperCaseGenerator.RandomEx(System.Int32,System.Int32)">
            <summary>
            Generates a random upper case number.
            </summary>
            <param name="minLength">Minimum number length.</param>
            <param name="maxLength">Maximum number length.</param>
            <returns>Randomly generated number.</returns>
            <remarks>
            The length of the generated number will be determined at
            random and it will fall with the range determined by the
            function parameters.
            </remarks>
        </member>
        <member name="M:Nequeo.Invention.UpperCaseGenerator.Random">
            <summary>
            Generates a random upper case number.
            </summary>
            <returns>Randomly generated number.</returns>
            <remarks>
            The length of the generated number will be determined at
            random. It will be no shorter than the minimum default and
            no longer than maximum default.
            </remarks>
        </member>
        <member name="M:Nequeo.Invention.UpperCaseGenerator.Random(System.Int32)">
            <summary>
            Generates a random upper case number.
            </summary>
            <param name="length">Exact number length.</param>
            <returns>Randomly generated number.</returns>
        </member>
        <member name="M:Nequeo.Invention.UpperCaseGenerator.Random(System.Int32,System.Int32)">
            <summary>
            Generates a random upper case number.
            </summary>
            <param name="minLength">Minimum number length.</param>
            <param name="maxLength">Maximum number length.</param>
            <returns>Randomly generated number.</returns>
            <remarks>
            The length of the generated number will be determined at
            random and it will fall with the range determined by the
            function parameters.
            </remarks>
        </member>
        <member name="T:Nequeo.Invention.LowerCaseGenerator">
            <summary>
            Random lower case letter generator class.
            </summary>
        </member>
        <member name="F:Nequeo.Invention.LowerCaseGenerator.Instance">
            <summary>
            Create a new static instance
            </summary>
        </member>
        <member name="M:Nequeo.Invention.LowerCaseGenerator.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Nequeo.Invention.LowerCaseGenerator.#ctor">
            <summary>
            Constructor for the current class.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.LowerCaseGenerator.RandomEx(System.Int32,System.Int32)">
            <summary>
            Generates a random lower case number.
            </summary>
            <param name="minLength">Minimum number length.</param>
            <param name="maxLength">Maximum number length.</param>
            <returns>Randomly generated number.</returns>
            <remarks>
            The length of the generated number will be determined at
            random and it will fall with the range determined by the
            function parameters.
            </remarks>
        </member>
        <member name="M:Nequeo.Invention.LowerCaseGenerator.Random">
            <summary>
            Generates a random lower case number.
            </summary>
            <returns>Randomly generated number.</returns>
            <remarks>
            The length of the generated number will be determined at
            random. It will be no shorter than the minimum default and
            no longer than maximum default.
            </remarks>
        </member>
        <member name="M:Nequeo.Invention.LowerCaseGenerator.Random(System.Int32)">
            <summary>
            Generates a random lower case number.
            </summary>
            <param name="length">Exact number length.</param>
            <returns>Randomly generated number.</returns>
        </member>
        <member name="M:Nequeo.Invention.LowerCaseGenerator.Random(System.Int32,System.Int32)">
            <summary>
            Generates a random lower case number.
            </summary>
            <param name="minLength">Minimum number length.</param>
            <param name="maxLength">Maximum number length.</param>
            <returns>Randomly generated number.</returns>
            <remarks>
            The length of the generated number will be determined at
            random and it will fall with the range determined by the
            function parameters.
            </remarks>
        </member>
        <member name="T:Nequeo.Invention.LowerUpperCaseGenerator">
            <summary>
            Random lower case and upper case letter generator class.
            </summary>
        </member>
        <member name="F:Nequeo.Invention.LowerUpperCaseGenerator.Instance">
            <summary>
            Create a new static instance
            </summary>
        </member>
        <member name="M:Nequeo.Invention.LowerUpperCaseGenerator.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Nequeo.Invention.LowerUpperCaseGenerator.#ctor">
            <summary>
            Constructor for the current class.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.LowerUpperCaseGenerator.RandomEx(System.Int32,System.Int32)">
            <summary>
            Generates a random lower and upper case number.
            </summary>
            <param name="minLength">Minimum number length.</param>
            <param name="maxLength">Maximum number length.</param>
            <returns>Randomly generated number.</returns>
            <remarks>
            The length of the generated number will be determined at
            random and it will fall with the range determined by the
            function parameters.
            </remarks>
        </member>
        <member name="M:Nequeo.Invention.LowerUpperCaseGenerator.Random">
            <summary>
            Generates a random lower and upper case number.
            </summary>
            <returns>Randomly generated number.</returns>
            <remarks>
            The length of the generated number will be determined at
            random. It will be no shorter than the minimum default and
            no longer than maximum default.
            </remarks>
        </member>
        <member name="M:Nequeo.Invention.LowerUpperCaseGenerator.Random(System.Int32)">
            <summary>
            Generates a random lower and upper case number.
            </summary>
            <param name="length">Exact number length.</param>
            <returns>Randomly generated number.</returns>
        </member>
        <member name="M:Nequeo.Invention.LowerUpperCaseGenerator.Random(System.Int32,System.Int32)">
            <summary>
            Generates a random lower and upper case number.
            </summary>
            <param name="minLength">Minimum number length.</param>
            <param name="maxLength">Maximum number length.</param>
            <returns>Randomly generated number.</returns>
            <remarks>
            The length of the generated number will be determined at
            random and it will fall with the range determined by the
            function parameters.
            </remarks>
        </member>
        <member name="T:Nequeo.Invention.NumberLowerCaseGenerator">
            <summary>
            Random number and lower case letter generator class.
            </summary>
        </member>
        <member name="F:Nequeo.Invention.NumberLowerCaseGenerator.Instance">
            <summary>
            Create a new static instance
            </summary>
        </member>
        <member name="M:Nequeo.Invention.NumberLowerCaseGenerator.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Nequeo.Invention.NumberLowerCaseGenerator.#ctor">
            <summary>
            Constructor for the current class.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.NumberLowerCaseGenerator.RandomEx(System.Int32,System.Int32)">
            <summary>
            Generates a random number and lower case number.
            </summary>
            <param name="minLength">Minimum number length.</param>
            <param name="maxLength">Maximum number length.</param>
            <returns>Randomly generated number.</returns>
            <remarks>
            The length of the generated number will be determined at
            random and it will fall with the range determined by the
            function parameters.
            </remarks>
        </member>
        <member name="M:Nequeo.Invention.NumberLowerCaseGenerator.Random">
            <summary>
            Generates a random number and lower case number.
            </summary>
            <returns>Randomly generated number.</returns>
            <remarks>
            The length of the generated number will be determined at
            random. It will be no shorter than the minimum default and
            no longer than maximum default.
            </remarks>
        </member>
        <member name="M:Nequeo.Invention.NumberLowerCaseGenerator.Random(System.Int32)">
            <summary>
            Generates a random number and lower case number.
            </summary>
            <param name="length">Exact number length.</param>
            <returns>Randomly generated number.</returns>
        </member>
        <member name="M:Nequeo.Invention.NumberLowerCaseGenerator.Random(System.Int32,System.Int32)">
            <summary>
            Generates a random number and lower case number.
            </summary>
            <param name="minLength">Minimum number length.</param>
            <param name="maxLength">Maximum number length.</param>
            <returns>Randomly generated number.</returns>
            <remarks>
            The length of the generated number will be determined at
            random and it will fall with the range determined by the
            function parameters.
            </remarks>
        </member>
        <member name="T:Nequeo.Invention.NumberUpperCaseGenerator">
            <summary>
            Random number and upper case letter generator class.
            </summary>
        </member>
        <member name="F:Nequeo.Invention.NumberUpperCaseGenerator.Instance">
            <summary>
            Create a new static instance
            </summary>
        </member>
        <member name="M:Nequeo.Invention.NumberUpperCaseGenerator.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Nequeo.Invention.NumberUpperCaseGenerator.#ctor">
            <summary>
            Constructor for the current class.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.NumberUpperCaseGenerator.RandomEx(System.Int32,System.Int32)">
            <summary>
            Generates a random number and upper case number.
            </summary>
            <param name="minLength">Minimum number length.</param>
            <param name="maxLength">Maximum number length.</param>
            <returns>Randomly generated number.</returns>
            <remarks>
            The length of the generated number will be determined at
            random and it will fall with the range determined by the
            function parameters.
            </remarks>
        </member>
        <member name="M:Nequeo.Invention.NumberUpperCaseGenerator.Random">
            <summary>
            Generates a random number and upper case number.
            </summary>
            <returns>Randomly generated number.</returns>
            <remarks>
            The length of the generated number will be determined at
            random. It will be no shorter than the minimum default and
            no longer than maximum default.
            </remarks>
        </member>
        <member name="M:Nequeo.Invention.NumberUpperCaseGenerator.Random(System.Int32)">
            <summary>
            Generates a random number and upper case number.
            </summary>
            <param name="length">Exact number length.</param>
            <returns>Randomly generated number.</returns>
        </member>
        <member name="M:Nequeo.Invention.NumberUpperCaseGenerator.Random(System.Int32,System.Int32)">
            <summary>
            Generates a random number and upper case number.
            </summary>
            <param name="minLength">Minimum number length.</param>
            <param name="maxLength">Maximum number length.</param>
            <returns>Randomly generated number.</returns>
            <remarks>
            The length of the generated number will be determined at
            random and it will fall with the range determined by the
            function parameters.
            </remarks>
        </member>
        <member name="T:Nequeo.Invention.TokenGenerator">
            <summary>
            Token generator class.
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TokenGenerator.Instance">
            <summary>
            Create a new static instance
            </summary>
        </member>
        <member name="M:Nequeo.Invention.TokenGenerator.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Nequeo.Invention.TokenGenerator.#ctor">
            <summary>
            Constructor for the current class.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.TokenGenerator.RandomEx(System.Int32,System.Int32)">
            <summary>
            Generates a random token.
            </summary>
            <param name="minLength">Minimum token length.</param>
            <param name="maxLength">Maximum token length.</param>
            <returns>Randomly generated token.</returns>
            <remarks>
            The length of the generated token will be determined at
            random and it will fall with the range determined by the
            function parameters.
            </remarks>
        </member>
        <member name="M:Nequeo.Invention.TokenGenerator.Random">
            <summary>
            Generates a random token.
            </summary>
            <returns>Randomly generated token.</returns>
            <remarks>
            The length of the generated token will be determined at
            random. It will be no shorter than the minimum default and
            no longer than maximum default.
            </remarks>
        </member>
        <member name="M:Nequeo.Invention.TokenGenerator.Random(System.Int32)">
            <summary>
            Generates a random token of the exact length.
            </summary>
            <param name="length">Exact token length.</param>
            <returns>Randomly generated token.</returns>
        </member>
        <member name="M:Nequeo.Invention.TokenGenerator.Random(System.Int32,System.Int32)">
            <summary>
            Generates a random token.
            </summary>
            <param name="minLength">Minimum token length.</param>
            <param name="maxLength">Maximum token length.</param>
            <returns>Randomly generated token.</returns>
            <remarks>
            The length of the generated token will be determined at
            random and it will fall with the range determined by the
            function parameters.
            </remarks>
        </member>
        <member name="T:Nequeo.Invention.IRandomGenerator">
            <summary>
            Random charactor generator interface.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.IRandomGenerator.Random">
            <summary>
            Generates a random number and upper case number.
            </summary>
            <returns>Randomly generated number.</returns>
            <remarks>
            The length of the generated number will be determined at
            random. It will be no shorter than the minimum default and
            no longer than maximum default.
            </remarks>
        </member>
        <member name="M:Nequeo.Invention.IRandomGenerator.Random(System.Int32)">
            <summary>
            Generates a random number and upper case number.
            </summary>
            <param name="length">Exact number length.</param>
            <returns>Randomly generated number.</returns>
        </member>
        <member name="M:Nequeo.Invention.IRandomGenerator.Random(System.Int32,System.Int32)">
            <summary>
            Generates a random number and upper case number.
            </summary>
            <param name="minLength">Minimum number length.</param>
            <param name="maxLength">Maximum number length.</param>
            <returns>Randomly generated number.</returns>
            <remarks>
            The length of the generated number will be determined at
            random and it will fall with the range determined by the
            function parameters.
            </remarks>
        </member>
        <member name="T:Nequeo.Invention.TimeZone">
            <summary>
            International time zone implementation class.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.TimeZone.TimeZoneDateTimeConverter(System.DateTime,System.String,System.Boolean)">
            <summary>
            Convert the current time zone to the specified time zone.
            </summary>
            <param name="currentDateTime">The current time and date.</param>
            <param name="timeZoneSystemName">The system time zone name to convert to.</param>
            <param name="includeUTCOffset">Include the UTC offset in the converted time.</param>
            <returns>The converted time zone.</returns>
        </member>
        <member name="M:Nequeo.Invention.TimeZone.LocalDateTime(System.DateTime,System.String)">
            <summary>
            Gets the local time from the UTC time for the specified offset.
            </summary>
            <param name="utc">The UTC date time.</param>
            <param name="offset">The offset including sign, e.g. 1030, +1030, -1030</param>
            <returns>The local time for the offset.</returns>
        </member>
        <member name="M:Nequeo.Invention.TimeZone.LocalDateTime(System.DateTime,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the local time from the UTC time for the specified offset.
            </summary>
            <param name="utc">The UTC date time.</param>
            <param name="offsetHours">The offset hours</param>
            <param name="offsetMinutes">The offset minutes</param>
            <param name="isForwardHours">True if the offset values are ahead of +0 else false behide</param>
            <returns>The local time for the offset.</returns>
        </member>
        <member name="M:Nequeo.Invention.TimeZone.GetUtcOffset">
            <summary>
            Gets the utc offset for the current local time.
            </summary>
            <returns>The utc offset as string.</returns>
        </member>
        <member name="M:Nequeo.Invention.TimeZone.GetUtcOffset(System.DateTime)">
            <summary>
            Gets the utc offset for the current local time.
            </summary>
            <param name="dateTime">The current date time.</param>
            <returns>The utc offset as string.</returns>
        </member>
        <member name="M:Nequeo.Invention.TimeZone.GetOffset">
            <summary>
            Gets the utc offset time span for the current local time.
            </summary>
            <returns>The utc time span.</returns>
        </member>
        <member name="M:Nequeo.Invention.TimeZone.GetOffset(System.DateTime)">
            <summary>
            ets the utc offset time span for the current local time.
            </summary>
            <param name="dateTime">The current date time.</param>
            <returns>The utc time span.</returns>
        </member>
        <member name="M:Nequeo.Invention.TimeZone.GetOffset(System.TimeSpan)">
            <summary>
            Gets the utc offset for the current local time.
            </summary>
            <param name="timeSpan">The utc offset time span.</param>
            <returns>The utc offset as string.</returns>
        </member>
        <member name="T:Nequeo.Invention.TimeZoneSystemName">
            <summary>
            The time zone system name.
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.AusEasternStandardTime">
            <summary>
            The Aus Eastern Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.EAustraliaStandardTime">
            <summary>
            The E. Australia Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.AUSCentralStandardTime">
            <summary>
            The AUS Central Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.CenAustraliaStandardTime">
            <summary>
            The Cen. Australia Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.TasmaniaStandardTime">
            <summary>
            The Tasmania Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.WAustraliaStandardTime">
            <summary>
            The W. Australia Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.AfghanistanStandardTime">
            <summary>
            The Afghanistan Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.AlaskanStandardTime">
            <summary>
            The Alaskan Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.ArabStandardTime">
            <summary>
            The Arab Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.ArabianStandardTime">
            <summary>
            The Arabian Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.ArabicStandardTime">
            <summary>
            The Arabic Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.ArgentinaStandardTime">
            <summary>
            The Argentina Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.ArmenianStandardTime">
            <summary>
            The Armenian Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.AtlanticStandardTime">
            <summary>
            The Atlantic Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.AzerbaijanStandardTime">
            <summary>
            The Azerbaijan Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.AzoresStandardTime">
            <summary>
            The Azores Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.CanadaCentralStandardTime">
            <summary>
            The Canada Central Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.CapeVerdeStandardTime">
            <summary>
            The Cape Verde Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.CaucasusStandardTime">
            <summary>
            The Caucasus Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.CentralAmericaStandardTime">
            <summary>
            The Central America Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.CentralAsiaStandardTime">
            <summary>
            The Central Asia Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.CentralBrazilianStandardTime">
            <summary>
            The Central Brazilian Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.CentralEuropeStandardTime">
            <summary>
            The Central Europe Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.CentralEuropeanStandardTime">
            <summary>
            The Central European Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.CentralPacificStandardTime">
            <summary>
            The Central Pacific Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.CentralStandardTime">
            <summary>
            The Central Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.MexicoStandardTime">
            <summary>
            The Mexico Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.ChinaStandardTime">
            <summary>
            The China Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.EAfricaStandardTime">
            <summary>
            The E. Africa Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.EEuropeStandardTime">
            <summary>
            The E. Europe Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.ESouthAmericaStandardTime">
            <summary>
            The E. South America Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.EasternStandardTime">
            <summary>
            The Eastern Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.EgyptStandardTime">
            <summary>
            The Egypt Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.EkaterinburgStandardTime">
            <summary>
            The Ekaterinburg Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.FijiStandardTime">
            <summary>
            The Fiji Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.FLEStandardTime">
            <summary>
            The FLE Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.GeorgianStandardTime">
            <summary>
            The Georgian Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.GMTStandardTime">
            <summary>
            The GMT Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.GreenlandStandardTime">
            <summary>
            The Greenland Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.GreenwichStandardTime">
            <summary>
            The Greenwich Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.GTBStandardTime">
            <summary>
            The GTB Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.HawaiianStandardTime">
            <summary>
            The Hawaiian Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.IndiaStandardTime">
            <summary>
            The India Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.IranStandardTime">
            <summary>
            The Iran Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.IsraelStandardTime">
            <summary>
            The Israel Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.JordanStandardTime">
            <summary>
            The Jordan Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.KoreaStandardTime">
            <summary>
            The Korea Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.MexicoStandardTime2">
            <summary>
            The Mexico Standard Time 2 enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.Mid_AtlanticStandardTime">
            <summary>
            The Mid-Atlantic Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.MiddleEastStandardTime">
            <summary>
            The Middle East Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.MontevideoStandardTime">
            <summary>
            The Montevideo Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.MountainStandardTime">
            <summary>
            The Mountain Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.MyanmarStandardTime">
            <summary>
            The Myanmar Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.NCentralAsiaStandardTime">
            <summary>
            The N. Central Asia Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.NamibiaStandardTime">
            <summary>
            The Namibia Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.NepalStandardTime">
            <summary>
            The Nepal Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.NewZealandStandardTime">
            <summary>
            The New Zealand Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.NewfoundlandStandardTime">
            <summary>
            The Newfoundland Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.NorthAsiaEastStandardTime">
            <summary>
            The North Asia East Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.NorthAsiaStandardTime">
            <summary>
            The North Asia Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.PacificSAStandardTime">
            <summary>
            The Pacific SA Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.PacificStandardTime">
            <summary>
            The Pacific Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.RomanceStandardTime">
            <summary>
            The Romance Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.RussianStandardTime">
            <summary>
            The Russian Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.SAEasternStandardTime">
            <summary>
            The SA Eastern Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.SamoaStandardTime">
            <summary>
            The Samoa Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.SEAsiaStandardTime">
            <summary>
            The SE Asia Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.SingaporeStandardTime">
            <summary>
            The Singapore Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.SouthAfricaStandardTime">
            <summary>
            The South Africa Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.SriLankaStandardTime">
            <summary>
            The Sri Lanka Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.TaipeiStandardTime">
            <summary>
            The Taipei Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.TokyoStandardTime">
            <summary>
            The Tokyo Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.TongaStandardTime">
            <summary>
            The Tonga Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.USEasternStandardTime">
            <summary>
            The US Eastern Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.USMountainStandardTime">
            <summary>
            The US Mountain Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.VenezuelaStandardTime">
            <summary>
            The Venezuela Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.VladivostokStandardTime">
            <summary>
            The Vladivostok Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.WCentralAfricaStandardTime">
            <summary>
            The W. Central Africa Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.WEuropeStandardTime">
            <summary>
            The W. Europe Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.WestAsiaStandardTime">
            <summary>
            The West Asia Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.WestPacificStandardTime">
            <summary>
            The West Pacific Standard Time enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneSystemName.YakutskStandardTime">
            <summary>
            The Yakutsk Standard Time enum value
            </summary>
        </member>
        <member name="T:Nequeo.Invention.TimeZoneDisplayName">
            <summary>
            The time zone display name.
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Melbourne">
            <summary>
            The Melbourne enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Brisbane">
            <summary>
            The Brisbane enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Darwin">
            <summary>
            The Darwin enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Adelaide">
            <summary>
            The Adelaide enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Hobart">
            <summary>
            The Hobart enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Perth">
            <summary>
            The Perth enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Canberra">
            <summary>
            The Canberra enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Sydney">
            <summary>
            The Sydney enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Kabul">
            <summary>
            The Kabul enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Anchorage">
            <summary>
            The Anchorage enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Riyadh">
            <summary>
            The Riyadh enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Kuwai">
            <summary>
            The Kuwai enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Dubai">
            <summary>
            The Dubai enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.AbuDhabi">
            <summary>
            The Abu Dhabi enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Muscat">
            <summary>
            The Muscat enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Baghdad">
            <summary>
            The Baghdad enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.BuenosAires">
            <summary>
            The Buenos Aires enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Yerevan">
            <summary>
            The Yerevan enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Halifax">
            <summary>
            The Halifax enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Baku">
            <summary>
            The Baku enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Azores">
            <summary>
            The Azores enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Regina">
            <summary>
            The Regina enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.CapeVerde">
            <summary>
            The Cape Verde enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Tbilisi">
            <summary>
            The Tbilisi enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Guatemala">
            <summary>
            The Guatemala enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Dhaka">
            <summary>
            The Dhaka enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Astana">
            <summary>
            The Astana enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Manaus">
            <summary>
            The Manaus enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Budapest">
            <summary>
            The Budapest enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Belgrade">
            <summary>
            The Belgrade enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Bratislava">
            <summary>
            The Bratislava enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Ljubljana">
            <summary>
            The Ljubljana enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Prague">
            <summary>
            The Prague enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Sarajevo">
            <summary>
            The Sarajevo enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Skopje">
            <summary>
            The Skopje enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Warsaw">
            <summary>
            The Warsaw enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Zagreb">
            <summary>
            The Zagreb enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Guadalcanal">
            <summary>
            The Guadalcanal enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Magadan">
            <summary>
            The Magadan enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.SolomonIs">
            <summary>
            The Solomon Is. enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.NewCaledonia">
            <summary>
            The New Caledonia enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Chicago">
            <summary>
            The Chicago enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Guadalajara">
            <summary>
            The Guadalajara enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.MexicoCity">
            <summary>
            The Mexico City enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Monterrey">
            <summary>
            The Monterrey enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Shanghai">
            <summary>
            The Shanghai enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Beijing">
            <summary>
            The Beijing enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Chongqing">
            <summary>
            The Chongqing enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.HongKong">
            <summary>
            The Hong Kong enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Urumqi">
            <summary>
            The Urumqi enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Nairobi">
            <summary>
            The Nairobi enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Minsk">
            <summary>
            The Minsk enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.SaoPaulo">
            <summary>
            The Sao Paulo enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.NewYork">
            <summary>
            The New York enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Cairo">
            <summary>
            The Cairo enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Yekaterinburg">
            <summary>
            The Yekaterinburg enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Fiji">
            <summary>
            The Fiji enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Kamchatka">
            <summary>
            The Kamchatka enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.MarshallIs">
            <summary>
            The Marshall Is. enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Helsinki">
            <summary>
            The Helsinki enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Kiev">
            <summary>
            The Kiev enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Riga">
            <summary>
            The Riga enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Sofia">
            <summary>
            The Sofia enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Tallinn">
            <summary>
            The Tallinn enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Vilnius">
            <summary>
            The Vilnius enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Dublin">
            <summary>
            The Dublin enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Edinburgh">
            <summary>
            The Edinburgh enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Lisbon">
            <summary>
            The Lisbon enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.London">
            <summary>
            The London enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Godthab">
            <summary>
            The Godthab enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Casablanca">
            <summary>
            The Casablanca enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Monrovia">
            <summary>
            The Monrovia enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Reykjavik">
            <summary>
            The Reykjavik enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Athens">
            <summary>
            The Athens enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Bucharest">
            <summary>
            The Bucharest enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Istanbul">
            <summary>
            The Istanbul enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Honolulu">
            <summary>
            The Honolulu enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Calcutta">
            <summary>
            The Calcutta enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Chennai">
            <summary>
            The Chennai enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Kolkata">
            <summary>
            The Kolkata enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Mumbai">
            <summary>
            The Mumbai enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.NewDelhi">
            <summary>
            The New Delhi enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Tehran">
            <summary>
            The Tehran enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Jerusalem">
            <summary>
            The Jerusalem enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Amman">
            <summary>
            The Amman enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Seoul">
            <summary>
            The Seoul enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Chihuahua">
            <summary>
            The Chihuahua enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.LaPaz">
            <summary>
            The La Paz enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Mazatlan">
            <summary>
            The Mazatlan enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.SouthGeorgia">
            <summary>
            The South Georgia enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Beirut">
            <summary>
            The Beirut enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Montevideo">
            <summary>
            The Montevideo enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Denver">
            <summary>
            The Denver enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Rangoon">
            <summary>
            The Rangoon enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Almaty">
            <summary>
            The Almaty enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Novosibirsk">
            <summary>
            The Novosibirsk enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Windhoek">
            <summary>
            The Windhoek enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Katmandu">
            <summary>
            The Katmandu enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Auckland">
            <summary>
            The Auckland enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Wellington">
            <summary>
            The Wellington enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.StJohns">
            <summary>
            The St Johns enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Irkutsk">
            <summary>
            The Irkutsk enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.UlaanBataar">
            <summary>
            The Ulaan Bataar enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Krasnoyarsk">
            <summary>
            The Krasnoyarsk enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Santiago">
            <summary>
            The Santiago enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.LosAngeles">
            <summary>
            The Los Angeles enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Tijuana">
            <summary>
            The Tijuana enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.BajaCalifornia">
            <summary>
            The Baja California enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Brussels">
            <summary>
            The Brussels enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Copenhagen">
            <summary>
            The Copenhagen enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Madrid">
            <summary>
            The Madrid enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Paris">
            <summary>
            The Paris enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Moscow">
            <summary>
            The Moscow enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.StPetersburg">
            <summary>
            The St. Petersburg enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Volgograd">
            <summary>
            The Volgograd enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Georgetown">
            <summary>
            The Georgetown enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Bogota">
            <summary>
            The Bogota enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Lima">
            <summary>
            The Lima enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Quito">
            <summary>
            The Quito enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.RioBranco">
            <summary>
            The Rio Branco enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Apia">
            <summary>
            The Apia enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Samoa">
            <summary>
            The Samoa enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Bangkok">
            <summary>
            The Bangkok enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Hanoi">
            <summary>
            The Hanoi enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Jakarta">
            <summary>
            The Jakarta enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.KualaLumpur">
            <summary>
            The Kuala Lumpur enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Singapore">
            <summary>
            The Singapore enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Johannesburg">
            <summary>
            The Johannesburg enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Harare">
            <summary>
            The Harare enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Pretoria">
            <summary>
            The Pretoria enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Colombo">
            <summary>
            The Colombo enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.SriJayawardenepura">
            <summary>
            The Sri Jayawardenepura enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Taipei">
            <summary>
            The Taipei enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Tokyo">
            <summary>
            The Tokyo enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Sapporo">
            <summary>
            The Sapporo enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Osaka">
            <summary>
            The Osaka enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Tongatapu">
            <summary>
            The Tongatapu enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Indiana">
            <summary>
            The Indiana enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Phoenix">
            <summary>
            The Phoenix enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Caracas">
            <summary>
            The Caracas enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Vladivostok">
            <summary>
            The Vladivostok enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Lagos">
            <summary>
            The Lagos enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Amsterdam">
            <summary>
            The Amsterdam enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Berlin">
            <summary>
            The Berlin enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Bern">
            <summary>
            The Bern enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Rome">
            <summary>
            The Rome enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Stockholm">
            <summary>
            The Stockholm enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Vienna">
            <summary>
            The Vienna enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Islamabad">
            <summary>
            The Islamabad enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Karachi">
            <summary>
            The Karachi enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Tashkent">
            <summary>
            The Tashkent enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.PortMoresby">
            <summary>
            The Port Moresby enum value
            </summary>
        </member>
        <member name="F:Nequeo.Invention.TimeZoneDisplayName.Yakutsk">
            <summary>
            The Yakutsk enum value
            </summary>
        </member>
        <member name="T:Nequeo.Invention.PasswordStrengthLevel">
            <summary>
            Password strength level
            </summary>
        </member>
        <member name="F:Nequeo.Invention.PasswordStrengthLevel.Poor">
            <summary>
            Poor; score 0 - 10
            </summary>
        </member>
        <member name="F:Nequeo.Invention.PasswordStrengthLevel.Poor_to_Weak">
            <summary>
            Poor to Weak; score 11 - 20
            </summary>
        </member>
        <member name="F:Nequeo.Invention.PasswordStrengthLevel.Weak">
            <summary>
            Weak; score 21 - 30
            </summary>
        </member>
        <member name="F:Nequeo.Invention.PasswordStrengthLevel.Weak_to_Average">
            <summary>
            Weak to Average; score 31 - 40
            </summary>
        </member>
        <member name="F:Nequeo.Invention.PasswordStrengthLevel.Average">
            <summary>
            Average; score 41 - 50
            </summary>
        </member>
        <member name="F:Nequeo.Invention.PasswordStrengthLevel.Average_to_Good">
            <summary>
            Average to Good; score 51 - 60
            </summary>
        </member>
        <member name="F:Nequeo.Invention.PasswordStrengthLevel.Good">
            <summary>
            Good; score 61 - 70
            </summary>
        </member>
        <member name="F:Nequeo.Invention.PasswordStrengthLevel.Good_to_Strong">
            <summary>
            Good to Strong; score 71 - 80
            </summary>
        </member>
        <member name="F:Nequeo.Invention.PasswordStrengthLevel.Strong">
            <summary>
            Strong; score 81 - 90
            </summary>
        </member>
        <member name="F:Nequeo.Invention.PasswordStrengthLevel.Strong_to_Exellent">
            <summary>
            Strong to Exellent; score 91 - 100
            </summary>
        </member>
        <member name="F:Nequeo.Invention.PasswordStrengthLevel.Exellent">
            <summary>
            Exellent; score 101 - Infinity
            </summary>
        </member>
        <member name="T:Nequeo.Invention.PasswordStrengthInitialValues">
            <summary>
            Sets the initial password strength values.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.PasswordStrengthInitialValues.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Password strength initialisation value constructor.
            </summary>
            <param name="lowerThreshold">The lower threshold character count; that is, if equal to this value then lower score is applied.</param>
            <param name="higherThreshold">The higher threshold character count; that is, if equal to this value then higher score is applied. This value must be greater than lower threshold.</param>
            <param name="higherThresholdScore">The higher threshold score; that is, if greater than higher threshold than the difference is multiplied by this value.</param>
            <param name="lowerScore">The lower score; that is, if equal to the lower threshold value then this score is applied.</param>
            <param name="higherScore">The higher score; that is, if equal to the higher threshold value then this score is applied.</param>
        </member>
        <member name="F:Nequeo.Invention.PasswordStrengthInitialValues.LowerThreshold">
            <summary>
            The lower threshold character count; that is, if equal to this value then lower score is applied.
            </summary>
        </member>
        <member name="F:Nequeo.Invention.PasswordStrengthInitialValues.HigherThreshold">
            <summary>
            The higher threshold character count; that is, if equal to this value then higher score is applied. This value must be greater than lower threshold.
            </summary>
        </member>
        <member name="F:Nequeo.Invention.PasswordStrengthInitialValues.HigherThresholdScore">
            <summary>
            The higher threshold score; that is, if greater than higher threshold than the difference is multiplied by this value. 
            </summary>
        </member>
        <member name="F:Nequeo.Invention.PasswordStrengthInitialValues.LowerScore">
            <summary>
            The lower score; that is, if equal to the lower threshold value then this score is applied.
            </summary>
        </member>
        <member name="F:Nequeo.Invention.PasswordStrengthInitialValues.HigherScore">
            <summary>
            The higher score; that is, if equal to the higher threshold value then this score is applied.
            </summary>
        </member>
        <member name="T:Nequeo.Invention.Validation">
            <summary>
            Validation class.
            </summary>
        </member>
        <member name="M:Nequeo.Invention.Validation.PasswordStrength(System.String,System.Int32@,System.Nullable{Nequeo.Invention.PasswordStrengthInitialValues})">
            <summary>
            Gets the password strength level for the password.
            </summary>
            <param name="password">The password to validate.</param>
            <param name="score">The score calculated for the password.</param>
            <param name="initialValues">The initial password strength values.</param>
            <returns>The password strength level.</returns>
        </member>
        <member name="M:Nequeo.Invention.Validation.Number(System.String)">
            <summary>
            Validates any number.
            </summary>
            <param name="number">String, contains the value to validate</param>
            <returns>True if type is a match else false</returns>
        </member>
        <member name="M:Nequeo.Invention.Validation.Integer(System.String)">
            <summary>
            Validates only integer types.
            </summary>
            <param name="integer">String, contains the value to validate</param>
            <returns>True if type is a match else false</returns>
        </member>
        <member name="M:Nequeo.Invention.Validation.PositiveNumber(System.String)">
            <summary>
            Validates only double types
            </summary>
            <param name="number">String, contains the value to validate</param>
            <returns>True if type is a match else false</returns>
        </member>
        <member name="M:Nequeo.Invention.Validation.PositiveInteger(System.String)">
            <summary>
            Validates only integer types.
            </summary>
            <param name="integer">String, contains the value to validate</param>
            <returns>True if type is a match else false</returns>
        </member>
        <member name="M:Nequeo.Invention.Validation.NegativeNumber(System.String)">
            <summary>
            Validates only double types
            </summary>
            <param name="number">String, contains the value to validate</param>
            <returns>True if type is a match else false</returns>
        </member>
        <member name="M:Nequeo.Invention.Validation.NegativeInteger(System.String)">
            <summary>
            Validates only integer types.
            </summary>
            <param name="integer">String, contains the value to validate</param>
            <returns>True if type is a match else false</returns>
        </member>
        <member name="M:Nequeo.Invention.Validation.Date(System.String)">
            <summary>
            This function validates a date in the form dd-mm-yyyy.
            </summary>
            <param name="date">The date as a string to valid.</param>
            <returns>True if type is a match else false</returns>
        </member>
        <member name="M:Nequeo.Invention.Validation.EmailAddressSimple(System.String)">
            <summary>
            Validates email addresses, the simplest regex.
            </summary>
            <param name="emailAddress">String, contains the value to validate</param>
            <returns>True if type is a match else false</returns>
        </member>
        <member name="M:Nequeo.Invention.Validation.EmailAddressStandard(System.String)">
            <summary>
            Validates email addresses, using a standard regex.
            </summary>
            <param name="emailAddress">String, contains the value to validate</param>
            <returns>True if type is a match else false</returns>
        </member>
        <member name="M:Nequeo.Invention.Validation.EmailAddressOfficial(System.String)">
            <summary>
            Validates email addresses using the official RFC standard.
            </summary>
            <param name="emailAddress">String, contains the value to validate</param>
            <returns>True if type is a match else false</returns>
        </member>
        <member name="M:Nequeo.Invention.Validation.IsAlfaNumeric(System.String)">
            <summary>
            Validates only alfanumeric values.
            </summary>
            <param name="alfaNumeric">Contains the value to validate.</param>
            <returns>True if type is a match else false.</returns>
        </member>
        <member name="M:Nequeo.Invention.Validation.IsJSonData(System.String)">
            <summary>
            Validates the json data.
            </summary>
            <param name="jSon">The JSON formatted data to validate</param>
            <returns>True if type is a match else false.</returns>
        </member>
        <member name="M:Nequeo.Invention.Validation.IsIPAddressV4(System.String)">
            <summary>
            Validates the v4 ip address
            </summary>
            <param name="ipAddressV4">The v4 ip address.</param>
            <returns>True if type is a match else false.</returns>
        </member>
        <member name="M:Nequeo.Invention.Validation.IsIPAddressV6(System.String)">
            <summary>
            Validates the v6 ip address
            </summary>
            <param name="ipAddressV6">The v6 ip address.</param>
            <returns>True if type is a match else false.</returns>
        </member>
        <member name="M:Nequeo.Invention.Validation.PasswordNumberUppercaseLowercaseSpecialchar(System.String,System.Int32,System.Int32)">
            <summary>
            Validate a password that must be
            between minimumPasswordLength and maximumPasswordLength length and contain
            at least one number, 
            at least one special character,
            at least one upper case character and 
            at least one lower case character.
            </summary>
            <param name="password">The password to validate.</param>
            <param name="minimumPasswordLength">The minimum password length; ( 4 or more).</param>
            <param name="maximumPasswordLength">The maximum password length.</param>
            <returns>True if type is a match else false.</returns>
            <![CDATA[Special Character (@#$%^&+=)]]>
        </member>
        <member name="M:Nequeo.Invention.Validation.PasswordNumberUppercaseLowercase(System.String,System.Int32,System.Int32)">
            <summary>
            Validate a password that must be
            between minimumPasswordLength and maximumPasswordLength length and contain
            at least one number, 
            at least one upper case character and 
            at least one lower case character.
            </summary>
            <param name="password">The password to validate.</param>
            <param name="minimumPasswordLength">The minimum password length; ( 4 or more).</param>
            <param name="maximumPasswordLength">The maximum password length.</param>
            <returns>True if type is a match else false.</returns>
        </member>
        <member name="M:Nequeo.Invention.Validation.PasswordUppercaseLowercase(System.String,System.Int32,System.Int32)">
            <summary>
            Validate a password that must be
            between minimumPasswordLength and maximumPasswordLength length and contain
            at least one upper case character and 
            at least one lower case character.
            </summary>
            <param name="password">The password to validate.</param>
            <param name="minimumPasswordLength">The minimum password length; ( 4 or more).</param>
            <param name="maximumPasswordLength">The maximum password length.</param>
            <returns>True if type is a match else false.</returns>
        </member>
        <member name="M:Nequeo.Invention.Validation.PasswordUppercase(System.String,System.Int32,System.Int32)">
            <summary>
            Validate a password that must be
            between minimumPasswordLength and maximumPasswordLength length and contain
            at least one upper case character.
            </summary>
            <param name="password">The password to validate.</param>
            <param name="minimumPasswordLength">The minimum password length; ( 4 or more).</param>
            <param name="maximumPasswordLength">The maximum password length.</param>
            <returns>True if type is a match else false.</returns>
        </member>
        <member name="M:Nequeo.Invention.Validation.PasswordLowercase(System.String,System.Int32,System.Int32)">
            <summary>
            Validate a password that must be
            between minimumPasswordLength and maximumPasswordLength length and contain
            at least one lower case character.
            </summary>
            <param name="password">The password to validate.</param>
            <param name="minimumPasswordLength">The minimum password length; ( 4 or more).</param>
            <param name="maximumPasswordLength">The maximum password length.</param>
            <returns>True if type is a match else false.</returns>
        </member>
        <member name="M:Nequeo.Invention.Validation.PasswordStartsWithLetterEndsWithLetter(System.String,System.Int32,System.Int32)">
            <summary>
            Validate a password that must be
            between minimumPasswordLength and maximumPasswordLength length and contain
            starts with a letter and ends with a letter.
            </summary>
            <param name="password">The password to validate.</param>
            <param name="minimumPasswordLength">The minimum password length; ( 4 or more).</param>
            <param name="maximumPasswordLength">The maximum password length.</param>
            <returns>True if type is a match else false.</returns>
        </member>
        <member name="M:Nequeo.Invention.Validation.IsXmlValid(System.String,System.String,System.String@)">
            <summary>
            Validate the xml file with the xsd file.
            </summary>
            <param name="xsdFile">The xsd file containing the schema.</param>
            <param name="xmlFile">The xml file to validate with the schema</param>
            <param name="errorMessage">The error is not validated.</param>
            <returns>True if valid else false.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Nequeo.Invention.Validation.IsXmlValid(System.IO.MemoryStream,System.IO.MemoryStream,System.String@)">
            <summary>
            Validate the xml string with the sxd string.
            </summary>
            <param name="xsdStream">The xsd memory stream containing the schema.</param>
            <param name="xmlStream">The xml memory stream to validate with the schema</param>
            <param name="errorMessage">The error is not validated.</param>
            <returns>True if valid else false.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Nequeo.Invention.Validation.IsXmlStringValid(System.String,System.String,System.String@)">
            <summary>
            Validate the xml string with the sxd string.
            </summary>
            <param name="xsdString">The xsd string containing the schema.</param>
            <param name="xmlString">The xml string to validate with the schema</param>
            <param name="errorMessage">The error is not validated.</param>
            <returns>True if valid else false.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Nequeo.Invention.Validation.IsXmlValidEx(System.String,System.String,System.String@)">
            <summary>
            Validate the xml file with the xsd file.
            </summary>
            <param name="xsdString">The xsd string containing the schema.</param>
            <param name="xmlFile">The xml file to validate with the schema</param>
            <param name="errorMessage">The error is not validated.</param>
            <returns>True if valid else false.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Nequeo.Invention.Validation.EntropyShannon(System.String,System.Double@,System.Double@)">
            <summary>
            Entropy (Shannon entropy H(X) = - SUM(p(x) * log(p(x))) i = 1 to n) is a measure of the uncertainty 
            in a random variable (Order and Disorder), which quantifies the expected value of the information 
            contained in a message.
            </summary>
            <param name="phrase">The phrase to analyse.</param>
            <param name="bitRate">The entropy bit rate.</param>
            <param name="metricRate">The randomness of the phase.</param>
            <returns>The measure of uncertainty H(X).</returns>
            <remarks>
            Shannon entropy is the average unpredictability in a random variable, which 
            is equivalent to its information content. Shannon entropy provides an absolute limit on the best possible 
            lossless encoding or compression of any communication, assuming that [5] the communication may be represented 
            as a sequence of independent and identically distributed random variables. Shannon's source coding 
            theorem shows that, in the limit, the average length of the shortest possible representation to encode 
            the messages in a given alphabet is their entropy divided by the logarithm of the number of symbols in 
            the target alphabet.
            </remarks>
        </member>
        <member name="M:Nequeo.Invention.Validation.PasswordCrackTime(System.String,System.Double@,System.Double)">
            <summary>
            Calculates the time (years) a phrase (password) would take to crack.
            </summary>
            <param name="phrase">The password or phrase to examine.</param>
            <param name="combinations">The number of possible combinations.</param>
            <param name="calculationsPerSecond">The calculations per second a system can perform.</param>
            <returns>The time (years) it would take to crack the phrase.</returns>
        </member>
    </members>
</doc>
